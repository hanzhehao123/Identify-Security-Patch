label,content,hash
0,"commit d940d468e29bff5eb5669c0dd8f3de0c3de17bfb
Merge: 13d5f87cc3 fb858fb76b
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Wed Jun 30 19:09:45 2021 +0100

    Merge remote-tracking branch 'remotes/quic/tags/pull-hex-20210629' into staging
    
    Fixes for bugs found by inspection and internal testing
    Tests added to tests/tcg/hexagon/misc.c
    
    # gpg: Signature made Tue 29 Jun 2021 17:50:16 BST
    # gpg:                using RSA key 7B0244FB12DE4422
    # gpg: Good signature from ""Taylor Simpson (Rock on) <tsimpson@quicinc.com>"" [undefined]
    # gpg: WARNING: This key is not certified with a trusted signature!
    # gpg:          There is no indication that the signature belongs to the owner.
    # Primary key fingerprint: 3635 C788 CE62 B91F D4C5  9AB4 7B02 44FB 12DE 4422
    
    * remotes/quic/tags/pull-hex-20210629:
      Hexagon (target/hexagon) remove unused TCG variables
      Hexagon (target/hexagon) cleanup gen_store_conditional[48] functions
      Hexagon (target/hexagon) fix l2fetch instructions
      Hexagon (target/hexagon) fix bug in fLSBNEW*
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",d940d468e2
0,"commit fb858fb76b1b2dfdf64f82669df1270c0c19a033
Author: Taylor Simpson <tsimpson@quicinc.com>
Date:   Tue Jun 1 18:19:44 2021 -0500

    Hexagon (target/hexagon) remove unused TCG variables
    
    Signed-off-by: Taylor Simpson <tsimpson@quicinc.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <1622589584-22571-5-git-send-email-tsimpson@quicinc.com>",fb858fb76b
0,"commit 88725336717ab93a194bd1b100179b6a96983988
Author: Taylor Simpson <tsimpson@quicinc.com>
Date:   Tue Jun 1 18:19:43 2021 -0500

    Hexagon (target/hexagon) cleanup gen_store_conditional[48] functions
    
    Previously the store-conditional code was writing to hex_pred[prednum].
    Then, the fGEN_TCG override was reading from there to the destination
    variable so that the packet commit logic would handle it properly.
    
    The correct implementation is to write to the destination variable
    and don't have the extra read in the override.
    
    Remove the unused arguments from gen_store_conditional[48]
    
    Signed-off-by: Taylor Simpson <tsimpson@quicinc.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <1622589584-22571-4-git-send-email-tsimpson@quicinc.com>",8872533671
0,"commit a5a8d98c8537f022a14bdc70eff12e296431b80f
Author: Taylor Simpson <tsimpson@quicinc.com>
Date:   Tue Jun 1 18:19:42 2021 -0500

    Hexagon (target/hexagon) fix l2fetch instructions
    
    Y4_l2fetch == l2fetch(Rs32, Rt32)
    Y5_l2fetch == l2fetch(Rs32, Rtt32)
    
    The semantics for these instructions are present, but the encodings
    are missing.
    
    Note that these are treated as nops in qemu, so we add overrides.
    
    Test case added to tests/tcg/hexagon/misc.c
    
    Signed-off-by: Taylor Simpson <tsimpson@quicinc.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <1622589584-22571-3-git-send-email-tsimpson@quicinc.com>",a5a8d98c85
0,"commit 07c0f65385b94bbc8efc398ff82edd05953e39c2
Author: Taylor Simpson <tsimpson@quicinc.com>
Date:   Tue Jun 1 18:19:41 2021 -0500

    Hexagon (target/hexagon) fix bug in fLSBNEW*
    
    Change fLSBNEW/fLSBNEW0/fLSBNEW1 from copy to ""x & 1""
    Remove gen_logical_not function
    Clean up fLSBNEWNOT to use andi-1 followed by xori-1
    
    Test cases added to tests/tcg/hexagon/misc.c
    
    Signed-off-by: Taylor Simpson <tsimpson@quicinc.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <1622589584-22571-2-git-send-email-tsimpson@quicinc.com>",07c0f65385
0,"commit 13d5f87cc3b94bfccc501142df4a7b12fee3a6e7
Merge: 6512fa497c 9d14a04280
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue Jun 29 10:02:42 2021 +0100

    Merge remote-tracking branch 'remotes/rth-gitlab/tags/pull-axp-20210628' into staging
    
    Fixes for NetBSD/alpha:
      - Provide a proper PCI-ISA bridge
      - Set PCI device IDs correctly
      - Pass -nographic flag to PALcode
      - Update PALcode to set up the Console Terminal Block
      - Honor the Floating-point ENable bit during translate.
    
    # gpg: Signature made Mon 28 Jun 2021 15:34:08 BST
    # gpg:                using RSA key 7A481E78868B4DB6A85A05C064DF38E8AF7E215F
    # gpg:                issuer ""richard.henderson@linaro.org""
    # gpg: Good signature from ""Richard Henderson <richard.henderson@linaro.org>"" [full]
    # Primary key fingerprint: 7A48 1E78 868B 4DB6 A85A  05C0 64DF 38E8 AF7E 215F
    
    * remotes/rth-gitlab/tags/pull-axp-20210628:
      target/alpha: Honor the FEN bit
      pc-bios: Update the palcode-clipper image
      hw/alpha: Provide a PCI-ISA bridge device node
      hw/alpha: Provide console information to the PALcode at start-up
      hw/alpha: Set minimum PCI device ID to 1 to match Clipper IRQ mappings
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",13d5f87cc3
0,"commit 6512fa497c2fa9751b9d774ab32d87a9764d1958
Merge: 9e654e1019 0aebebb561
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 28 21:04:22 2021 +0100

    Merge remote-tracking branch 'remotes/bonzini-gitlab/tags/for-upstream' into staging
    
    * Some Meson test conversions
    * KVM dirty page ring buffer fix
    * KVM TSC scaling support
    * Fixes for SG_IO with /dev/sdX devices
    * (Non)support for host devices on iOS
    * -smp cleanups
    
    # gpg: Signature made Fri 25 Jun 2021 15:16:18 BST
    # gpg:                using RSA key F13338574B662389866C7682BFFBD25F78C7AE83
    # gpg:                issuer ""pbonzini@redhat.com""
    # gpg: Good signature from ""Paolo Bonzini <bonzini@gnu.org>"" [full]
    # gpg:                 aka ""Paolo Bonzini <pbonzini@redhat.com>"" [full]
    # Primary key fingerprint: 46F5 9FBD 57D6 12E7 BFD4  E2F7 7E15 100C CD36 69B1
    #      Subkey fingerprint: F133 3857 4B66 2389 866C  7682 BFFB D25F 78C7 AE83
    
    * remotes/bonzini-gitlab/tags/for-upstream: (28 commits)
      machine: reject -smp dies!=1 for non-PC machines
      machine: pass QAPI struct to mc->smp_parse
      machine: add error propagation to mc->smp_parse
      machine: move common smp_parse code to caller
      machine: move dies from X86MachineState to CpuTopology
      file-posix: handle EINTR during ioctl
      block: detect DKIOCGETBLOCKCOUNT/SIZE before use
      block: try BSD disk size ioctls one after another
      block: check for sys/disk.h
      block: feature detection for host block support
      file-posix: try BLKSECTGET on block devices too, do not round to power of 2
      block: add max_hw_transfer to BlockLimits
      block-backend: align max_transfer to request alignment
      osdep: provide ROUND_DOWN macro
      scsi-generic: pass max_segments via max_iov field in BlockLimits
      file-posix: fix max_iov for /dev/sg devices
      KVM: Fix dirty ring mmap incorrect size due to renaming accident
      configure, meson: convert libusbredir detection to meson
      configure, meson: convert libcacard detection to meson
      configure, meson: convert libusb detection to meson
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",6512fa497c
0,"commit 9e654e10197f5a014eccd71de5ea633c1b0f4303
Merge: 271fc190b3 149009bef4
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 28 17:08:34 2021 +0100

    Merge remote-tracking branch 'remotes/vsementsov/tags/pull-jobs-2021-06-25' into staging
    
    block: Make block-copy API thread-safe
    
    # gpg: Signature made Fri 25 Jun 2021 13:40:24 BST
    # gpg:                using RSA key 8B9C26CDB2FD147C880E86A1561F24C1F19F79FB
    # gpg: Good signature from ""Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>"" [unknown]
    # gpg: WARNING: This key is not certified with a trusted signature!
    # gpg:          There is no indication that the signature belongs to the owner.
    # Primary key fingerprint: 8B9C 26CD B2FD 147C 880E  86A1 561F 24C1 F19F 79FB
    
    * remotes/vsementsov/tags/pull-jobs-2021-06-25:
      block-copy: atomic .cancelled and .finished fields in BlockCopyCallState
      block-copy: add CoMutex lock
      block-copy: move progress_set_remaining in block_copy_task_end
      block-copy: streamline choice of copy_range vs. read/write
      block-copy: small refactor in block_copy_task_entry and block_copy_common
      co-shared-resource: protect with a mutex
      progressmeter: protect with a mutex
      blockjob: let ratelimit handle a speed of 0
      block-copy: let ratelimit handle a speed of 0
      ratelimit: treat zero speed as unlimited
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",9e654e1019
0,"commit 9d14a0428012b0bb7969aec512f2357247a86236
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 21 10:02:34 2021 -0700

    target/alpha: Honor the FEN bit
    
    This bit is used by NetBSD for lazy fpu migration.
    
    Tested-by: Jason Thorpe <thorpej@me.com>
    Reported-by: Jason Thorpe <thorpej@me.com>
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/438
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",9d14a04280
0,"commit c6446a1b6d8a89f4ab8fe85b5bc03bb05d337b82
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 21:24:27 2021 -0700

    pc-bios: Update the palcode-clipper image
    
    Build a new palcode image with Jason Thorpe's patches
    to support NetBSD.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c6446a1b6d
0,"commit 5ec4f1d348e164355ff0e50486d537973e517e19
Author: Jason Thorpe <thorpej@me.com>
Date:   Wed Jun 16 07:15:38 2021 -0700

    hw/alpha: Provide a PCI-ISA bridge device node
    
    - Move initialization of the ISA bus from typhoon_init() to clipper_init();
      this apsect of device topology is really associated with the individual
      model, not the core logic chipset.  typhoon_init() now returns the IRQ
      to use for the output of the ISA PIC.
    
    - In clipper_init(), instantiate an i82378 instance, and connect its
      PIC output to the ISA IRQ input provided by typhoon_init().  Remove
      the explicit instantiations of i8254 and i82374, as these devices
      are subsumed by the i82378.
    
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Jason Thorpe <thorpej@me.com>
    Message-Id: <20210616141538.25436-1-thorpej@me.com>
    [rth: Remove direct dependencies on i82374, i8254, i8259.]
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",5ec4f1d348
0,"commit 387a1dcb351be6a6ec4e27d36173df2de1017bcc
Author: Jason Thorpe <thorpej@me.com>
Date:   Sun Jun 13 14:15:49 2021 -0700

    hw/alpha: Provide console information to the PALcode at start-up
    
    Redefine the a2 register passed by Qemu at start-up to also include
    some configuration flags, in addition to the CPU count, and define
    a flag to mirror the ""-nographic"" option.
    
    Signed-off-by: Jason Thorpe <thorpej@me.com>
    Message-Id: <20210613211549.18094-5-thorpej@me.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",387a1dcb35
0,"commit 3a8233dc1fe2fb5d0b51c9ae895e27b96a6d830e
Author: Jason Thorpe <thorpej@me.com>
Date:   Sun Jun 13 14:15:47 2021 -0700

    hw/alpha: Set minimum PCI device ID to 1 to match Clipper IRQ mappings
    
    Since we are emulating a Clipper device topology, we need to set the
    minimum PCI device ID to 1, as there is no IRQ mapping for a device
    at ID 0 (see sys_dp264.c:clipper_map_irq()).
    
    - Add a 'devfn_min' argument to typhoon_init().  Pass that argument
      along to pci_register_root_bus().
    - In clipper_init(), pass PCI_DEVFN(1, 0) as the minimum PCI device
      ID/function.
    
    Signed-off-by: Jason Thorpe <thorpej@me.com>
    Message-Id: <20210613211549.18094-3-thorpej@me.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",3a8233dc1f
0,"commit 271fc190b309a47dc76cbe995e12d1bc6350f7ad
Merge: 687f9f7834 9362984f56
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 28 14:22:04 2021 +0100

    Merge remote-tracking branch 'remotes/jsnow-gitlab/tags/floppy-pull-request' into staging
    
    FDC Pull request
    
    # gpg: Signature made Fri 25 Jun 2021 13:54:17 BST
    # gpg:                using RSA key F9B7ABDBBCACDF95BE76CBD07DEF8106AAFC390E
    # gpg: Good signature from ""John Snow (John Huston) <jsnow@redhat.com>"" [full]
    # Primary key fingerprint: FAEB 9711 A12C F475 812F  18F2 88A9 064D 1835 61EB
    #      Subkey fingerprint: F9B7 ABDB BCAC DF95 BE76  CBD0 7DEF 8106 AAFC 390E
    
    * remotes/jsnow-gitlab/tags/floppy-pull-request:
      hw/block/fdc: Add description to floppy controllers
      hw/block/fdc: Extract SysBus floppy controllers to fdc-sysbus.c
      hw/block/fdc: Extract ISA floppy controllers to fdc-isa.c
      hw/block/fdc: Declare shared prototypes in fdc-internal.h
      hw/block/fdc: Replace disabled fprintf() by trace event
      hw/isa/Kconfig: Fix missing dependency ISA_SUPERIO -> FDC
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",271fc190b3
0,"commit 687f9f7834e30330fd952f1fe096518509ff8ff7
Merge: 5d2d18ae39 f5c6ee0c6b
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 28 09:44:41 2021 +0100

    Merge remote-tracking branch 'remotes/philmd/tags/mips-20210625' into staging
    
    MIPS patches queue
    
    Various fixes:
    - Potential integer overflow (CID 1452921)
    - Invalid emulation of nanoMIPS BPOSGE32 opcode
    - Missing exception when DINSV opcode used with DSP disabled
    - Do not abort but emit exception for invalid BRANCH opcodes
    - TCG temporary leaks
    
    Housekeeping:
    - Remove dead code / comments
    - Restrict few files to TCG, declarations to sysemu
    - Merge MSA32 and MSA64 decodetree definitions
    
    # gpg: Signature made Fri 25 Jun 2021 10:22:20 BST
    # gpg:                using RSA key FAABE75E12917221DCFD6BB2E3E32C2CDEADC0DE
    # gpg: Good signature from ""Philippe Mathieu-Daudé (F4BUG) <f4bug@amsat.org>"" [full]
    # Primary key fingerprint: FAAB E75E 1291 7221 DCFD  6BB2 E3E3 2C2C DEAD C0DE
    
    * remotes/philmd/tags/mips-20210625:
      target/mips: Merge msa32/msa64 decodetree definitions
      target/mips: Remove pointless gen_msa()
      target/mips: Optimize regnames[] arrays
      target/mips: Constify host_to_mips_errno[]
      target/mips: fix emulation of nanoMIPS BPOSGE32 instruction
      target/mips: Remove microMIPS BPOSGE32 / BPOSGE64 unuseful cases
      target/mips: Remove SmartMIPS / MDMX unuseful comments
      target/mips: Restrict some system specific declarations to sysemu
      target/mips: Move translate.h to tcg/ sub directory
      target/mips: Move TCG trace events to tcg/ sub directory
      target/mips: Do not abort on invalid instruction
      target/mips: Raise exception when DINSV opcode used with DSP disabled
      target/mips: Fix more TCG temporary leaks in gen_pool32a5_nanomips_insn
      target/mips: Fix TCG temporary leaks in gen_pool32a5_nanomips_insn()
      target/mips: Fix potential integer overflow (CID 1452921)
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",687f9f7834
0,"commit 5d2d18ae395f40c6df016229ed9d659cd12375db
Merge: e3955ae93f 60e543f5ce
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 25 18:55:58 2021 +0100

    Merge remote-tracking branch 'remotes/kraxel/tags/audio-20210624-pull-request' into staging
    
    audio: bugfixes
    
    # gpg: Signature made Thu 24 Jun 2021 13:16:16 BST
    # gpg:                using RSA key A0328CFFB93A17A79901FE7D4CB6D8EED3E87138
    # gpg: Good signature from ""Gerd Hoffmann (work) <kraxel@redhat.com>"" [full]
    # gpg:                 aka ""Gerd Hoffmann <gerd@kraxel.org>"" [full]
    # gpg:                 aka ""Gerd Hoffmann (private) <kraxel@gmail.com>"" [full]
    # Primary key fingerprint: A032 8CFF B93A 17A7 9901  FE7D 4CB6 D8EE D3E8 7138
    
    * remotes/kraxel/tags/audio-20210624-pull-request:
      hw/audio/sb16: Restrict I/O sampling rate range for command 41h/42h
      coreaudio: Lock only the buffer
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",5d2d18ae39
0,"commit e3955ae93f5151ad2e982440b7c8d3776a9afee2
Merge: 3593b8e0a2 3ef6434409
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 25 17:05:22 2021 +0100

    Merge remote-tracking branch 'remotes/alistair/tags/pull-riscv-to-apply-20210624-2' into staging
    
    Third RISC-V PR for 6.1 release
    
     - Fix MISA in the DisasContext
     - Fix GDB CSR XML generation
     - QOMify the SiFive UART
     - Add support for the OpenTitan timer
    
    # gpg: Signature made Thu 24 Jun 2021 13:00:26 BST
    # gpg:                using RSA key F6C4AC46D4934868D3B8CE8F21E10D29DF977054
    # gpg: Good signature from ""Alistair Francis <alistair@alistair23.me>"" [full]
    # Primary key fingerprint: F6C4 AC46 D493 4868 D3B8  CE8F 21E1 0D29 DF97 7054
    
    * remotes/alistair/tags/pull-riscv-to-apply-20210624-2:
      hw/riscv: OpenTitan: Connect the mtime and mtimecmp timer
      hw/timer: Initial commit of Ibex Timer
      hw/char/ibex_uart: Make the register layout private
      hw/char: QOMify sifive_uart
      hw/char: Consistent function names for sifive_uart
      target/riscv: gdbstub: Fix dynamic CSR XML generation
      target/riscv: Use target_ulong for the DisasContext misa
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",e3955ae93f
0,"commit 3593b8e0a2146a885f93d71c754757bb2c03864e
Merge: 050cee1231 32a9a245d7
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 25 15:29:07 2021 +0100

    Merge remote-tracking branch 'remotes/maxreitz/tags/pull-block-2021-06-24' into staging
    
    Block patch:
    - Fix Coverity complaint in block/snapshot.c
    
    # gpg: Signature made Thu 24 Jun 2021 12:42:28 BST
    # gpg:                using RSA key 91BEB60A30DB3E8857D11829F407DB0061D5CF40
    # gpg:                issuer ""mreitz@redhat.com""
    # gpg: Good signature from ""Max Reitz <mreitz@redhat.com>"" [full]
    # Primary key fingerprint: 91BE B60A 30DB 3E88 57D1  1829 F407 DB00 61D5 CF40
    
    * remotes/maxreitz/tags/pull-block-2021-06-24:
      block/snapshot: Clarify goto fallback behavior
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",3593b8e0a2
0,"commit 0aebebb561c9c23b9c6d3d58040f83547f059b5c
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 17 17:53:07 2021 +0200

    machine: reject -smp dies!=1 for non-PC machines
    
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210617155308.928754-11-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",0aebebb561
0,"commit 1e63fe685804dfadddd643bf3860b1a59702d4bf
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 17 17:53:06 2021 +0200

    machine: pass QAPI struct to mc->smp_parse
    
    As part of converting -smp to a property with a QAPI type, define
    the struct and use it to do the actual parsing.  machine_smp_parse
    takes care of doing the QemuOpts->QAPI conversion by hand, for now.
    
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210617155308.928754-10-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",1e63fe6858
0,"commit abc2f51144242e819fd7af69d3e7c199cc9d7004
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 17 17:53:05 2021 +0200

    machine: add error propagation to mc->smp_parse
    
    Clean up the smp_parse functions to use Error** instead of exiting.
    
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210617155308.928754-9-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",abc2f51144
0,"commit 593d3c51481bc40433474bd2b922217e819f1f68
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 17 17:53:04 2021 +0200

    machine: move common smp_parse code to caller
    
    Most of smp_parse and pc_smp_parse is guarded by an ""if (opts)""
    conditional, and the rest is common to both function.  Move the
    conditional and the common code to the caller, machine_smp_parse.
    
    Move the replay_add_blocker call after all errors are checked for.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210617155308.928754-8-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",593d3c5148
0,"commit 67872eb8ed194117f5af71694374a083c3f45eb2
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 17 17:53:03 2021 +0200

    machine: move dies from X86MachineState to CpuTopology
    
    In order to make SMP configuration a Machine property, we need a getter as
    well as a setter.  To simplify the implementation put everything that the
    getter needs in the CpuTopology struct.
    
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210617155308.928754-7-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",67872eb8ed
0,"commit 9362984f569a5b979714dfba556e370847d5fb87
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Mon Jun 14 21:32:20 2021 +0200

    hw/block/fdc: Add description to floppy controllers
    
    Change the '-device help' output from:
    
      Storage devices:
      name ""floppy"", bus floppy-bus, desc ""virtual floppy drive""
      name ""isa-fdc"", bus ISA
    
    to:
    
      Storage devices:
      name ""floppy"", bus floppy-bus, desc ""virtual floppy drive""
      name ""isa-fdc"", bus ISA, desc ""virtual floppy controller""
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210614193220.2007159-7-philmd@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",9362984f56
0,"commit 1430759ec3e4cb92da224d739c914a0e8d78d786
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Mon Jun 14 21:32:19 2021 +0200

    hw/block/fdc: Extract SysBus floppy controllers to fdc-sysbus.c
    
    Some machines use floppy controllers via the SysBus interface,
    and don't need to pull in all the SysBus code.
    Extract the SysBus specific code to a new unit: fdc-sysbus.c,
    and add a new Kconfig symbol: ""FDC_SYSBUS"".
    
    Reviewed-by: John Snow <jsnow@redhat.com>
    Acked-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Reviewed-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210614193220.2007159-6-philmd@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",1430759ec3
0,"commit 72ea60e4114272f3030455c214e86bcf1c8a1a9e
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Mon Jun 14 21:32:18 2021 +0200

    hw/block/fdc: Extract ISA floppy controllers to fdc-isa.c
    
    Some machines use floppy controllers via the SysBus interface,
    and don't need to pull in all the ISA code.
    Extract the ISA specific code to a new unit: fdc-isa.c, and
    add a new Kconfig symbol: ""FDC_ISA"".
    This allows us to remove the FIXME from commit dd0ff8191ab
    (""isa: express SuperIO dependencies with Kconfig"").
    
    Reviewed-by: John Snow <jsnow@redhat.com>
    Acked-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Reviewed-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210614193220.2007159-5-philmd@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",72ea60e411
0,"commit 5a5d2f3d260a5c3a2f00675c90744c0903fed116
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Mon Jun 14 21:32:17 2021 +0200

    hw/block/fdc: Declare shared prototypes in fdc-internal.h
    
    We want to extract ISA/SysBus code from the generic fdc.c file.
    First, declare the prototypes we will access from the new units
    into a new local header: ""fdc-internal.h"".
    
    Acked-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Reviewed-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210614193220.2007159-4-philmd@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",5a5d2f3d26
0,"commit fbb11567fba6f452670b87a981d5f25ebece89ec
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Mon Jun 14 21:32:16 2021 +0200

    hw/block/fdc: Replace disabled fprintf() by trace event
    
    Reviewed-by: John Snow <jsnow@redhat.com>
    Acked-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Reviewed-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210614193220.2007159-3-philmd@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",fbb11567fb
0,"commit 5886844e0d6a242ded952c33a01fc41cfa79d7b8
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Mon Jun 14 21:32:15 2021 +0200

    hw/isa/Kconfig: Fix missing dependency ISA_SUPERIO -> FDC
    
    isa_superio_realize() calls isa_fdc_init_drives(), which is defined
    in hw/block/fdc.c, so ISA_SUPERIO needs to select the FDC symbol.
    
    Reported-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210614193220.2007159-2-philmd@redhat.com
    Fixes: c0ff3795143 (""Introduce a CONFIG_ISA_SUPERIO switch for isa-superio.c"")
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",5886844e0d
0,"commit 149009bef4b4b4db37b3cf72b41dc2c6e8ca1885
Author: Emanuele Giuseppe Esposito <eesposit@redhat.com>
Date:   Thu Jun 24 09:20:43 2021 +0200

    block-copy: atomic .cancelled and .finished fields in BlockCopyCallState
    
    By adding acquire/release pairs, we ensure that .ret and .error_is_read
    fields are written by block_copy_dirty_clusters before .finished is true,
    and that they are read by API user after .finished is true.
    
    The atomic here are necessary because the fields are concurrently modified
    in coroutines, and read outside.
    
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Message-Id: <20210624072043.180494-6-eesposit@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",149009bef4
0,"commit d0c389d2ce6031d80e872e8e1b6ebb0f96afbe69
Author: Emanuele Giuseppe Esposito <eesposit@redhat.com>
Date:   Thu Jun 24 09:20:42 2021 +0200

    block-copy: add CoMutex lock
    
    Group various structures fields, to better understand what we need to
    protect with a lock and what doesn't need it.
    Then, add a CoMutex to protect concurrent access of block-copy
    data structures. This mutex also protects .copy_bitmap, because its thread-safe
    API does not prevent it from assigning two tasks to the same
    bitmap region.
    
    Exceptions to the lock:
    - .sleep_state is handled in the series ""coroutine: new sleep/wake API""
    and thus here left as TODO.
    
    - .finished, .cancelled and reads to .ret and .error_is_read will be
    protected in the following patch, because are used also outside
    coroutines.
    
    - .skip_unallocated is atomic. Including it under the mutex would
    increase the critical sections and make them also much more complex.
    We can have it as atomic since it is only written from outside and
    read by block-copy coroutines.
    
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Message-Id: <20210624072043.180494-5-eesposit@redhat.com>
      [vsementsov: fix typo in comment]
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",d0c389d2ce
0,"commit e3dd339feec2da3bcd82021e4ce4fe09dbf9c8b4
Author: Emanuele Giuseppe Esposito <eesposit@redhat.com>
Date:   Thu Jun 24 09:20:41 2021 +0200

    block-copy: move progress_set_remaining in block_copy_task_end
    
    Moving this function in task_end ensures to update the progress
    anyways, even if there is an error.
    
    It also helps in next patch, allowing task_end to have only
    one critical section.
    
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Message-Id: <20210624072043.180494-4-eesposit@redhat.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",e3dd339fee
0,"commit 05d5e12b243df43a8a58568edf6a342806879d98
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 24 09:20:40 2021 +0200

    block-copy: streamline choice of copy_range vs. read/write
    
    Put the logic to determine the copy size in a separate function, so
    that there is a simple state machine for the possible methods of
    copying data from one BlockDriverState to the other.
    
    Use .method instead of .copy_range as in-out argument, and
    include also .zeroes as an additional copy method.
    
    While at it, store the common computation of block_copy_max_transfer
    into a new field of BlockCopyState, and make sure that we always
    obey max_transfer; that's more efficient even for the
    COPY_RANGE_READ_WRITE case.
    
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210624072043.180494-3-eesposit@redhat.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",05d5e12b24
0,"commit c6a3e3df3011288c2395cd5755547c91e943b10a
Author: Emanuele Giuseppe Esposito <eesposit@redhat.com>
Date:   Thu Jun 24 09:20:39 2021 +0200

    block-copy: small refactor in block_copy_task_entry and block_copy_common
    
    Use a local variable instead of referencing BlockCopyState through a
    BlockCopyCallState or BlockCopyTask every time.
    This is in preparation for next patches.
    
    No functional change intended.
    
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Message-Id: <20210624072043.180494-2-eesposit@redhat.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",c6a3e3df30
0,"commit 55fa54a789f6e66fe9e7997429667e3e8917ffb9
Author: Emanuele Giuseppe Esposito <eesposit@redhat.com>
Date:   Mon Jun 14 10:11:30 2021 +0200

    co-shared-resource: protect with a mutex
    
    co-shared-resource is currently not thread-safe, as also reported
    in co-shared-resource.h. Add a QemuMutex because co_try_get_from_shres
    can also be invoked from non-coroutine context.
    
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Message-Id: <20210614081130.22134-6-eesposit@redhat.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",55fa54a789
0,"commit a7b4f8fc09ec62d09a11cce72a886c453636c547
Author: Emanuele Giuseppe Esposito <eesposit@redhat.com>
Date:   Mon Jun 14 10:11:29 2021 +0200

    progressmeter: protect with a mutex
    
    Progressmeter is protected by the AioContext mutex, which
    is taken by the block jobs and their caller (like blockdev).
    
    We would like to remove the dependency of block layer code on the
    AioContext mutex, since most drivers and the core I/O code are already
    not relying on it.
    
    Create a new C file to implement the ProgressMeter API, but keep the
    struct as public, to avoid forcing allocation on the heap.
    
    Also add a mutex to be able to provide an accurate snapshot of the
    progress values to the caller.
    
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-Id: <20210614081130.22134-5-eesposit@redhat.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",a7b4f8fc09
0,"commit c02b83ed1ff62211f4c44855e0ca1656d5811688
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Jun 14 10:11:28 2021 +0200

    blockjob: let ratelimit handle a speed of 0
    
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Message-Id: <20210614081130.22134-4-eesposit@redhat.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",c02b83ed1f
0,"commit ca657c99e6b41fa765443fc93df5c4adf468e369
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Jun 14 10:11:27 2021 +0200

    block-copy: let ratelimit handle a speed of 0
    
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Message-Id: <20210614081130.22134-3-eesposit@redhat.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",ca657c99e6
0,"commit 720507ed95023e45620f305767d12cd716e8b8ca
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Jun 14 10:11:26 2021 +0200

    ratelimit: treat zero speed as unlimited
    
    Both users of RateLimit, block-copy.c and blockjob.c, treat
    a speed of zero as unlimited, while RateLimit treats it as
    ""as slow as possible"".  The latter is nicer from the code
    point of view but pretty useless, so disable rate limiting
    if a speed of zero is provided.
    
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
    Message-Id: <20210614081130.22134-2-eesposit@redhat.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",720507ed95
0,"commit 050cee12315536aba18a73c8dea21116a9c90ffa
Merge: e0da9171e0 7c4ab60f18
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 25 12:00:16 2021 +0100

    Merge remote-tracking branch 'remotes/stsquad/tags/pull-testing-updates-250621-1' into staging
    
    A few miscellaneous fixes
    
      - tweak tcg/kvm based GIC tests
      - add header to MTTCG docs
      - cleanup checkpatch handling
      - GitLab feature and bug request templates
      - symbol resolution helper for plugin API
      - skip hppa/s390x signals test until fixes arrive
    
    # gpg: Signature made Fri 25 Jun 2021 10:10:57 BST
    # gpg:                using RSA key 6685AE99E75167BCAFC8DF35FBD0DB095A9E2A44
    # gpg: Good signature from ""Alex Bennée (Master Work Key) <alex.bennee@linaro.org>"" [full]
    # Primary key fingerprint: 6685 AE99 E751 67BC AFC8  DF35 FBD0 DB09 5A9E 2A44
    
    * remotes/stsquad/tags/pull-testing-updates-250621-1:
      plugins/api: expose symbol lookup to plugins
      tests/tcg: skip the signals test for hppa/s390x for now
      GitLab: Add ""Feature Request"" issue template.
      GitLab: Add ""Bug"" issue reporting template
      scripts/checkpatch: roll diff tweaking into checkpatch itself
      docs/devel: Add a single top-level header to MTTCG's doc
      tests/acceptance: tweak the tcg/kvm tests for virt
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",050cee1231
0,"commit 7c4ab60f18f5257d37164df0ae0951ece4425b02
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Wed Jun 23 11:27:48 2021 +0100

    plugins/api: expose symbol lookup to plugins
    
    This is a quality of life helper for plugins so they don't need to
    re-implement symbol lookup when dumping an address. The strings are
    constant so don't need to be duplicated. One minor tweak is to return
    NULL instead of a zero length string to show lookup failed.
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Mahmoud Mandour <ma.mandourr@gmail.com>
    Message-Id: <20210608040532.56449-2-ma.mandourr@gmail.com>
    Message-Id: <20210623102749.25686-8-alex.bennee@linaro.org>",7c4ab60f18
0,"commit f101c9fe29cfb009a7e20b68142a575b3384a4d0
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Wed Jun 23 11:27:47 2021 +0100

    tests/tcg: skip the signals test for hppa/s390x for now
    
    There are fixes currently in flight but as this is getting in the way
    of a green CI we might as well skip for now. For reference the fix
    series are:
    
      linux-user: Move signal trampolines to new page
      20210616011209.1446045-1-richard.henderson@linaro.org
    
    and
    
      linux-user: Load a vdso for x86_64 and hppa
      20210619034329.532318-1-richard.henderson@linaro.org
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Acked-by: Cornelia Huck <cohuck@redhat.com>
    Cc: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210623102749.25686-7-alex.bennee@linaro.org>",f101c9fe29
0,"commit 6a9c2e07ccc3074086fb14f238b2292a20050bce
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 23 11:27:46 2021 +0100

    GitLab: Add ""Feature Request"" issue template.
    
    Based on Peter Krempa's libvirt template, feature.md.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    CC: Peter Krempa <pkrempa@redhat.com>
    Message-Id: <20210607153155.1760158-3-jsnow@redhat.com>
    Message-Id: <20210623102749.25686-6-alex.bennee@linaro.org>",6a9c2e07cc
0,"commit f64766976d39fbf2b81a25b5c5f043180383d408
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 23 11:27:45 2021 +0100

    GitLab: Add ""Bug"" issue reporting template
    
    Based loosely on libvirt's template, written by Peter Krempa.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    CC: Peter Krempa <pkrempa@redhat.com>
    Message-Id: <20210607153155.1760158-2-jsnow@redhat.com>
    Message-Id: <20210623102749.25686-5-alex.bennee@linaro.org>",f64766976d
0,"commit 66cf70149ad23ba8ea71b88d3564517c44e35630
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Wed Jun 23 11:27:44 2021 +0100

    scripts/checkpatch: roll diff tweaking into checkpatch itself
    
    Rather than relying on external tweaks lets just do it inside
    checkpatch's direct commitish handling which is QEMU specific code
    anyway.
    
    Suggested-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Message-Id: <20210623102749.25686-4-alex.bennee@linaro.org>",66cf70149a
0,"commit ae63ed16916304665b45759751a5062638211c14
Author: Luis Pires <luis.pires@eldorado.org.br>
Date:   Wed Jun 23 11:27:43 2021 +0100

    docs/devel: Add a single top-level header to MTTCG's doc
    
    Without a single top-level header in the .rst file, the index ended
    up linking to all of the top-level headers separately. Now the index
    links to the top-level header at the beginning of the document and
    any inner headers are correctly linked as sub-items in the index.
    
    Signed-off-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210528123526.144065-1-luis.pires@eldorado.org.br>
    Message-Id: <20210623102749.25686-3-alex.bennee@linaro.org>",ae63ed1691
0,"commit e8d61f7d21666a5172b8c040b897d60fb57c2ded
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Wed Jun 23 11:27:42 2021 +0100

    tests/acceptance: tweak the tcg/kvm tests for virt
    
    Really it's only TCG that can select which GIC model you want, KVM
    guests should always be using the ""host"" version of the GIC for which
    QEMU already provides a handy shortcut. Make the KVM test use this and
    split the TCG test into it's two versions.
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210623102749.25686-2-alex.bennee@linaro.org>",e8d61f7d21
0,"commit bd80936a4f18075e0e407df180801a9743ce290c
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Jun 15 08:34:52 2021 +0200

    file-posix: handle EINTR during ioctl
    
    Similar to other handle_aiocb_* functions, handle_aiocb_ioctl needs to cater
    for the possibility that ioctl is interrupted by a signal.  Otherwise, the
    I/O is incorrectly reported as a failure to the guest.
    
    Reported-by: Gordon Watson <gwatson@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",bd80936a4f
0,"commit 09e20abddaf94ff27dcced1df81f69a713627a94
Author: Joelle van Dyne <j@getutm.app>
Date:   Mon Mar 15 11:03:40 2021 -0700

    block: detect DKIOCGETBLOCKCOUNT/SIZE before use
    
    iOS hosts do not have these defined so we fallback to the
    default behaviour.
    
    Co-authored-by: Warner Losh <imp@bsdimp.com>
    Signed-off-by: Joelle van Dyne <j@getutm.app>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",09e20abdda
0,"commit 267cd53f5fbbbf9bdf18c526144ab0bd22ab40f8
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 16 15:32:04 2021 +0200

    block: try BSD disk size ioctls one after another
    
    Try all the possible ioctls for disk size as long as they are
    supported, to keep the #if ladder simple.
    
    Extracted and cleaned up from a patch by Joelle van Dyne and
    Warner Losh.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",267cd53f5f
0,"commit feccdceed25302e1e3db744d468304705ee7c4dd
Author: Joelle van Dyne <j@getutm.app>
Date:   Mon Mar 15 11:03:39 2021 -0700

    block: check for sys/disk.h
    
    Some BSD platforms do not have this header.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Signed-off-by: Joelle van Dyne <j@getutm.app>
    Message-Id: <20210315180341.31638-3-j@getutm.app>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",feccdceed2
0,"commit 14176c8d05fe910e9f1ee537e7af016565ccffc3
Author: Joelle van Dyne <j@getutm.app>
Date:   Mon Mar 15 11:03:38 2021 -0700

    block: feature detection for host block support
    
    On Darwin (iOS), there are no system level APIs for directly accessing
    host block devices. We detect this at configure time.
    
    Signed-off-by: Joelle van Dyne <j@getutm.app>
    Message-Id: <20210315180341.31638-2-j@getutm.app>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",14176c8d05
0,"commit 18473467d55a20d643b6c9b3a52de42f705b4d35
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Apr 14 19:52:26 2021 +0200

    file-posix: try BLKSECTGET on block devices too, do not round to power of 2
    
    bs->sg is only true for character devices, but block devices can also
    be used with scsi-block and scsi-generic.  Unfortunately BLKSECTGET
    returns bytes in an int for /dev/sgN devices, and sectors in a short
    for block devices, so account for that in the code.
    
    The maximum transfer also need not be a power of 2 (for example I have
    seen disks with 1280 KiB maximum transfer) so there's no need to pass
    the result through pow2floor.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",18473467d5
0,"commit 24b36e9813ec15da7db62e3b3621730710c5f020
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 10:34:23 2021 +0200

    block: add max_hw_transfer to BlockLimits
    
    For block host devices, I/O can happen through either the kernel file
    descriptor I/O system calls (preadv/pwritev, io_submit, io_uring)
    or the SCSI passthrough ioctl SG_IO.
    
    In the latter case, the size of each transfer can be limited by the
    HBA, while for file descriptor I/O the kernel is able to split and
    merge I/O in smaller pieces as needed.  Applying the HBA limits to
    file descriptor I/O results in more system calls and suboptimal
    performance, so this patch splits the max_transfer limit in two:
    max_transfer remains valid and is used in general, while max_hw_transfer
    is limited to the maximum hardware size.  max_hw_transfer can then be
    included by the scsi-generic driver in the block limits page, to ensure
    that the stricter hardware limit is used.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",24b36e9813
0,"commit b99f7fa08a3df8b8a6a907642e5851cdcf43fa9f
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 16 15:13:49 2021 +0200

    block-backend: align max_transfer to request alignment
    
    Block device requests must be aligned to bs->bl.request_alignment.
    It makes sense for drivers to align bs->bl.max_transfer the same
    way; however when there is no specified limit, blk_get_max_transfer
    just returns INT_MAX.  Since the contract of the function does not
    specify that INT_MAX means ""no maximum"", just align the outcome
    of the function (whether INT_MAX or bs->bl.max_transfer) before
    returning it.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",b99f7fa08a
0,"commit c9797456f64ce72c03eb2969d97ac1dd4698d91e
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 16 15:18:20 2021 +0200

    osdep: provide ROUND_DOWN macro
    
    osdep.h provides a ROUND_UP macro to hide bitwise operations for the
    purpose of rounding a number up to a power of two; add a ROUND_DOWN
    macro that does the same with truncation towards zero.
    
    While at it, change the formatting of some comments.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",c9797456f6
0,"commit 01ef8185b809af9d287e1a03a3f9d8ea8231118a
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Apr 14 19:51:48 2021 +0200

    scsi-generic: pass max_segments via max_iov field in BlockLimits
    
    I/O to a disk via read/write is not limited by the number of segments allowed
    by the host adapter; the kernel can split requests if needed, and the limit
    imposed by the host adapter can be very low (256k or so) to avoid that SG_IO
    returns EINVAL if memory is heavily fragmented.
    
    Since this value is only interesting for SG_IO-based I/O, do not include
    it in the max_transfer and only take it into account when patching the
    block limits VPD page in the scsi-generic device.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>",01ef8185b8
0,"commit 8ad5ab6148dca8aad297c134c09c84b0b92d45ed
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Apr 15 12:41:31 2021 +0200

    file-posix: fix max_iov for /dev/sg devices
    
    Even though it was only called for devices that have bs->sg set (which
    must be character devices), sg_get_max_segments looked at /sys/dev/block
    which only works for block devices.
    
    On Linux the sg driver has its own way to provide the maximum number of
    iovecs in a scatter/gather list, so add support for it.  The block device
    path is kept because it will be reinstated in the next patches.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>",8ad5ab6148
0,"commit dcafa248277732863c8a472e4e5aa1cdd41228e8
Author: Peter Xu <peterx@redhat.com>
Date:   Tue Jun 8 21:43:55 2021 -0400

    KVM: Fix dirty ring mmap incorrect size due to renaming accident
    
    Found this when I wanted to try the per-vcpu dirty rate series out, then I
    found that it's not really working and it can quickly hang death a guest.  I
    found strange errors (e.g. guest crash after migration) happens even without
    the per-vcpu dirty rate series.
    
    When merging dirty ring, probably no one notice that the trivial renaming diff
    [1] missed two existing references of kvm_dirty_ring_sizes; they do matter
    since otherwise we'll mmap() a shorter range of memory after the renaming.
    
    I think it didn't SIGBUS for me easily simply because some other stuff within
    qemu mmap()ed right after the dirty rings (e.g. when testing 4096 slots, it
    aligned with one small page on x86), so when we access the rings we've been
    reading/writting to random memory elsewhere of qemu.
    
    Fix the two sizes when map/unmap the shared dirty gfn memory.
    
    [1] https://lore.kernel.org/qemu-devel/dac5f0c6-1bca-3daf-e5d2-6451dbbaca93@redhat.com/
    
    Cc: Hyman Huang <huangy81@chinatelecom.cn>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210609014355.217110-1-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",dcafa24827
0,"commit 18f31e60c7f02e2fdeebce344b2f95c65cbf2bef
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 11:15:26 2021 +0200

    configure, meson: convert libusbredir detection to meson
    
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",18f31e60c7
0,"commit 5f364c57bb6713a06f1f33054de6b7db50fe6003
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 11:15:26 2021 +0200

    configure, meson: convert libcacard detection to meson
    
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",5f364c57bb
0,"commit 90540f3289243a7fc48273eaa684c6b98f0e47a7
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 11:15:26 2021 +0200

    configure, meson: convert libusb detection to meson
    
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",90540f3289
0,"commit 05e391ae4056e122fd78b694607ccd2e5a943dab
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 11:15:26 2021 +0200

    configure, meson: convert pam detection to meson
    
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",05e391ae40
0,"commit ba7ed407e67589167ef582ac1f17a38f09fbd327
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 11:15:26 2021 +0200

    configure, meson: convert libtasn1 detection to meson
    
    Make it depend on gnutls too, since it is only used as part of gnutls
    tests.
    
    Reviewed-by: Richard Henderson <richard.henderson@liaro.org>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",ba7ed407e6
0,"commit 5761251138cb69c310e9df7dfc82c4c6fd2444e4
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 11:15:26 2021 +0200

    configure, meson: convert crypto detection to meson
    
    Reviewed-by: Richard Henderson <richard.henderson@liaro.org>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",5761251138
0,"commit 4c1f23cfb84c386a8f4f5433f0fd98e0c85d057b
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 16 17:36:55 2021 +0200

    tests: remove QCRYPTO_HAVE_TLS_TEST_SUPPORT
    
    meson.build already decides whether it is possible to build the TLS
    test suite.  There is no need to include that in the source as well.
    The dummy tests in fact are broken because they do not produce valid
    TAP output (empty output is rejected by scripts/tap-driver.pl).
    
    Cc: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",4c1f23cfb8
0,"commit 72150df2c5654870d5468bc4477783497b910816
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 12:28:49 2021 +0200

    meson: remove preadv from summary
    
    Meson is more verbose than the configure script; the outcome of the preadv test
    can be found in its output and it is not worth including it again in the summary.
    
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",72150df2c5
0,"commit 19b9cb3cafa72dfbb897da2dd473277d57ea1197
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 11:11:16 2021 +0200

    configure: drop unused variables for xts
    
    All XTS configuration uses qemu_private_xts.  Drop other variables as
    they have only ever been used to generate the summary (which has since
    been moved to meson.build).
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Richard Henderson <richard.henderson@liaro.org>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",19b9cb3caf
0,"commit ec44e986b1bd82525407157482b813cd91d181a0
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Jun 3 11:03:05 2021 +0200

    meson: drop unused CONFIG_GCRYPT_HMAC
    
    CONFIG_GCRYPT_HMAC has been removed now that all supported distros have it.
    
    Reviewed-by: Richard Henderson <richard.henderson@liaro.org>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",ec44e986b1
0,"commit 9ce8af4d92d4772cb33d4ea9cbd5ebdb970c5172
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Jun 21 18:31:52 2021 +0200

    target/i386: kvm: add support for TSC scaling
    
    Linux 5.14 will add support for nested TSC scaling.  Add the
    corresponding feature in QEMU; to keep support for existing kernels,
    do not add it to any processor yet.
    
    The handling of the VMCS enumeration MSR is ugly; once we have more than
    one case, we may want to add a table to check VMX features against.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",9ce8af4d92
0,"commit e0da9171e02f4534124b9a9e07333382b38376c6
Merge: ecba223da6 66c2207fd2
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 25 09:10:37 2021 +0100

    Merge remote-tracking branch 'remotes/kraxel/tags/ui-20210624-pull-request' into staging
    
    ui: better cocoa integration (ui info + clipboard).
    ui: add lang1+lang2 keys, fixes, doc updates.
    
    # gpg: Signature made Thu 24 Jun 2021 09:32:36 BST
    # gpg:                using RSA key A0328CFFB93A17A79901FE7D4CB6D8EED3E87138
    # gpg: Good signature from ""Gerd Hoffmann (work) <kraxel@redhat.com>"" [full]
    # gpg:                 aka ""Gerd Hoffmann <gerd@kraxel.org>"" [full]
    # gpg:                 aka ""Gerd Hoffmann (private) <kraxel@gmail.com>"" [full]
    # Primary key fingerprint: A032 8CFF B93A 17A7 9901  FE7D 4CB6 D8EE D3E8 7138
    
    * remotes/kraxel/tags/ui-20210624-pull-request:
      ui: Make the DisplayType enum entries conditional
      Add display suboptions to man pages
      input: Add lang1 and lang2 to QKeyCode
      ui/cocoa: Add clipboard support
      ui/cocoa: Set UI information
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",e0da9171e0
0,"commit f5c6ee0c6b7b4b79b52a1614a808633dbb694de4
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sat May 29 20:06:13 2021 +0200

    target/mips: Merge msa32/msa64 decodetree definitions
    
    We don't need to maintain 2 sets of decodetree definitions.
    Merge them into a single file.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174636.2902654-3-f4bug@amsat.org>",f5c6ee0c6b
0,"commit 525ea877b27d933eaac69b32c75b8861779811cf
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sat May 29 20:12:16 2021 +0200

    target/mips: Remove pointless gen_msa()
    
    Only trans_MSA() calls gen_msa(), inline it to simplify.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174636.2902654-2-f4bug@amsat.org>",525ea877b2
0,"commit 06106772933bd215a797d28cdbff4aac5676b430
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sat May 29 20:13:44 2021 +0200

    target/mips: Optimize regnames[] arrays
    
    Since all entries are no more than 3/4/6 bytes (including nul
    terminator), can save space and pie runtime relocations by
    declaring regnames[] as array of 3/4/6 const char.
    
    Inspired-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174323.2900831-10-f4bug@amsat.org>",0610677293
0,"commit dae7324b97ebe2c4012f299f0b6ec48ac8c1e74d
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Tue May 11 12:18:06 2021 +0200

    target/mips: Constify host_to_mips_errno[]
    
    Keep host_to_mips_errno[] in .rodata by marking the array const.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174323.2900831-9-f4bug@amsat.org>",dae7324b97
0,"commit e5e6f00c3154055dba99eb3b789c38dc70578111
Author: Aleksandar Rikalo <Aleksandar.Rikalo@syrmia.com>
Date:   Tue Jun 15 17:22:35 2021 +0000

    target/mips: fix emulation of nanoMIPS BPOSGE32 instruction
    
    Per the ""MIPS® Architecture Extension: nanoMIPS32 DSP Technical
    Reference Manual — Revision 0.04"" p. 88 ""BPOSGE32C"", offset argument (imm)
    should be left-shifted first.
    This change was tested against test_dsp_r1_bposge32.c DSP test.
    
    Reported-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Aleksandar Rikalo <aleksandar.rikalo@syrmia.com>
    Signed-off-by: Filip Vidojevic <filip.vidojevic@syrmia.com>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-Id: <VI1PR0302MB34869449EE56F226FC3C21129C309@VI1PR0302MB3486.eurprd03.prod.outlook.com>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>",e5e6f00c31
0,"commit 916e957070e1f4b697c905d0a35984e70f106ed6
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sat May 29 16:55:07 2021 +0200

    target/mips: Remove microMIPS BPOSGE32 / BPOSGE64 unuseful cases
    
    These switch cases for the microMIPS BPOSGE32 / BPOSGE64 opcodes have
    been added commit 3c824109da0 (""target-mips: microMIPS ASE support"").
    More than 11 years later it is safe to assume there won't be added
    soon. The cases fall back to the default which generates a RESERVED
    INSTRUCTION, so it is safe to remove them.
    Functionally speaking, the patch is a no-op.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174323.2900831-8-f4bug@amsat.org>",916e957070
0,"commit 9f47eb54b25e67b28a85a0b3eac304f2909f10ae
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sun May 30 00:32:16 2021 +0200

    target/mips: Remove SmartMIPS / MDMX unuseful comments
    
    These placeholder comments for SmartMIPS and MDMX extensions have
    been added commit 3c824109da0 (""target-mips: microMIPS ASE support"").
    More than 11 years later it is safe to assume there won't be added
    soon, so remove these unuseful comments.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174323.2900831-7-f4bug@amsat.org>",9f47eb54b2
0,"commit 85ccd962d622475e6281ea98ab69c03de7bc37c1
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 24 14:28:08 2021 +0200

    target/mips: Restrict some system specific declarations to sysemu
    
    Commit 043715d1e0f (""target/mips: Update ITU to utilize SAARI
    and SAAR CP0 registers"") declared itc_reconfigure() in public
    namespace, while it is restricted to system emulation.
    
    Similarly commit 5679479b9a1 (""target/mips: Move CP0 helpers
    to sysemu/cp0.c"") restricted cpu_mips_soft_irq() definition to
    system emulation, but forgot to restrict its declaration.
    
    To avoid polluting user-mode emulation with these declarations,
    restrict them to sysemu. Also restrict the sysemu ITU/ITC/IRQ
    fields from CPUMIPSState.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174323.2900831-6-f4bug@amsat.org>",85ccd962d6
0,"commit a9eb3b49fb2224ca2eda514b55c5d288379460ee
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 24 09:32:16 2021 +0200

    target/mips: Move translate.h to tcg/ sub directory
    
    We moved various TCG source files in commit a2b0a27d33e
    (""target/mips: Move TCG source files under tcg/ sub directory"")
    but forgot to move the header declaring their prototypes.
    Do it now, since all it declares is TCG specific.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174323.2900831-5-f4bug@amsat.org>",a9eb3b49fb
0,"commit 34b8ff25db3eff9c8c02371ac976b16389d0fcb7
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sun May 30 09:02:16 2021 +0200

    target/mips: Move TCG trace events to tcg/ sub directory
    
    Commit a2b0a27d33e (""target/mips: Move TCG source files under
    tcg/ sub directory"") forgot to move the trace-event file.
    As it only contains TCG events, move it for consistency.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174323.2900831-4-f4bug@amsat.org>",34b8ff25db
0,"commit 05d9d0359e6da7dc8255712d745d079a04fa5ae5
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sat May 22 20:16:15 2021 +0200

    target/mips: Do not abort on invalid instruction
    
    On real hardware an invalid instruction doesn't halt the world,
    but usually triggers a RESERVED INSTRUCTION exception.
    TCG guest code shouldn't abort QEMU anyway.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174323.2900831-2-f4bug@amsat.org>",05d9d0359e
0,"commit a071578b93e850dcbebbe2c0cfe86e7977ddffa7
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sat May 29 18:08:19 2021 +0200

    target/mips: Raise exception when DINSV opcode used with DSP disabled
    
    Per the ""MIPS® DSP Module for MIPS64 Architecture"" manual, rev. 3.02,
    Table 5.3 ""SPECIAL3 Encoding of Function Field for DSP Module"":
    
      If the Module/ASE is not implemented, executing such an instruction
      must cause a Reserved Instruction Exception.
    
    The DINSV instruction lists the following exceptions:
    - Reserved Instruction
    - DSP Disabled
    
    If the MIPS core doesn't support the DSP module, or the DSP is
    disabled, do not handle the '$rt = $0' case as a no-op but raise
    the proper exception instead.
    
    Cc: Jia Liu <proljc@gmail.com>
    Fixes: 1cb6686cf92 (""target-mips: Add ASE DSP bit/manipulation instructions"")
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210529165443.1114402-1-f4bug@amsat.org>",a071578b93
0,"commit 6eb223104c4e5cdfeaf57cff20fb1ad54084393b
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Thu Jun 17 18:03:34 2021 +0200

    target/mips: Fix more TCG temporary leaks in gen_pool32a5_nanomips_insn
    
    Fix multiple TCG temporary leaks in gen_pool32a5_nanomips_insn().
    
    Fixes: 3285a3e4445 (""target/mips: Add emulation of DSP ASE for nanoMIPS - part 1"")
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210617174323.2900831-3-f4bug@amsat.org>",6eb223104c
0,"commit 96342d53a881a5686b1e4797aead1c025985772e
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sun May 30 11:36:29 2021 +0200

    target/mips: Fix TCG temporary leaks in gen_pool32a5_nanomips_insn()
    
    Fix a pair of TCG temporary leak when translating nanoMIPS SHILO opcode.
    
    Fixes: 3285a3e4445 (""target/mips: Add emulation of DSP ASE for nanoMIPS"")
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210530094538.1275329-1-f4bug@amsat.org>",96342d53a8
0,"commit 2838b1d6356044eb240edd4e1b9b5ab5946c5b28
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed May 5 23:38:36 2021 +0200

    target/mips: Fix potential integer overflow (CID 1452921)
    
    Use the BIT_ULL() macro to ensure we use 64-bit arithmetic.
    This fixes the following Coverity issue (OVERFLOW_BEFORE_WIDEN):
    
      CID 1452921:  Integer handling issues:
    
        Potentially overflowing expression ""1 << w"" with type ""int""
        (32 bits, signed) is evaluated using 32-bit arithmetic, and
        then used in a context that expects an expression of type
        ""uint64_t"" (64 bits, unsigned).
    
    Fixes: 074cfcb4dae (""target/mips: Implement hardware page table walker"")
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210505215119.1517465-1-f4bug@amsat.org>",2838b1d635
0,"commit ecba223da6215d6f6ce2d343b70b2e9a19bfb90b
Merge: d0ac9a6147 90a76c6316
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 24 15:00:33 2021 +0100

    Merge remote-tracking branch 'remotes/pmaydell/tags/pull-target-arm-20210624' into staging
    
    target-arm queue:
     * Don't require 'virt' board to be compiled in for ACPI GHES code
     * docs: Document which architecture extensions we emulate
     * Fix bugs in M-profile FPCXT_NS accesses
     * First slice of MVE patches
     * Implement MTE3
     * docs/system: arm: Add nRF boards description
    
    # gpg: Signature made Thu 24 Jun 2021 14:59:16 BST
    # gpg:                using RSA key E1A5C593CD419DE28E8315CF3C2525ED14360CDE
    # gpg:                issuer ""peter.maydell@linaro.org""
    # gpg: Good signature from ""Peter Maydell <peter.maydell@linaro.org>"" [ultimate]
    # gpg:                 aka ""Peter Maydell <pmaydell@gmail.com>"" [ultimate]
    # gpg:                 aka ""Peter Maydell <pmaydell@chiark.greenend.org.uk>"" [ultimate]
    # Primary key fingerprint: E1A5 C593 CD41 9DE2 8E83  15CF 3C25 25ED 1436 0CDE
    
    * remotes/pmaydell/tags/pull-target-arm-20210624: (57 commits)
      docs/system: arm: Add nRF boards description
      target/arm: Implement MTE3
      target/arm: Make VMOV scalar <-> gpreg beatwise for MVE
      target/arm: Implement MVE VADDV
      target/arm: Implement MVE VHCADD
      target/arm: Implement MVE VCADD
      target/arm: Implement MVE VADC, VSBC
      target/arm: Implement MVE VRHADD
      target/arm: Implement MVE VQDMULL (vector)
      target/arm: Implement MVE VQDMLSDH and VQRDMLSDH
      target/arm: Implement MVE VQDMLADH and VQRDMLADH
      target/arm: Implement MVE VRSHL
      target/arm: Implement MVE VSHL insn
      target/arm: Implement MVE VQRSHL
      target/arm: Implement MVE VQSHL (vector)
      target/arm: Implement MVE VQADD, VQSUB (vector)
      target/arm: Implement MVE VQDMULH, VQRDMULH (vector)
      target/arm: Implement MVE VQDMULL scalar
      target/arm: Implement MVE VQDMULH and VQRDMULH (scalar)
      target/arm: Implement MVE VQADD and VQSUB
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",ecba223da6
0,"commit 90a76c6316cfe6416fc33814a838fb3928f746ee
Author: Alexandre Iooss <erdnaxe@crans.org>
Date:   Mon Jun 21 09:56:25 2021 +0200

    docs/system: arm: Add nRF boards description
    
    This adds the target guide for BBC Micro:bit.
    
    Information is taken from https://wiki.qemu.org/Features/MicroBit
    and from hw/arm/nrf51_soc.c.
    
    Signed-off-by: Alexandre Iooss <erdnaxe@crans.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Message-id: 20210621075625.540471-1-erdnaxe@crans.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",90a76c6316
0,"commit 86f0d4c7290eb2b21ec3eb44956ec245441275db
Author: Peter Collingbourne <pcc@google.com>
Date:   Wed Jun 16 12:56:14 2021 -0700

    target/arm: Implement MTE3
    
    MTE3 introduces an asymmetric tag checking mode, in which loads are
    checked synchronously and stores are checked asynchronously. Add
    support for it.
    
    Signed-off-by: Peter Collingbourne <pcc@google.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210616195614.11785-1-pcc@google.com
    [PMM: Add line to emulation.rst]
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",86f0d4c729
0,"commit 4f57ef959cf83cc780658c7e97ba5f737aa666f2
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:28 2021 +0100

    target/arm: Make VMOV scalar <-> gpreg beatwise for MVE
    
    In a CPU with MVE, the VMOV (vector lane to general-purpose register)
    and VMOV (general-purpose register to vector lane) insns are not
    predicated, but they are subject to beatwise execution if they
    are not in an IT block.
    
    Since our implementation always executes all 4 beats in one tick,
    this means only that we need to handle PSR.ECI:
     * we must do the usual check for bad ECI state
     * we must advance ECI state if the insn succeeds
     * if ECI says we should not be executing the beat corresponding
       to the lane of the vector register being accessed then we
       should skip performing the move
    
    Note that if PSR.ECI is non-zero then we cannot be in an IT block.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-45-peter.maydell@linaro.org",4f57ef959c
0,"commit 6f060a636bf46869e43a28a0f426ddaea16314f9
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:27 2021 +0100

    target/arm: Implement MVE VADDV
    
    Implement the MVE VADDV insn, which performs an addition
    across vector lanes.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-44-peter.maydell@linaro.org",6f060a636b
0,"commit 8625693ac48f54e87f663736c0bbde7ea450f1f7
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:26 2021 +0100

    target/arm: Implement MVE VHCADD
    
    Implement the MVE VHCADD insn, which is similar to VCADD
    but performs a halving step. This one overlaps with VADC.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-43-peter.maydell@linaro.org",8625693ac4
0,"commit 67ec113b119360092dee679ca0f5eca8ac60992c
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:25 2021 +0100

    target/arm: Implement MVE VCADD
    
    Implement the MVE VCADD insn, which performs a complex add with
    rotate.  Note that the size=0b11 encoding is VSBC.
    
    The architecture grants some leeway for the ""destination and Vm
    source overlap"" case for the size MO_32 case, but we choose not to
    make use of it, instead always calculating all 16 bytes worth of
    results before setting the destination register.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-42-peter.maydell@linaro.org",67ec113b11
0,"commit 89bc4c4f78c2435fdf8dc10b650cfe73c75f1f2c
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:24 2021 +0100

    target/arm: Implement MVE VADC, VSBC
    
    Implement the MVE VADC and VSBC insns.  These perform an
    add-with-carry or subtract-with-carry of the 32-bit elements in each
    lane of the input vectors, where the carry-out of each add is the
    carry-in of the next.  The initial carry input is either 1 or is from
    FPSCR.C; the carry out at the end is written back to FPSCR.C.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-41-peter.maydell@linaro.org",89bc4c4f78
0,"commit 1eb987a89d944515b05ccd8b913bee7fd0d547ae
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:23 2021 +0100

    target/arm: Implement MVE VRHADD
    
    Implement the MVE VRHADD insn, which performs a rounded halving
    addition.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-40-peter.maydell@linaro.org",1eb987a89d
0,"commit 43364321f354b8722d5bab730052b625adc3a92c
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:22 2021 +0100

    target/arm: Implement MVE VQDMULL (vector)
    
    Implement the vector form of the MVE VQDMULL insn.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-39-peter.maydell@linaro.org",43364321f3
0,"commit 92f117326af14d9bffc2ec99e0f112d33c0615ca
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:21 2021 +0100

    target/arm: Implement MVE VQDMLSDH and VQRDMLSDH
    
    Implement the MVE VQDMLSDH and VQRDMLSDH insns, which are
    like VQDMLADH and VQRDMLADH except that products are subtracted
    rather than added.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-38-peter.maydell@linaro.org",92f117326a
0,"commit fd677f8055fa88d72f01eb9aeb1dd90606d85444
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:20 2021 +0100

    target/arm: Implement MVE VQDMLADH and VQRDMLADH
    
    Implement the MVE VQDMLADH and VQRDMLADH insns.  These multiply
    elements, and then add pairs of products, double, possibly round,
    saturate and return the high half of the result.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-37-peter.maydell@linaro.org",fd677f8055
0,"commit bb002345ebfe09f6f96fc41043f93d2e286cd136
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:19 2021 +0100

    target/arm: Implement MVE VRSHL
    
    Implement the MVE VRSHL insn (vector form).
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-36-peter.maydell@linaro.org",bb002345eb
0,"commit 0372cad813193bab3fb88985129ac59c801ca065
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:18 2021 +0100

    target/arm: Implement MVE VSHL insn
    
    Implement the MVE VSHL insn (vector form).
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-35-peter.maydell@linaro.org",0372cad813
0,"commit 9dc868c41d8c630f3c13040e2732b4df6d4739de
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:17 2021 +0100

    target/arm: Implement MVE VQRSHL
    
    Implement the MV VQRSHL (vector) insn.  Again, the code to perform
    the actual shifts is borrowed from neon_helper.c.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-34-peter.maydell@linaro.org",9dc868c41d
0,"commit 483da6613937ea34fbf4b970668021dd76e46636
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:16 2021 +0100

    target/arm: Implement MVE VQSHL (vector)
    
    Implement the MVE VQSHL insn (encoding T4, which is the
    vector-shift-by-vector version).
    
    The DO_SQSHL_OP and DO_UQSHL_OP macros here are derived from
    the neon_helper.c code for qshl_u{8,16,32} and qshl_s{8,16,32}.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-33-peter.maydell@linaro.org",483da66139
0,"commit f741707bb36f7281ceccbdc0c44dcce61fbe1023
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:15 2021 +0100

    target/arm: Implement MVE VQADD, VQSUB (vector)
    
    Implement the vector forms of the MVE VQADD and VQSUB insns.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-32-peter.maydell@linaro.org",f741707bb3
0,"commit 380caf6c0762f43a9468aeebaf4ba7e1dd8edc9a
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:14 2021 +0100

    target/arm: Implement MVE VQDMULH, VQRDMULH (vector)
    
    Implement the vector forms of the MVE VQDMULH and VQRDMULH insns.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-31-peter.maydell@linaro.org",380caf6c07
0,"commit a88903537d73b1d9728e3d824920b4d0096f10bc
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:13 2021 +0100

    target/arm: Implement MVE VQDMULL scalar
    
    Implement the MVE VQDMULL scalar insn. This multiplies the top or
    bottom half of each element by the scalar, doubles and saturates
    to a double-width result.
    
    Note that this encoding overlaps with VQADD and VQSUB; it uses
    what in VQADD and VQSUB would be the 'size=0b11' encoding.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-30-peter.maydell@linaro.org",a88903537d
0,"commit 66c0576754b100606e041fef54e5b897417426c7
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:12 2021 +0100

    target/arm: Implement MVE VQDMULH and VQRDMULH (scalar)
    
    Implement the MVE VQDMULH and VQRDMULH scalar insns, which multiply
    elements by the scalar, double, possibly round, take the high half
    and saturate.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-29-peter.maydell@linaro.org",66c0576754
0,"commit 39f2ec8592dd3c823034dc4decc64c7e4cc42bfd
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:11 2021 +0100

    target/arm: Implement MVE VQADD and VQSUB
    
    Implement the MVE VQADD and VQSUB insns, which perform saturating
    addition of a scalar to each element.  Note that individual bytes of
    each result element are used or discarded according to the predicate
    mask, but FPSCR.QC is only set if the predicate mask for the lowest
    byte of the element is set.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-28-peter.maydell@linaro.org",39f2ec8592
0,"commit 387debdb93d2635fb6d62bff38887d17ef4d8117
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:10 2021 +0100

    target/arm: Implement MVE VPST
    
    Implement the MVE VPST insn, which sets the predicate mask
    fields in the VPR to the immediate value encoded in the insn.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-27-peter.maydell@linaro.org",387debdb93
0,"commit b050543b68308427792cc024fb2905b041ebc253
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:09 2021 +0100

    target/arm: Implement MVE VBRSR
    
    Implement the MVE VBRSR insn, which reverses a specified
    number of bits in each element, setting the rest to zero.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-26-peter.maydell@linaro.org",b050543b68
0,"commit 644f717c35ec29d53f6fc34523e096fbad6eeaf9
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:08 2021 +0100

    target/arm: Implement MVE VHADD, VHSUB (scalar)
    
    Implement the scalar variants of the MVE VHADD and VHSUB insns.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-25-peter.maydell@linaro.org",644f717c35
0,"commit 91a358fdfb3b116a6ea72a38d5c217caad1d45b5
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:07 2021 +0100

    target/arm: Implement MVE VSUB, VMUL (scalar)
    
    Implement the scalar forms of the MVE VSUB and VMUL insns.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-24-peter.maydell@linaro.org",91a358fdfb
0,"commit e51896b3866ffb74df5aaa3b33c35e7113e5c6b9
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:06 2021 +0100

    target/arm: Implement MVE VADD (scalar)
    
    Implement the scalar form of the MVE VADD insn. This takes the
    scalar operand from a general purpose register.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-23-peter.maydell@linaro.org",e51896b386
0,"commit 3ef6434409c575e11faf537ce50ca05426c78940
Author: Alistair Francis <alistair.francis@wdc.com>
Date:   Fri Jun 18 17:28:01 2021 +1000

    hw/riscv: OpenTitan: Connect the mtime and mtimecmp timer
    
    Connect the Ibex timer to the OpenTitan machine. The timer can trigger
    the RISC-V MIE interrupt as well as a custom device interrupt.
    
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-id: 5e7f4e9b4537f863bcb8db1264b840b56ef2a929.1624001156.git.alistair.francis@wdc.com",3ef6434409
0,"commit df41cbd6bfa55dc3e69834f4402dbf776062c26e
Author: Alistair Francis <alistair.francis@wdc.com>
Date:   Fri Jun 18 17:27:54 2021 +1000

    hw/timer: Initial commit of Ibex Timer
    
    Add support for the Ibex timer. This is used with the RISC-V
    mtime/mtimecmp similar to the SiFive CLINT.
    
    We currently don't support changing the prescale or the timervalue.
    
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-id: 716fdea2244515ce86a2c46fe69467d013c03147.1624001156.git.alistair.francis@wdc.com",df41cbd6bf
0,"commit bdc36ce649e2985225fcf9ab4958698fcafb04e9
Author: Alistair Francis <alistair.francis@wdc.com>
Date:   Fri Jun 18 17:27:48 2021 +1000

    hw/char/ibex_uart: Make the register layout private
    
    We don't need to expose the register layout in the public header, so
    don't.
    
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-id: c437f570b2b30ab4170387a3ba2fad7d116a4986.1624001156.git.alistair.francis@wdc.com",bdc36ce649
0,"commit 6ee7ba1b8a10bd8eb1d3b918eaaf9f832a51adb4
Author: Lukas Jünger <lukas.juenger@greensocs.com>
Date:   Wed Jun 16 11:23:26 2021 +0200

    hw/char: QOMify sifive_uart
    
    This QOMifies the SiFive UART model. Migration and reset have been
    implemented.
    
    Signed-off-by: Lukas Jünger <lukas.juenger@greensocs.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210616092326.59639-3-lukas.juenger@greensocs.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",6ee7ba1b8a
0,"commit 244a9fcb31c0f2b599caa7370c8e9d064497a920
Author: Lukas Jünger <lukas.juenger@greensocs.com>
Date:   Wed Jun 16 11:23:25 2021 +0200

    hw/char: Consistent function names for sifive_uart
    
    This cleans up function names in the SiFive UART model.
    
    Signed-off-by: Lukas Jünger <lukas.juenger@greensocs.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-id: 20210616092326.59639-2-lukas.juenger@greensocs.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",244a9fcb31
0,"commit 79a412891f0cb6bbffd8fd9e13608066234e56c1
Author: Bin Meng <bin.meng@windriver.com>
Date:   Tue Jun 15 16:51:33 2021 +0800

    target/riscv: gdbstub: Fix dynamic CSR XML generation
    
    Since commit 605def6eeee5 (""target/riscv: Use the RISCVException enum for CSR operations"")
    the CSR predicate() function was changed to return RISCV_EXCP_NONE
    instead of 0 for a valid CSR, but it forgot to update the dynamic
    CSR XML generation codes in gdbstub.
    
    Fixes: 605def6eeee5 (""target/riscv: Use the RISCVException enum for CSR operations"")
    Reported-by: Xuzhou Cheng <xuzhou.cheng@windriver.com>
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Tested-by: Xuzhou Cheng <xuzhou.cheng@windriver.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210615085133.389887-1-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",79a412891f
0,"commit 65d1a2bd3ec272bccdac29d4dc31c528a760cc3d
Author: Alistair Francis <alistair.francis@wdc.com>
Date:   Mon May 31 14:27:14 2021 +1000

    target/riscv: Use target_ulong for the DisasContext misa
    
    The is_32bit() check in translate.c expects a 64-bit guest to have a
    64-bit misa value otherwise the macro check won't work. This patches
    fixes that and fixes a Coverity issue at the same time.
    
    Fixes: CID 1453107
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-id: c00176c7518c2a7b4de3eec320b6a683ab56f705.1622435221.git.alistair.francis@wdc.com",65d1a2bd3e
0,"commit 60e543f5ce46d4a90a95963b3bab5c7d13a2aaa9
Author: Qiang Liu <cyruscyliu@gmail.com>
Date:   Thu Jun 24 10:44:47 2021 +0800

    hw/audio/sb16: Restrict I/O sampling rate range for command 41h/42h
    
    The I/O sampling rate range is enforced to 5000 to 45000HZ according to
    commit a2cd86a9. Setting I/O sampling rate with command 41h/42h, a guest
    user can break this assumption and trigger an assertion in audio_calloc
    via command 0xd4. This patch restricts the I/O sampling rate range for
    command 41h/42h.
    
    Fixes: 85571bc7415 (""audio merge (malc)"")
    Signed-off-by: Qiang Liu <cyruscyliu@gmail.com>
    Message-Id: <1624502687-5214-1-git-send-email-cyruscyliu@gmail.com>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",60e543f5ce
0,"commit d0ac9a61474cf594d19082bc8976247e984ea9a3
Merge: b22726abdf c32c3d68ed
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 24 09:31:26 2021 +0100

    Merge remote-tracking branch 'remotes/thuth-gitlab/tags/pull-request-2021-06-21' into staging
    
    * Documentation updates
    * Remove leading underscores from header guards
    * Display hexadecimal value with '0x' prefix
    
    # gpg: Signature made Mon 21 Jun 2021 11:33:53 BST
    # gpg:                using RSA key 27B88847EEE0250118F3EAB92ED9D774FE702DB5
    # gpg:                issuer ""thuth@redhat.com""
    # gpg: Good signature from ""Thomas Huth <th.huth@gmx.de>"" [full]
    # gpg:                 aka ""Thomas Huth <thuth@redhat.com>"" [full]
    # gpg:                 aka ""Thomas Huth <huth@tuxfamily.org>"" [full]
    # gpg:                 aka ""Thomas Huth <th.huth@posteo.de>"" [unknown]
    # Primary key fingerprint: 27B8 8847 EEE0 2501 18F3  EAB9 2ED9 D774 FE70 2DB5
    
    * remotes/thuth-gitlab/tags/pull-request-2021-06-21:
      MAINTAINERS: Add qtest/arm-cpu-features.c to ARM TCG CPUs section
      fuzz: Display hexadecimal value with '0x' prefix
      Remove leading underscores from QEMU defines
      Update documentation to refer to new location for issues
      docs/tools/virtiofsd: Fix bad rst syntax
      docs/tools/virtiofsd.rst: Do not hard-code the QEMU binary name
      docs/interop/live-block-operations: Do not hard-code the QEMU binary name
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",d0ac9a6147
0,"commit 32a9a245d719a883eef2cbf07d2cf89efa0206d0
Author: Max Reitz <mreitz@redhat.com>
Date:   Mon May 3 02:54:18 2021 -0700

    block/snapshot: Clarify goto fallback behavior
    
    In the bdrv_snapshot_goto() fallback code, we work with a pointer to
    either bs->file or bs->backing.  We detach that child, close the node
    (with .bdrv_close()), apply the snapshot on the child node, and then
    re-open the node (with .bdrv_open()).
    
    In order for .bdrv_open() to attach the same child node that we had
    before, we pass ""file={child-node}"" or ""backing={child-node}"" to it.
    Therefore, when .bdrv_open() has returned success, we can assume that
    bs->file or bs->backing (respectively) points to our original child
    again.  This is verified by an assertion.
    
    All of this is not immediately clear from a quick glance at the code,
    so add a comment to the assertion what it is for, and why it is valid.
    It certainly confused Coverity.
    
    Reported-by: Coverity (CID 1452774)
    Signed-off-by: Max Reitz <mreitz@redhat.com>
    Message-Id: <20210503095418.31521-1-mreitz@redhat.com>
    [mreitz: s/close/detach/]
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",32a9a245d7
0,"commit 66c2207fd28a6025792fbb75151ee848b911dc35
Author: Thomas Huth <thuth@redhat.com>
Date:   Tue Jun 15 11:04:39 2021 +0200

    ui: Make the DisplayType enum entries conditional
    
    Libvirt's ""domcapabilities"" command has a way to state whether certain
    graphic frontends are available in QEMU or not. Originally, libvirt
    looked at the ""--help"" output of the QEMU binary to determine whether
    SDL was available or not (by looking for the ""-sdl"" parameter in the
    help text), but since libvirt stopped doing this analysis of the help
    text, the detection of SDL is currently broken, see:
    
     https://bugzilla.redhat.com/show_bug.cgi?id=1790902
    
    QEMU should provide a way via the QMP interface instead. A simple way,
    without introducing additional commands, is to make the DisplayType
    enum entries conditional, so that the enum only contains the entries if
    the corresponding CONFIG_xxx switches have been set. This of course
    only gives an indication which possibilities have been enabled during
    compile-time of QEMU (and does not take into account whether modules
    are later available or not for example - for this we'd need a separate
    command), but anyway, this should already be good enough for the above
    bug ticket, and it's a good idea anyway to make the QMP interface
    conditional here, so let's simply do it.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210615090439.70926-1-thuth@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",66c2207fd2
0,"commit ddc717581c2ea45c38423d24f2157572c73b8e75
Author: Ahmed Abouzied <email@aabouzied.com>
Date:   Tue Jun 1 19:41:18 2021 +0200

    Add display suboptions to man pages
    
    Updates man pages with the suboptions for the `-display`.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/128
    Buglink: https://bugs.launchpad.net/qemu/+bug/1620660
    Signed-off-by: Ahmed Abouzied <email@aabouzied.com>
    Message-Id: <20210601174117.661-1-email@aabouzied.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",ddc717581c
0,"commit d7696ff884e35c6dacf83a7cbe3355e3b0a90125
Author: Akihiko Odaki <akihiko.odaki@gmail.com>
Date:   Thu Jun 17 11:31:13 2021 +0900

    input: Add lang1 and lang2 to QKeyCode
    
    lang1 and lang2 represents the keys with the same names in the
    keyboard/keypad usage page (0x07) included in the ""HID Usage Tables for
    Universal Serial Bus (USB)"" version 1.22. Although the keys are
    described as ""Hangul/English toggle key"" and ""Hanja conversion key"" in
    the specification, the meaning depends on the variety of the keyboard,
    and it will be used as the representations of Kana and Eisu keys on
    Japanese Macs in qemu_input_map_osx_to_qcode, which is used by ui/gtk.
    
    Signed-off-by: Akihiko Odaki <akihiko.odaki@gmail.com>
    Message-Id: <20210617023113.2441-2-akihiko.odaki@gmail.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",d7696ff884
0,"commit 7e3e20d89129614f4a7b2451fe321cc6ccca3b76
Author: Akihiko Odaki <akihiko.odaki@gmail.com>
Date:   Wed Jun 16 23:19:54 2021 +0900

    ui/cocoa: Add clipboard support
    
    Signed-off-by: Akihiko Odaki <akihiko.odaki@gmail.com>
    Message-Id: <20210616141954.54291-1-akihiko.odaki@gmail.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",7e3e20d891
0,"commit 15280e85d730002f10c0829ed2fac9bd141b63e9
Author: Akihiko Odaki <akihiko.odaki@gmail.com>
Date:   Wed Jun 16 23:19:10 2021 +0900

    ui/cocoa: Set UI information
    
    Signed-off-by: Akihiko Odaki <akihiko.odaki@gmail.com>
    Message-Id: <20210616141910.54188-1-akihiko.odaki@gmail.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",15280e85d7
0,"commit eb1a35e47aff9bda70d74874241e7966f800f4e3
Author: Akihiko Odaki <akihiko.odaki@gmail.com>
Date:   Wed Jun 23 05:17:40 2021 +0900

    coreaudio: Lock only the buffer
    
    On macOS 11.3.1, Core Audio calls AudioDeviceIOProc after calling an
    internal function named HALB_Mutex::Lock(), which locks a mutex in
    HALB_IOThread::Entry(void*). HALB_Mutex::Lock() is also called in
    AudioObjectGetPropertyData, which is called by coreaudio driver.
    Therefore, a deadlock will occur if coreaudio driver calls
    AudioObjectGetPropertyData while holding a lock for a mutex and tries
    to lock the same mutex in AudioDeviceIOProc.
    
    audioDeviceIOProc, which implements AudioDeviceIOProc in coreaudio
    driver, requires an exclusive access for the device configuration and
    the buffer. Fortunately, a mutex is necessary only for the buffer in
    audioDeviceIOProc because a change for the device configuration occurs
    only before setting up AudioDeviceIOProc or after stopping the playback
    with AudioDeviceStop.
    
    With this change, the mutex owned by the driver will only be used for
    the buffer, and the device configuration change will be protected with
    the implicit iothread mutex.
    
    Signed-off-by: Akihiko Odaki <akihiko.odaki@gmail.com>
    Message-id: 20210622201740.38005-1-akihiko.odaki@gmail.com
    Message-Id: <20210622201740.38005-1-akihiko.odaki@gmail.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",eb1a35e47a
0,"commit b22726abdfa54592d6ad88f65b0297c0e8b363e2
Merge: bf7942e406 96ff758c6e
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue Jun 22 16:07:53 2021 +0100

    Merge remote-tracking branch 'remotes/vivier2/tags/linux-user-for-6.1-pull-request' into staging
    
    Linux-user pull request 20210621
    
    # gpg: Signature made Mon 21 Jun 2021 12:03:53 BST
    # gpg:                using RSA key CD2F75DDC8E3A4DC2E4F5173F30C38BD3F2FBE3C
    # gpg:                issuer ""laurent@vivier.eu""
    # gpg: Good signature from ""Laurent Vivier <lvivier@redhat.com>"" [full]
    # gpg:                 aka ""Laurent Vivier <laurent@vivier.eu>"" [full]
    # gpg:                 aka ""Laurent Vivier (Red Hat) <lvivier@redhat.com>"" [full]
    # Primary key fingerprint: CD2F 75DD C8E3 A4DC 2E4F  5173 F30C 38BD 3F2F BE3C
    
    * remotes/vivier2/tags/linux-user-for-6.1-pull-request:
      linux-user: Use public sigev_notify_thread_id member if available
      linux-user: Fix incorrect use of feature-test-macros
      linux-user: Check for ieee128 fpbits in PPC64 HWCAP2 feature list
      tests/tcg/linux-test: Check that sigaction can query SIGKILL/SIGSTOP
      linux-user: Let sigaction query SIGKILL/SIGSTOP
      linux-user: Implement pivot_root
      linux-user/trace-events: fix minor typo in format string
      linux-user: Disable static assert involving __SIGRTMAX if it is missing
      linux-user: Set CF_PARALLEL when mapping shared memory
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",b22726abdf
0,"commit bf7942e406cb5e96d2490909d2cb31c7625b087b
Merge: b733163e05 c626710fc7
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue Jun 22 14:36:58 2021 +0100

    Merge remote-tracking branch 'remotes/cohuck-gitlab/tags/s390x-20210621' into staging
    
    s390x update:
    - tcg: implement the vector enhancements facility and bump the
      'qemu' cpu model to a stripped-down z14 GA2
    - fix psw.mask handling in signals
    - fix vfio-ccw sense data handling
    
    # gpg: Signature made Mon 21 Jun 2021 10:53:00 BST
    # gpg:                using RSA key C3D0D66DC3624FF6A8C018CEDECF6B93C6F02FAF
    # gpg:                issuer ""cohuck@redhat.com""
    # gpg: Good signature from ""Cornelia Huck <conny@cornelia-huck.de>"" [unknown]
    # gpg:                 aka ""Cornelia Huck <huckc@linux.vnet.ibm.com>"" [full]
    # gpg:                 aka ""Cornelia Huck <cornelia.huck@de.ibm.com>"" [full]
    # gpg:                 aka ""Cornelia Huck <cohuck@kernel.org>"" [unknown]
    # gpg:                 aka ""Cornelia Huck <cohuck@redhat.com>"" [unknown]
    # Primary key fingerprint: C3D0 D66D C362 4FF6 A8C0  18CE DECF 6B93 C6F0 2FAF
    
    * remotes/cohuck-gitlab/tags/s390x-20210621: (37 commits)
      s390x/css: Add passthrough IRB
      s390x/css: Refactor IRB construction
      s390x/css: Split out the IRB sense data
      s390x/css: Introduce an ESW struct
      linux-user/s390x: Save and restore psw.mask properly
      target/s390x: Use s390_cpu_{set_psw, get_psw_mask} in gdbstub
      target/s390x: Improve s390_cpu_dump_state vs cc_op
      target/s390x: Do not modify cpu state in s390_cpu_get_psw_mask
      target/s390x: Expose load_psw and get_psw_mask to cpu.h
      configure: Check whether we can compile the s390-ccw bios with -msoft-float
      s390x/cpumodel: Bump up QEMU model to a stripped-down IBM z14 GA2
      s390x/tcg: We support Vector enhancements facility
      linux-user: elf: s390x: Prepare for Vector enhancements facility
      s390x/tcg: Implement VECTOR FP (MAXIMUM|MINIMUM)
      s390x/tcg: Implement VECTOR FP NEGATIVE MULTIPLY AND (ADD|SUBTRACT)
      s390x/tcg: Implement 32/128 bit for VECTOR FP MULTIPLY AND (ADD|SUBTRACT)
      s390x/tcg: Implement 32/128 bit for VECTOR FP TEST DATA CLASS IMMEDIATE
      s390x/tcg: Implement 32/128 bit for VECTOR FP PERFORM SIGN OPERATION
      s390x/tcg: Implement 128 bit for VECTOR FP LOAD ROUNDED
      s390x/tcg: Implement 64 bit for VECTOR FP LOAD LENGTHENED
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",bf7942e406
0,"commit b733163e057a15b4b81f3f1d21908f3759315c78
Merge: 0add99ea3e 1c9638667b
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue Jun 22 10:39:16 2021 +0100

    Merge remote-tracking branch 'remotes/rth-gitlab/tags/pull-tcg-20210619-2' into staging
    
    TCI cleanup and re-encoding
    Fixes for #367 and #390.
    Move TCGCond to tcg/tcg-cond.h.
    Fix for win32 qemu_try_memalign.
    
    # gpg: Signature made Sun 20 Jun 2021 05:23:53 BST
    # gpg:                using RSA key 7A481E78868B4DB6A85A05C064DF38E8AF7E215F
    # gpg:                issuer ""richard.henderson@linaro.org""
    # gpg: Good signature from ""Richard Henderson <richard.henderson@linaro.org>"" [full]
    # Primary key fingerprint: 7A48 1E78 868B 4DB6 A85A  05C0 64DF 38E8 AF7E 215F
    
    * remotes/rth-gitlab/tags/pull-tcg-20210619-2: (33 commits)
      util/oslib-win32: Fix fatal assertion in qemu_try_memalign
      tcg: expose TCGCond manipulation routines
      tcg: Restart when exhausting the stack frame
      tcg: Allocate sufficient storage in temp_allocate_frame
      tcg/sparc: Fix temp_allocate_frame vs sparc stack bias
      accel/tcg: Probe the proper permissions for atomic ops
      tests/tcg: Increase timeout for TCI
      tcg/tci: Use {set,clear}_helper_retaddr
      tcg/tci: Remove the qemu_ld/st_type macros
      Revert ""tcg/tci: Use exec/cpu_ldst.h interfaces""
      tcg/tci: Split out tci_qemu_ld, tci_qemu_st
      tcg/tci: Implement add2, sub2
      tcg/tci: Implement mulu2, muls2
      tcg/tci: Implement clz, ctz, ctpop
      tcg/tci: Implement extract, sextract
      tcg/tci: Implement andc, orc, eqv, nand, nor
      tcg/tci: Implement movcond
      tcg/tci: Implement goto_ptr
      tcg/tci: Change encoding to uint32_t units
      tcg/tci: Remove tci_write_reg
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",b733163e05
0,"commit 38548747335a0796ab1d636c8b5bcf5c248ce437
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:05 2021 +0100

    target/arm: Implement MVE VRMLALDAVH, VRMLSLDAVH
    
    Implement the MVE VRMLALDAVH and VRMLSLDAVH insns, which accumulate
    the results of a rounded multiply of pairs of elements into a 72-bit
    accumulator, returning the top 64 bits in a pair of general purpose
    registers.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-22-peter.maydell@linaro.org",3854874733
0,"commit 181cd97143629a304f75acf894ca79b26bf32378
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:04 2021 +0100

    target/arm: Implement MVE VMLSLDAV
    
    Implement the MVE insn VMLSLDAV, which multiplies source elements,
    alternately adding and subtracting them, and accumulates into a
    64-bit result in a pair of general purpose registers.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-21-peter.maydell@linaro.org",181cd97143
0,"commit 1d2386f70a0cb2ad9c5fab2cf1eedb80bb5b313d
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:03 2021 +0100

    target/arm: Implement MVE VMLALDAV
    
    Implement the MVE VMLALDAV insn, which multiplies pairs of integer
    elements, accumulating them into a 64-bit result in a pair of
    general-purpose registers.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-20-peter.maydell@linaro.org",1d2386f70a
0,"commit ac6ad1dca84e39038e149c7b91adf9642e89ca70
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:02 2021 +0100

    target/arm: Implement MVE VMULL
    
    Implement the MVE VMULL insn, which multiplies two single
    width integer elements to produce a double width result.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-19-peter.maydell@linaro.org",ac6ad1dca8
0,"commit abc48e310cc95f616ae65ccb167019eebf7e705b
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:01 2021 +0100

    target/arm: Implement MVE VHADD, VHSUB
    
    Implement MVE VHADD and VHSUB insns, which perform an addition
    or subtraction and then halve the result.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-18-peter.maydell@linaro.org",abc48e310c
0,"commit bc67aa8d561e6ebf93b724c9abf3a7a1f95839c9
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:16:00 2021 +0100

    target/arm: Implement MVE VABD
    
    Implement the MVE VABD insn.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-17-peter.maydell@linaro.org",bc67aa8d56
0,"commit cd367ff3919e020b50a10cf4955fc31042e73f24
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:59 2021 +0100

    target/arm: Implement MVE VMAX, VMIN
    
    Implement the MVE VMAX and VMIN insns.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-16-peter.maydell@linaro.org",cd367ff391
0,"commit fca87b78f3d178518a38063498d477f5e10c5c22
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:58 2021 +0100

    target/arm: Implement MVE VRMULH
    
    Implement the MVE VRMULH insn, which performs a rounding multiply
    and then returns the high half.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-15-peter.maydell@linaro.org",fca87b78f3
0,"commit ba62cc56e8a0aa84337c50766d499ba4199394df
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:57 2021 +0100

    target/arm: Implement MVE VMULH
    
    Implement the MVE VMULH insn, which performs a vector
    multiply and returns the high half of the result.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-14-peter.maydell@linaro.org",ba62cc56e8
0,"commit 9333fe4dd39709ce9898750d517568e5c2fb2e32
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:56 2021 +0100

    target/arm: Implement MVE VADD, VSUB, VMUL
    
    Implement the MVE VADD, VSUB and VMUL insns.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-13-peter.maydell@linaro.org",9333fe4dd3
0,"commit 68245e442c9e5175d5e9d3a797dcab7eee800253
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:55 2021 +0100

    target/arm: Implement MVE VAND, VBIC, VORR, VORN, VEOR
    
    Implement the MVE vector logical operations operating
    on two registers.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-12-peter.maydell@linaro.org",68245e442c
0,"commit ab59362fca0c23fbd21daceb78d6b2966fbf9793
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:54 2021 +0100

    target/arm: Implement MVE VDUP
    
    Implement the MVE VDUP insn, which duplicates a value from
    a general-purpose register into every lane of a vector
    register (subject to predication).
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-11-peter.maydell@linaro.org",ab59362fca
0,"commit 614dd4f3ba2a025eae5235c3466ef6da191879f6
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:53 2021 +0100

    tcg: Make gen_dup_i32/i64() public as tcg_gen_dup_i32/i64
    
    The Arm MVE VDUP implementation would like to be able to emit code to
    duplicate a byte or halfword value into an i32.  We have code to do
    this already in tcg-op-gvec.c, so all we need to do is make the
    functions global.
    
    For consistency with other functions made available to the frontends:
     * we rename to tcg_gen_dup_*
     * we expose both the _i32 and _i64 forms
     * we provide the #define for a _tl form
    
    Suggested-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Message-id: 20210617121628.20116-10-peter.maydell@linaro.org",614dd4f3ba
0,"commit 399a8c766c0526b51cd180e1b1c776d6dc95bad8
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:52 2021 +0100

    target/arm: Implement MVE VNEG
    
    Implement the MVE VNEG insn (both integer and floating point forms).
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-9-peter.maydell@linaro.org",399a8c766c
0,"commit 59c917733809c6ac7d08a10ec3cf23ae50130248
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:51 2021 +0100

    target/arm: Implement MVE VABS
    
    Implement the MVE VABS functions (both integer and floating point).
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-8-peter.maydell@linaro.org",59c9177338
0,"commit 8abd3c80b18757c54e9b270244ca351e407b6405
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:50 2021 +0100

    target/arm: Implement MVE VMVN (register)
    
    Implement the MVE VMVN(register) operation.  Note that for
    predication this operation is byte-by-byte.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-7-peter.maydell@linaro.org",8abd3c80b1
0,"commit 249b5309c44831555b7fb6dab68d7a6f9f573882
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:49 2021 +0100

    target/arm: Implement MVE VREV16, VREV32, VREV64
    
    Implement the MVE instructions VREV16, VREV32 and VREV64.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-6-peter.maydell@linaro.org",249b5309c4
0,"commit 6437f1f77c3bca329b6464e9357647f33d85e9ef
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:48 2021 +0100

    target/arm: Implement MVE VCLS
    
    Implement the MVE VCLS insn.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-5-peter.maydell@linaro.org",6437f1f77c
0,"commit 0f0f2bd54817ffad1ccb15dd0fb3adf2db1ec394
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:47 2021 +0100

    target/arm: Implement MVE VCLZ
    
    Implement the MVE VCLZ insn (and the necessary machinery
    for MVE 1-input vector ops).
    
    Note that for non-load instructions predication is always performed
    at a byte level granularity regardless of element size (R_ZLSJ),
    and so the masking logic here differs from that used in the VLDR
    and VSTR helpers.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-4-peter.maydell@linaro.org",0f0f2bd548
0,"commit 2fc6b7510c6859478264b7402ba01dbee86b7e46
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:46 2021 +0100

    target/arm: Implement widening/narrowing MVE VLDR/VSTR insns
    
    Implement the variants of MVE VLDR (encodings T1, T2) which perform
    ""widening"" loads where bytes or halfwords are loaded from memory and
    zero or sign-extended into halfword or word length vector elements,
    and the narrowing MVE VSTR (encodings T1, T2) where bytes or
    halfwords are stored from halfword or word elements.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-3-peter.maydell@linaro.org",2fc6b7510c
0,"commit 507b6a500c2f0f6cf6182aa69efac4c20eb3e97b
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:15:45 2021 +0100

    target/arm: Implement MVE VLDR/VSTR (non-widening forms)
    
    Implement the forms of the MVE VLDR and VSTR insns which perform
    non-widening loads of bytes, halfwords or words from memory into
    vector elements of the same width (encodings T5, T6, T7).
    
    (At the moment we know for MVE and M-profile in general that
    vfp_access_check() can never return false, but we include the
    conventional return-true-on-failure check for consistency
    with non-M-profile translation code.)
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210617121628.20116-2-peter.maydell@linaro.org",507b6a500c
0,"commit 88137f787f374ac4117877bcc8c8af97326a10bd
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 18 15:10:19 2021 +0100

    target/arm: Handle FPU check for FPCXT_NS insns via vfp_access_check_m()
    
    Instead of open-coding the ""take NOCP exception if FPU disabled,
    otherwise call gen_preserve_fp_state()"" code in the accessors for
    FPCXT_NS, add an argument to vfp_access_check_m() which tells it to
    skip the gen_update_fp_context() call, so we can use it for the
    FPCXT_NS case.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210618141019.10671-8-peter.maydell@linaro.org",88137f787f
0,"commit e8cedaf779c0c2b13e0cc1ca580beaf5a6562a73
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 18 15:10:18 2021 +0100

    target/arm: Split vfp_access_check() into A and M versions
    
    vfp_access_check and its helper routine full_vfp_access_check() has
    gradually grown and is now an awkward mix of A-profile only and
    M-profile only pieces.  Refactor it into an A-profile only and an
    M-profile only version, taking advantage of the fact that now the
    only direct call to full_vfp_access_check() is in A-profile-only
    code.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210618141019.10671-7-peter.maydell@linaro.org",e8cedaf779
0,"commit 95aceeeac9a37d05c106ba807867616496d5c90e
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 18 15:10:17 2021 +0100

    target/arm: Factor FP context update code out into helper function
    
    Factor the code in full_vfp_access_check() which updates the
    ownership of the FP context and creates a new FP context
    out into its own function.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210618141019.10671-6-peter.maydell@linaro.org",95aceeeac9
0,"commit e494cd0a1abce13a9a934c1cfdaaeabd389a77c7
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 18 15:10:16 2021 +0100

    target/arm: Handle writeback in VLDR/VSTR sysreg with no memory access
    
    A few subcases of VLDR/VSTR sysreg succeed but do not perform a
    memory access:
     * VSTR of VPR when unprivileged
     * VLDR to VPR when unprivileged
     * VLDR to FPCXT_NS when fpInactive
    
    In these cases, even though we don't do the memory access we should
    still update the base register and perform the stack limit check if
    the insn's addressing mode specifies writeback.  Our implementation
    failed to do this, because we handle these side-effects inside the
    memory_to_fp_sysreg() and fp_sysreg_to_memory() callback functions,
    which are only called if there's something to load or store.
    
    Fix this by adding an extra argument to the callbacks which is set to
    true to actually perform the access and false to only do side effects
    like writeback, and calling the callback with do_access = false
    for the three cases listed above.
    
    This produces slightly suboptimal code for the case of a write
    to FPCXT_NS when the FPU is inactive and the insn didn't have
    side effects (ie no writeback, or via VMSR), in which case we'll
    generate a conditional branch over an unconditional branch.
    But this doesn't seem to be important enough to merit requiring
    the callback to report back whether it generated any code or not.
    
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210618141019.10671-5-peter.maydell@linaro.org",e494cd0a1a
0,"commit fa856736b6d0dabdcbe1b199ef2bb4fdec0f4911
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 18 15:10:15 2021 +0100

    target/arm: Don't NOCP fault for FPCXT_NS accesses
    
    The M-profile architecture requires that accesses to FPCXT_NS when
    there is no active FP state must not take a NOCP fault even if the
    FPU is disabled. We were not implementing this correctly, because
    in our decode we catch the NOCP faults early in m-nocp.decode.
    
    Fix this bug by moving all the handling of M-profile FP system
    register accesses from vfp.decode into m-nocp.decode and putting
    it above the NOCP blocks. This provides the correct behaviour:
     * for accesses other than FPCXT_NS the trans functions call
       vfp_access_check(), which will check for FPU disabled and
       raise a NOCP exception if necessary
     * for FPCXT_NS we have the special case code that doesn't
       call vfp_access_check()
     * when these trans functions want to raise an UNDEF they return
       false, so the decoder will fall through into the NOCP blocks.
       This means that NOCP correctly takes precedence over UNDEF
       for these insns. (This is a difference from the other insns
       handled by m-nocp.decode, where UNDEF takes precedence and
       which we implement by having those trans functions call
       unallocated_encoding() in the appropriate places.)
    
    [Note for backport to stable: this commit has a semantic dependency
    on commit 9a486856e9173af, which was not marked as cc-stable because
    we didn't know we'd need it for a for-stable bugfix.]
    
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210618141019.10671-4-peter.maydell@linaro.org",fa856736b6
0,"commit 9931d9d84bec87fae30b69590420d8ae459387a6
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 18 15:10:14 2021 +0100

    target/arm: Handle FPU being disabled in FPCXT_NS accesses
    
    If the guest makes an FPCXT_NS access when the FPU is disabled,
    one of two things happens:
     * if there is no active FP context, then the insn behaves the
       same way as if the FPU was enabled: writes ignored, reads
       same value as FPDSCR_NS
     * if there is an active FP context, then we take a NOCP
       exception
    
    Add code to the sysreg read/write functions which emits
    code to take the NOCP exception in the latter case.
    
    At the moment this will never be used, because the NOCP checks in
    m-nocp.decode happen first, and so the trans functions are never
    called when the FPU is disabled.  The code will be needed when we
    move the sysreg access insns to before the NOCP patterns in the
    following commit.
    
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210618141019.10671-3-peter.maydell@linaro.org",9931d9d84b
0,"commit 41b3ffc59966c78383e177e1dd38f884e886d960
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 18 15:10:13 2021 +0100

    target/arm/translate-vfp.c: Whitespace fixes
    
    In the code for handling VFP system register accesses there is some
    stray whitespace after a unary '-' operator, and also some incorrect
    indent in a couple of function prototypes.  We're about to move this
    code to another file, so fix the code style issues first so
    checkpatch doesn't complain about the code-movement patch.
    
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210618141019.10671-2-peter.maydell@linaro.org",41b3ffc599
0,"commit 741292face087213b846faed7055ff51b7fee2dd
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 15:03:28 2021 +0100

    docs/system/arm: Document which architecture extensions we emulate
    
    These days the Arm architecture has a wide range of fine-grained
    optional extra architectural features. We implement quite a lot
    of these but by no means all of them. Document what we do implement,
    so that users can find out without having to dig through back-issues
    of our Changelog on the wiki.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 20210617140328.28622-1-peter.maydell@linaro.org
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>",741292face
0,"commit 15613357ba53a4763594f64476058b85b3014757
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:24:38 2021 +0100

    target/arm: Use acpi_ghes_present() to see if we report ACPI memory errors
    
    The virt_is_acpi_enabled() function is specific to the virt board, as
    is the check for its 'ras' property.  Use the new acpi_ghes_present()
    function to check whether we should report memory errors via
    acpi_ghes_record_errors().
    
    This avoids a link error if QEMU was built without support for the
    virt board, and provides a mechanism that can be used by any future
    board models that want to add ACPI memory error reporting support
    (they only need to call acpi_ghes_add_fw_cfg()).
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Dongjiu Geng <gengdongjiu1@gmail.com>
    Message-id: 20210603171259.27962-4-peter.maydell@linaro.org",15613357ba
0,"commit 1c81f5735af3e2356bb75482a58786a4f26d8300
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 13:24:37 2021 +0100

    hw/acpi: Provide function acpi_ghes_present()
    
    Allow code elsewhere in the system to check whether the ACPI GHES
    table is present, so it can determine whether it is OK to try to
    record an error by calling acpi_ghes_record_errors().
    
    (We don't need to migrate the new 'present' field in AcpiGhesState,
    because it is set once at system initialization and doesn't change.)
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Dongjiu Geng <gengdongjiu1@gmail.com>
    Message-id: 20210603171259.27962-3-peter.maydell@linaro.org",1c81f5735a
0,"commit 82faef92fb149b6bad699c3275473fda6fd486b6
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 3 18:12:57 2021 +0100

    hw/acpi: Provide stub version of acpi_ghes_record_errors()
    
    Generic code in target/arm wants to call acpi_ghes_record_errors();
    provide a stub version so that we don't fail to link when
    CONFIG_ACPI_APEI is not set. This requires us to add a new
    ghes-stub.c file to contain it and the meson.build mechanics
    to use it when appropriate.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Dongjiu Geng <gengdongjiu1@gmail.com>
    Message-id: 20210603171259.27962-2-peter.maydell@linaro.org",82faef92fb
0,"commit 0add99ea3ea91af8230e3933ad7826b2da25a44d
Merge: 53f306f316 d08caefe66
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 21 16:11:33 2021 +0100

    Merge remote-tracking branch 'remotes/jsnow-gitlab/tags/python-pull-request' into staging
    
    Python Pull request
    
    Moves QMP-related tools not used for build or automatic testing from
    scripts/ to python/qemu/qmp/ where they will be protected from bitrot by
    the check-python-* CI jobs.
    
    stub forwarders are left in the old locations for now.
    
    # gpg: Signature made Sat 19 Jun 2021 00:02:40 BST
    # gpg:                using RSA key F9B7ABDBBCACDF95BE76CBD07DEF8106AAFC390E
    # gpg: Good signature from ""John Snow (John Huston) <jsnow@redhat.com>"" [full]
    # Primary key fingerprint: FAEB 9711 A12C F475 812F  18F2 88A9 064D 1835 61EB
    #      Subkey fingerprint: F9B7 ABDB BCAC DF95 BE76  CBD0 7DEF 8106 AAFC 390E
    
    * remotes/jsnow-gitlab/tags/python-pull-request: (72 commits)
      scripts/qmp-shell: add redirection shim
      python: add qmp-shell entry point
      scripts/qmp-shell: move to python/qemu/qmp/qmp_shell.py
      scripts/qmp-shell: add docstrings
      scripts/qmp-shell: make QMPShellError inherit QMPError
      scripts/qmp-shell: remove double-underscores
      scripts/qmp-shell: convert usage comment to docstring
      scripts/qmp-shell: Remove too-broad-exception
      scripts/qmp-shell: Fix empty-transaction invocation
      scripts/qmp-shell: remove TODO
      scripts/qmp-shell: use logging to show warnings
      scripts/qmp-shell: Use context manager instead of atexit
      python/qmp: return generic type from context manager
      scripts/qmp-shell: unprivatize 'pretty' property
      scripts/qmp-shell: Accept SocketAddrT instead of string
      scripts/qmp-shell: add mypy types
      python/qmp: add QMPObject type alias
      scripts/qmp-shell: initialize completer early
      scripts/qmp-shell: refactor QMPCompleter
      scripts/qmp-shell: Fix ""FuzzyJSON"" parser
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",0add99ea3e
0,"commit 53f306f316549d20c76886903181413d20842423
Merge: e4bfa6cd68 4e2f5f3a9d
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 21 11:26:04 2021 +0100

    Merge remote-tracking branch 'remotes/ehabkost-gl/tags/x86-next-pull-request' into staging
    
    x86 queue, 2021-06-18
    
    Features:
    * Add ratelimit for bus locks acquired in guest (Chenyi Qiang)
    
    Documentation:
    * SEV documentation updates (Tom Lendacky)
    * Add a table showing x86-64 ABI compatibility levels (Daniel P. Berrangé)
    
    Automated changes:
    * Update Linux headers to 5.13-rc4 (Eduardo Habkost)
    
    # gpg: Signature made Fri 18 Jun 2021 20:51:26 BST
    # gpg:                using RSA key 5A322FD5ABC4D3DBACCFD1AA2807936F984DC5A6
    # gpg:                issuer ""ehabkost@redhat.com""
    # gpg: Good signature from ""Eduardo Habkost <ehabkost@redhat.com>"" [full]
    # Primary key fingerprint: 5A32 2FD5 ABC4 D3DB ACCF  D1AA 2807 936F 984D C5A6
    
    * remotes/ehabkost-gl/tags/x86-next-pull-request:
      scripts: helper to generate x86_64 CPU ABI compat info
      docs: add a table showing x86-64 ABI compatibility levels
      docs/interop/firmware.json: Add SEV-ES support
      docs: Add SEV-ES documentation to amd-memory-encryption.txt
      doc: Fix some mistakes in the SEV documentation
      i386: Add ratelimit for bus locks acquired in guest
      Update Linux headers to 5.13-rc4
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",53f306f316
0,"commit c32c3d68ed0629910d5a1cd72bfb57d7f89b553b
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Wed May 26 19:04:21 2021 +0200

    MAINTAINERS: Add qtest/arm-cpu-features.c to ARM TCG CPUs section
    
    We want the ARM maintainers and the qemu-arm@ list to be
    notified when this file is modified. Add an entry to the
    'ARM TCG CPUs' section in the MAINTAINERS file.
    
    Acked-by: Andrew Jones <drjones@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210526170432.343588-2-philmd@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",c32c3d68ed
0,"commit c626710fc755628d0d6b88aab0514c9238a84522
Author: Eric Farman <farman@linux.ibm.com>
Date:   Fri Jun 18 01:25:37 2021 +0200

    s390x/css: Add passthrough IRB
    
    Wire in the subchannel callback for building the IRB
    ESW and ECW space for passthrough devices, and copy
    the hardware's ESW into the IRB we are building.
    
    If the hardware presented concurrent sense, then copy
    that sense data into the IRB's ECW space.
    
    Signed-off-by: Eric Farman <farman@linux.ibm.com>
    Message-Id: <20210617232537.1337506-5-farman@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",c626710fc7
0,"commit 0599a046acf1b625e97cef0aa702b5d86528c642
Author: Eric Farman <farman@linux.ibm.com>
Date:   Fri Jun 18 01:25:36 2021 +0200

    s390x/css: Refactor IRB construction
    
    Currently, all subchannel types have ""sense data"" copied into
    the IRB.ECW space, and a couple flags enabled in the IRB.SCSW
    and IRB.ESW. But for passthrough (vfio-ccw) subchannels,
    this data isn't populated in the first place, so enabling
    those flags leads to unexpected behavior if the guest tries to
    process the sense data (zeros) in the IRB.ECW.
    
    Let's add a subchannel callback that builds these portions of
    the IRB, and move the existing code into a routine for those
    virtual subchannels. The passthrough subchannels will be able
    to piggy-back onto this later.
    
    Signed-off-by: Eric Farman <farman@linux.ibm.com>
    Message-Id: <20210617232537.1337506-4-farman@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",0599a046ac
0,"commit 1b01dedaed41c2ca6129475c22b7b778b109fae8
Author: Eric Farman <farman@linux.ibm.com>
Date:   Fri Jun 18 01:25:35 2021 +0200

    s390x/css: Split out the IRB sense data
    
    Let's move this logic into its own routine,
    so it can be reused later.
    
    Signed-off-by: Eric Farman <farman@linux.ibm.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210617232537.1337506-3-farman@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",1b01dedaed
0,"commit 3fdc622ad79636f3d7f8bed50a53bc28af1850e1
Author: Eric Farman <farman@linux.ibm.com>
Date:   Fri Jun 18 01:25:34 2021 +0200

    s390x/css: Introduce an ESW struct
    
    The Interrupt Response Block is comprised of several other
    structures concatenated together, but only the 12-byte
    Subchannel-Status Word (SCSW) is defined as a proper struct.
    Everything else is a simple array of 32-bit words.
    
    Let's define a proper struct for the 20-byte Extended-Status
    Word (ESW) so that we can make good decisions about the sense
    data that would go into the ECW area for virtual vs
    passthrough devices.
    
    [CH: adapted ESW definition to build with mingw, as discussed]
    Signed-off-by: Eric Farman <farman@linux.ibm.com>
    Message-Id: <20210617232537.1337506-2-farman@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",3fdc622ad7
0,"commit 10b81272b305da375c3c3e9ec86f2e35df702f2e
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 20:07:44 2021 -0700

    linux-user/s390x: Save and restore psw.mask properly
    
    At present, we're referencing env->psw.mask directly, which
    fails to ensure that env->cc_op is incorporated or updated.
    Use s390_cpu_{set_psw,get_psw_mask} to fix this.
    
    Mirror the kernel's cleaning of the psw.mask in save_sigregs
    and restore_sigregs.  Ignore PSW_MASK_RI for now, as qemu does
    not support that.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Tested-by: jonathan.albrecht <jonathan.albrecht@linux.vnet.ibm.com>
    Tested-by: <ruixin.bao@ibm.com>
    Message-Id: <20210615030744.1252385-6-richard.henderson@linaro.org>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",10b81272b3
0,"commit deb60cc77b6743b65d1e830300b6d56ba538b103
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 20:07:43 2021 -0700

    target/s390x: Use s390_cpu_{set_psw, get_psw_mask} in gdbstub
    
    No change in behaviour, as gdbstub was correctly written to
    install and extract the cc value.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Tested-by: jonathan.albrecht <jonathan.albrecht@linux.vnet.ibm.com>
    Tested-by: <ruixin.bao@ibm.com>
    Message-Id: <20210615030744.1252385-5-richard.henderson@linaro.org>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",deb60cc77b
0,"commit d09e6c921301d4377c73e0bc9010b52f201862dd
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 20:07:42 2021 -0700

    target/s390x: Improve s390_cpu_dump_state vs cc_op
    
    Use s390_cpu_get_psw_mask so that we print the correct
    architectural value of psw.mask.  Do not print cc_op
    unless tcg_enabled.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Tested-by: jonathan.albrecht <jonathan.albrecht@linux.vnet.ibm.com>
    Tested-by: <ruixin.bao@ibm.com>
    Message-Id: <20210615030744.1252385-4-richard.henderson@linaro.org>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",d09e6c9213
0,"commit 3c11c2ebb062ffb5d7dcad44ab0fb60505ad5cac
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 20:07:41 2021 -0700

    target/s390x: Do not modify cpu state in s390_cpu_get_psw_mask
    
    We want to use this function for debugging, and debug should
    not modify cpu state (even non-architectural cpu state) lest
    we introduce heisenbugs.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Tested-by: jonathan.albrecht <jonathan.albrecht@linux.vnet.ibm.com>
    Tested-by: <ruixin.bao@ibm.com>
    Message-Id: <20210615030744.1252385-3-richard.henderson@linaro.org>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",3c11c2ebb0
0,"commit e2b2a8649bcd4769f453497b2abffbe44c7f86ad
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 20:07:40 2021 -0700

    target/s390x: Expose load_psw and get_psw_mask to cpu.h
    
    Rename to s390_cpu_set_psw and s390_cpu_get_psw_mask at the
    same time.  Adjust so that they compile for user-only.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Tested-by: jonathan.albrecht <jonathan.albrecht@linux.vnet.ibm.com>
    Tested-by: <ruixin.bao@ibm.com>
    Message-Id: <20210615030744.1252385-2-richard.henderson@linaro.org>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",e2b2a8649b
0,"commit 3af448b38677e7be5ccda6a65e06150abd1005b6
Author: Thomas Huth <thuth@redhat.com>
Date:   Tue May 25 16:20:32 2021 +0200

    configure: Check whether we can compile the s390-ccw bios with -msoft-float
    
    The -msoft-float switch is not available in older versions of Clang.
    Since we rely on the compiler to not generate floating point instructions
    unexpectedly, we block those old compilers now via a test in the configure
    script. Note that for some weird reasons, the Clang compiler only complains
    about the missing soft-float support if no other flags are passed via
    ""-Wl,..."" to the linker. So we have to use ""compile_object"" instead of
    ""compile_prog"" for this check.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210525142032.156989-1-thuth@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",3af448b386
0,"commit 463e50da8bf81bb3eff108e4bdd8fa7aadb12f4c
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:37 2021 +0200

    s390x/cpumodel: Bump up QEMU model to a stripped-down IBM z14 GA2
    
    TCG implements everything we need to run basic z14 OS+software.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-27-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",463e50da8b
0,"commit 8a9b7ed32d491693ed57d025d8a7d26f7a6a7d14
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:36 2021 +0200

    s390x/tcg: We support Vector enhancements facility
    
    Everything is wired up and all new instructions are implemented.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-26-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",8a9b7ed32d
0,"commit da215c239439539ffcbc0f79fba7b867eb3d8030
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:35 2021 +0200

    linux-user: elf: s390x: Prepare for Vector enhancements facility
    
    Let's check for S390_FEAT_VECTOR_ENH and set HWCAP_S390_VXRS_EXT
    accordingly. Add all missing HWCAP defined in upstream Linux.
    
    Cc: Laurent Vivier <laurent@vivier.eu>
    Acked-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-25-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",da215c2394
0,"commit da4807527f3bda115606b4647fdc2f87928d0f15
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:34 2021 +0200

    s390x/tcg: Implement VECTOR FP (MAXIMUM|MINIMUM)
    
    For IEEE functions, we can reuse the softfloat implementations. For the
    other functions, implement it generically for 32bit/64bit/128bit -
    carefully taking care of all weird special cases according to the tables
    defined in the PoP.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-24-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",da4807527f
0,"commit f02497306ec2efb8315f604597ddf8142f00336d
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:33 2021 +0200

    s390x/tcg: Implement VECTOR FP NEGATIVE MULTIPLY AND (ADD|SUBTRACT)
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-23-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",f02497306e
0,"commit e257abc8de8011160fec3e85fcf54db9bc7ae2c6
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:32 2021 +0200

    s390x/tcg: Implement 32/128 bit for VECTOR FP MULTIPLY AND (ADD|SUBTRACT)
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-22-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",e257abc8de
0,"commit a38b5a0eab9538543a241582d80cf0eb6ce97f1f
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:31 2021 +0200

    s390x/tcg: Implement 32/128 bit for VECTOR FP TEST DATA CLASS IMMEDIATE
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-21-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",a38b5a0eab
0,"commit 390eeb35757ffeeed6811370625e11a1c6b1d565
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:30 2021 +0200

    s390x/tcg: Implement 32/128 bit for VECTOR FP PERFORM SIGN OPERATION
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-20-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",390eeb3575
0,"commit 9cbc8be05aebc339546ed36334cb9e7b01e74b99
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:29 2021 +0200

    s390x/tcg: Implement 128 bit for VECTOR FP LOAD ROUNDED
    
    128 bit -> 64 bit, there is only a single element to process.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-19-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",9cbc8be05a
0,"commit 2e96005ed8509275f7396adacc3353e9189ce518
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:28 2021 +0200

    s390x/tcg: Implement 64 bit for VECTOR FP LOAD LENGTHENED
    
    64 bit -> 128 bit, there is only a single final element.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-18-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",2e96005ed8
0,"commit 1c6b5b47da8d9c8797cdf866fa180466b56a9204
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:27 2021 +0200

    s390x/tcg: Implement 32/128 bit for VECTOR FP COMPARE (AND SIGNAL) SCALAR
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-17-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",1c6b5b47da
0,"commit e384332cb53bd5b4d813cc38b5d19b3648047e14
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:26 2021 +0200

    s390x/tcg: Implement 32/128 bit for VECTOR FP COMPARE *
    
    In addition to 32/128bit variants, we also have to support the
    ""Signal-on-QNaN (SQ)"" bit.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-16-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",e384332cb5
0,"commit acb269a4cdeeafb027c350348f3137916e580746
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:25 2021 +0200

    s390x/tcg: Implement 32/128 bit for VECTOR (LOAD FP INTEGER|FP SQUARE ROOT)
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-15-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",acb269a4cd
0,"commit 0987961da96a5f62de5f0519ceaa022c394207c1
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:24 2021 +0200

    s390x/tcg: Implement 32/128 bit for VECTOR FP (ADD|DIVIDE|MULTIPLY|SUBTRACT)
    
    In case of 128bit, we always have a single element. Add new helpers for
    reading/writing 32/128 bit floats.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-14-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",0987961da9
0,"commit 8c18fa5b3eba2b5c4d1285714682db066ea711fa
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:23 2021 +0200

    s390x/tcg: Implement VECTOR MULTIPLY SUM LOGICAL
    
    Fortunately, we only need the Doubleword implementation.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-13-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",8c18fa5b3e
0,"commit 2a785dfb5071fdb269c77aeb7fa3930e93d413ef
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:22 2021 +0200

    s390x/tcg: Implement VECTOR BIT PERMUTE
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-12-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",2a785dfb50
0,"commit 4da79375c2a368bb548266e90e3d600afc05d165
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:21 2021 +0200

    s390x/tcg: Simplify wfc64() handling
    
    ... and prepare for 32/128 bit support.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-11-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",4da79375c2
0,"commit 977e43d977c0b64a1b582cb4cc1c5711b5bc01a7
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:20 2021 +0200

    s390x/tcg: Simplify vflr64() handling
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-10-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",977e43d977
0,"commit 860b707bbb1957d710d3469dbdc3b9f72576a7ef
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:19 2021 +0200

    s390x/tcg: Simplify vfll32() handling
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-9-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",860b707bbb
0,"commit 34142ffdee57f3fbd5eba1788ebc8e5d50a60022
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:18 2021 +0200

    s390x/tcg: Simplify vfma64() handling
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-8-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",34142ffdee
0,"commit 622ebe64ada4bf1bb3ce6bbfd7ea107ed166023c
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:17 2021 +0200

    s390x/tcg: Simplify vftci64() handling
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-7-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",622ebe64ad
0,"commit 64deb65afe028c85fb413285046c2e81a8d25b4f
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:16 2021 +0200

    s390x/tcg: Simplify vfc64() handling
    
    Pass the m5 field via simd_data() and don't provide specialized handlers
    for single-element variants.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-6-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",64deb65afe
0,"commit 21bd6ea2b3b0f8c55eb31199bbb3de0eb8827b8e
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:15 2021 +0200

    s390x/tcg: Simplify vop64_2() handling
    
    Let's rework our macros and simplify. We still need helper functions in
    most cases due to the different parameters types.
    
    Next, we'll only have 32/128bit variants for vfi and vfsq, so special
    case the others.
    
    Note that for vfsq, the XxC and erm passed in the simd_data() will never be
    set, resulting in the same behavior.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-5-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",21bd6ea2b3
0,"commit 863b9507a61bb4f5707de0dadca829945c149e6e
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:14 2021 +0200

    s390x/tcg: Simplify vop64_3() handling
    
    Let's simplify, reworking our handler generation, passing the whole ""m5""
    register content and not providing specialized handlers for ""se"", and
    reading/writing proper float64 values using new helpers.
    
    Suggested-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-4-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",863b9507a6
0,"commit 0bd3c286562e363fd5725209c0b475af9b8465d1
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:13 2021 +0200

    s390x/tcg: Fix instruction name for VECTOR FP LOAD (LENGTHENED|ROUNDED)
    
    Let's use the correct name.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-3-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",0bd3c28656
0,"commit 0a3be7be73e594388ae2a91017b7ffafab15a7d9
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Jun 8 11:23:12 2021 +0200

    s390x/tcg: Fix FP CONVERT TO (LOGICAL) FIXED NaN handling
    
    In case we encounter a NaN, we have to return the smallest possible
    number, corresponding to either 0 or the maximum negative number. This
    seems to differ from IEEE handling as implemented in softfloat, whereby
    we return the biggest possible number.
    
    While at it, use float32_to_uint64() in the CLGEB handler.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210608092337.12221-2-david@redhat.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>",0a3be7be73
0,"commit 3fb3b122ac061859c20cdb14567313f137dbc152
Author: Cornelia Huck <cohuck@redhat.com>
Date:   Wed Jun 2 14:50:50 2021 +0200

    s390x/kvm: remove unused gs handling
    
    With commit 0280b3eb7c05 (""s390x/kvm: use cpu model for gscb on
    compat machines""), we removed any calls to kvm_s390_get_gs()
    in favour of a different mechanism.
    
    Let's remove the unused kvm_s390_get_gs(), and with it the now
    unneeded cap_gs as well.
    
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210602125050.492500-1-cohuck@redhat.com>",3fb3b122ac
0,"commit a8fbec7ed80f4cc7ffec87144a03d990ff8002ff
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sat Jun 12 21:58:42 2021 +0200

    fuzz: Display hexadecimal value with '0x' prefix
    
    Use memory_region_size() to get the MemoryRegion size,
    and display it with the '0x' prefix.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alexander Bulekov <alxndr@bu.edu>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210612195842.1595999-1-f4bug@amsat.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",a8fbec7ed8
0,"commit e52ee00dab8678b26a5b7312275daa6ac4899046
Author: Ahmed Abouzied <email@aabouzied.com>
Date:   Sat Jun 5 19:49:38 2021 +0200

    Remove leading underscores from QEMU defines
    
    Leading underscores followed by a capital letter or underscore are
    reserved by the C standard.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/369
    
    Signed-off-by: Ahmed Abouzied <email@aabouzied.com>
    Message-Id: <20210605174938.13782-1-email@aabouzied.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",e52ee00dab
0,"commit e2abbeac7a0c19e7757370da4c5164c862016d31
Author: Stefan Weil <sw@weilnetz.de>
Date:   Sat Jun 19 17:42:53 2021 +0200

    Update documentation to refer to new location for issues
    
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-Id: <20210619154253.553446-1-sw@weilnetz.de>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",e2abbeac7a
0,"commit af94f14046e29e667edb6f802a108162b4890972
Author: Thomas Huth <thuth@redhat.com>
Date:   Mon Jun 7 20:00:15 2021 +0200

    docs/tools/virtiofsd: Fix bad rst syntax
    
    For literal blocks, there has to be an empty line after the two colons,
    and the block itself should be indented.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-Id: <20210607180015.924571-1-thuth@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",af94f14046
0,"commit 771f3be1b5d6c540c427bc7274ab36e2cccba694
Author: Thomas Huth <thuth@redhat.com>
Date:   Mon Jun 7 19:42:50 2021 +0200

    docs/tools/virtiofsd.rst: Do not hard-code the QEMU binary name
    
    In downstream, we want to use a different name for the QEMU binary,
    and some people might also use the docs for non-x86 binaries, that's
    why we already created the |qemu_system| placeholder in the past.
    Use it now in the virtiofsd doc, too.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-Id: <20210607174250.920226-1-thuth@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",771f3be1b5
0,"commit 2c1730f780b2baf37acd7c466d6111061370d117
Author: Thomas Huth <thuth@redhat.com>
Date:   Mon Jun 7 19:23:11 2021 +0200

    docs/interop/live-block-operations: Do not hard-code the QEMU binary name
    
    In downstream, we want to use a different name for the QEMU binary,
    and some people might also use the docs for non-x86 binaries, that's
    why we already created the |qemu_system| placeholder in the past.
    Use it now in the live-block-operations doc, too.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210607172311.915385-1-thuth@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",2c1730f780
0,"commit e4bfa6cd68e0b19f42c0c4ef26c024d39ebab044
Merge: 8f521741e1 bbfb7c2f35
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Sun Jun 20 21:20:13 2021 +0100

    Merge remote-tracking branch 'remotes/ericb/tags/pull-nbd-2021-06-15-v2' into staging
    
    nbd patches for 2021-06-15
    
    - bug fixes in coroutine aio context handling
    - rework NBD client connection logic to perform more work in coroutine
    
    # gpg: Signature made Fri 18 Jun 2021 18:29:39 BST
    # gpg:                using RSA key 71C2CC22B1C4602927D2F3AAA7A16B4A2527436A
    # gpg: Good signature from ""Eric Blake <eblake@redhat.com>"" [full]
    # gpg:                 aka ""Eric Blake (Free Software Programmer) <ebb9@byu.net>"" [full]
    # gpg:                 aka ""[jpeg image of size 6874]"" [full]
    # Primary key fingerprint: 71C2 CC22 B1C4 6029 27D2  F3AA A7A1 6B4A 2527 436A
    
    * remotes/ericb/tags/pull-nbd-2021-06-15-v2: (34 commits)
      block/nbd: safer transition to receiving request
      block/nbd: add nbd_client_connected() helper
      block/nbd: reuse nbd_co_do_establish_connection() in nbd_open()
      nbd/client-connection: add option for non-blocking connection attempt
      block/nbd: split nbd_co_do_establish_connection out of nbd_reconnect_attempt
      block-coroutine-wrapper: allow non bdrv_ prefix
      nbd/client-connection: return only one io channel
      block/nbd: drop BDRVNBDState::sioc
      block/nbd: don't touch s->sioc in nbd_teardown_connection()
      block/nbd: use negotiation of NBDClientConnection
      block/nbd: split nbd_handle_updated_info out of nbd_client_handshake()
      nbd/client-connection: shutdown connection on release
      nbd/client-connection: implement connection retry
      nbd/client-connection: add possibility of negotiation
      nbd/client-connection: use QEMU_LOCK_GUARD
      nbd: move connection code from block/nbd to nbd/client-connection
      block/nbd: introduce nbd_client_connection_release()
      block/nbd: introduce nbd_client_connection_new()
      block/nbd: rename NBDConnectThread to NBDClientConnection
      block/nbd: make nbd_co_establish_connection_cancel() bs-independent
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",e4bfa6cd68
0,"commit 96ff758c6e9cd5a01443ee15afbd0df4f00c37a8
Author: Michael Forney <mforney@mforney.org>
Date:   Tue May 25 20:55:56 2021 -0700

    linux-user: Use public sigev_notify_thread_id member if available
    
    _sigev_un._tid is an internal glibc field and is not available on
    musl libc. The sigevent(7) man page and Linux UAPI headers both use
    sigev_notify_thread_id as a public way to access this field.
    
    musl libc supports this field since 1.2.2[0], and glibc plans to
    add support as well[1][2].
    
    If sigev_notify_thread_id is not available, fall back to _sigev_un._tid
    as before.
    
    [0] http://git.musl-libc.org/cgit/musl/commit/?id=7c71792e87691451f2a6b76348e83ad1889f1dcb
    [1] https://www.openwall.com/lists/musl/2019/08/01/5
    [2] https://sourceware.org/bugzilla/show_bug.cgi?id=27417
    
    Signed-off-by: Michael Forney <mforney@mforney.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-Id: <20210526035556.7931-1-mforney@mforney.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",96ff758c6e
0,"commit febf6fade63801ebca765797fa2ad9de8d9f2700
Author: Michael Forney <mforney@mforney.org>
Date:   Tue May 25 20:55:31 2021 -0700

    linux-user: Fix incorrect use of feature-test-macros
    
    The _POSIX_C_SOURCE and _XOPEN_SOURCE macros are used by the
    application to indicate to libc which declarations it should expose.
    Since qemu does not define them anywhere, it does not make sense
    to check their value.
    
    Instead, since the intent is to determine whether the host struct
    stat supports the st_*tim fields, use the configure test result
    which does exactly that.
    
    Signed-off-by: Michael Forney <mforney@mforney.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-Id: <20210526035531.7871-1-mforney@mforney.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",febf6fade6
0,"commit 8a589aeb271bb470884f960e76cd6a7c89c022c9
Author: Khem Raj <raj.khem@gmail.com>
Date:   Mon Jun 14 12:17:29 2021 -0700

    linux-user: Check for ieee128 fpbits in PPC64 HWCAP2 feature list
    
    glibc 2.34 is now checking for this in hwcaps at
    runtime [1] and failing to run the binary if machine
    does not support 128bit IEEE fp
    
    Fixes
    Fatal glibc error: CPU lacks float128 support (POWER 9 or later required)
    
    [1] https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d337345ce145e23c5f3a956f349d924fdf54ce2d;hp=eb24865637a271ab7dad13190330105eab0d478d
    
    Signed-off-by: Khem Raj <raj.khem@gmail.com>
    Cc: Florian Weimer <fweimer@redhat.com>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-Id: <20210614191729.2981488-1-raj.khem@gmail.com>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",8a589aeb27
0,"commit 1df0f5c1141958368d7473c7bfe8beac7bf86385
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Tue Jun 1 16:56:00 2021 +0200

    tests/tcg/linux-test: Check that sigaction can query SIGKILL/SIGSTOP
    
    Verify that querying is allowed, but making changes isn't.
    
    Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-Id: <20210601145600.3131040-3-iii@linux.ibm.com>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",1df0f5c114
0,"commit ee3500d33a7431fbcc357a35ce1a46fcf13128cc
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Tue Jun 1 16:55:59 2021 +0200

    linux-user: Let sigaction query SIGKILL/SIGSTOP
    
    The kernel allows doing this, so let's allow this in qemu as well.
    Valgrind relies on this.
    
    Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-Id: <20210601145600.3131040-2-iii@linux.ibm.com>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",ee3500d33a
0,"commit e10fbe8f34843891b18f68f76320b43606f4df69
Author: YAMAMOTO Takashi <yamamoto@midokura.com>
Date:   Mon May 31 14:50:12 2021 +0900

    linux-user: Implement pivot_root
    
    Used by runc.
    
    Signed-off-by: YAMAMOTO Takashi <yamamoto@midokura.com>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-Id: <20210531055019.10149-6-yamamoto@midokura.com>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",e10fbe8f34
0,"commit 1c9638667b7068539dc5783c9428d588b14162ea
Author: Stefan Weil <sw@weilnetz.de>
Date:   Fri Jun 11 12:58:46 2021 +0200

    util/oslib-win32: Fix fatal assertion in qemu_try_memalign
    
    The function is called with alignment == 0 which caused an assertion.
    Use the code from oslib-posix.c to fix that regression.
    
    Fixes: ed6f53f9ca9
    Signed-off-by: Stefan Weil <sw@weilnetz.de>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210611105846.347954-1-sw@weilnetz.de>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",1c9638667b
0,"commit 9ca0362298d5093352095838fee8ddee83c90bd5
Author: Alessandro Di Federico <ale@rev.ng>
Date:   Sat Jun 19 11:37:00 2021 +0200

    tcg: expose TCGCond manipulation routines
    
    This commit moves into a separate file routines used to manipulate
    TCGCond. These will be employed by the idef-parser.
    
    Signed-off-by: Alessandro Di Federico <ale@rev.ng>
    Signed-off-by: Paolo Montesel <babush@rev.ng>
    Message-Id: <20210619093713.1845446-2-ale.qemu@rev.ng>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",9ca0362298
0,"commit 732d58979c9d6ab1b955b65264a15d0696ea477e
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Jun 19 06:32:03 2021 -0700

    tcg: Restart when exhausting the stack frame
    
    Assume that we'll have fewer temps allocated after
    restarting with a fewer number of instructions.
    
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",732d58979c
0,"commit c1c091948ae4a73c1a80b5005f6204d0e665ce52
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Jun 18 21:53:27 2021 -0700

    tcg: Allocate sufficient storage in temp_allocate_frame
    
    This function should have been updated for vector types
    when they were introduced.
    
    Fixes: d2fd745fe8b
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/367
    Cc: qemu-stable@nongnu.org
    Tested-by: Stefan Weil <sw@weilnetz.de>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c1c091948a
0,"commit 9defd1bdfb0f2ddb3ca9863e39577f3a9929d58c
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Jun 18 16:49:26 2021 -0700

    tcg/sparc: Fix temp_allocate_frame vs sparc stack bias
    
    We should not be aligning the offset in temp_allocate_frame,
    because the odd offset produces an aligned address in the end.
    Instead, pass the logical offset into tcg_set_frame and add
    the stack bias last.
    
    Cc: qemu-stable@nongnu.org
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",9defd1bdfb
0,"commit 08dff435e27dc2bc3582e3f25e7cf01956dddafc
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Jun 12 17:21:06 2021 -0700

    accel/tcg: Probe the proper permissions for atomic ops
    
    We had a single ATOMIC_MMU_LOOKUP macro that probed for
    read+write on all atomic ops.  This is incorrect for
    plain atomic load and atomic store.
    
    For user-only, we rely on the host page permissions.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/390
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",08dff435e2
0,"commit e5b4654907e9d96e1b215fa943e2f62e61676ed6
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sun Feb 7 18:15:04 2021 -0800

    tests/tcg: Increase timeout for TCI
    
    The longest test at the moment seems to be a (slower)
    aarch64 host, for which test-mmap takes 64 seconds.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Acked-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",e5b4654907
0,"commit 2fc6f16ca5eedc7881df7f0a1fcfcf8cb52731ac
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu May 27 12:41:07 2021 -0700

    tcg/tci: Use {set,clear}_helper_retaddr
    
    Wrap guest memory operations for tci like we do for cpu_ld*_data.
    
    We cannot actually use the cpu_ldst.h interface without duplicating
    the memory trace operations performed within, which will already
    have been expanded into the tcg opcode stream.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",2fc6f16ca5
0,"commit d1b1348cc33e5de3449f47d757141d7771b10e9e
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu May 27 12:37:57 2021 -0700

    tcg/tci: Remove the qemu_ld/st_type macros
    
    These macros are only used in one place.  By expanding,
    we get to apply some common-subexpression elimination
    and create some local variables.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",d1b1348cc3
0,"commit 5183f209eb3730a61adaf5ccfa1a30c807891971
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu May 27 12:24:25 2021 -0700

    Revert ""tcg/tci: Use exec/cpu_ldst.h interfaces""
    
    This reverts commit dc09f047eddec8f4a1991c4f5f4a428d7aa3f2c0.
    
    For tcg, tracepoints are expanded inline in tcg opcodes.
    Using a helper which generates a second tracepoint is incorrect.
    
    For system mode, the extraction and re-packing of MemOp and mmu_idx
    lost the alignment information from MemOp.  So we were no longer
    raising alignment exceptions for !TARGET_ALIGNED_ONLY guests.
    This can be seen in tests/tcg/xtensa/test_load_store.S.
    
    For user mode, we must update to the new signature of g2h() so that
    the revert compiles.  We can leave set_helper_retaddr for later.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",5183f209eb
0,"commit 69acc02a8b341847e38e976ea473d66943d81717
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu May 27 12:21:59 2021 -0700

    tcg/tci: Split out tci_qemu_ld, tci_qemu_st
    
    We can share this code between 32-bit and 64-bit loads and stores.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",69acc02a8b
0,"commit 08096b1a644aebac7a1e52fe377c59a3f90ed43d
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Feb 2 17:40:12 2021 -0800

    tcg/tci: Implement add2, sub2
    
    We already had the 32-bit versions for a 32-bit host; expand this
    to 64-bit hosts as well.  The 64-bit opcodes are new.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",08096b1a64
0,"commit f6db0d8dc63e0ae3668646653ffa1c5be16fbe5e
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Feb 2 17:21:27 2021 -0800

    tcg/tci: Implement mulu2, muls2
    
    We already had mulu2_i32 for a 32-bit host; expand this to 64-bit
    hosts as well.  The muls2_i32 and the 64-bit opcodes are new.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",f6db0d8dc6
0,"commit 5255f48c1c8c39be8ad95ef7ec0da0557924c806
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Feb 2 17:01:57 2021 -0800

    tcg/tci: Implement clz, ctz, ctpop
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",5255f48c1c
0,"commit 0f10d7c5b0f16b73b47165196a0b366e011c94be
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Feb 2 16:48:48 2021 -0800

    tcg/tci: Implement extract, sextract
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",0f10d7c5b0
0,"commit a81520b92d8a702be110052d253a1f034cf46d8f
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Feb 2 16:29:18 2021 -0800

    tcg/tci: Implement andc, orc, eqv, nand, nor
    
    These were already present in tcg-target.c.inc,
    but not in the interpreter.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",a81520b92d
0,"commit df093c19efe7a6a9b2ed43b0b6a7fa5d1e16cfcd
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Feb 2 16:15:45 2021 -0800

    tcg/tci: Implement movcond
    
    When this opcode is not available in the backend, tcg middle-end
    will expand this as a series of 5 opcodes.  So implementing this
    saves bytecode space.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",df093c19ef
0,"commit 6eea04347eb667f1326cb9b68c5b8f3d737f565d
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Feb 2 09:40:22 2021 -1000

    tcg/tci: Implement goto_ptr
    
    This operation is critical to staying within the interpretation
    loop longer, which avoids the overhead of setup and teardown for
    many TBs.
    
    The check in tcg_prologue_init is disabled because TCI does
    want to use NULL to indicate exit, as opposed to branching to
    a real epilogue.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",6eea04347e
0,"commit 650898891837a9772a5410e73c637a55d99e1e50
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Feb 1 21:27:41 2021 -1000

    tcg/tci: Change encoding to uint32_t units
    
    This removes all of the problems with unaligned accesses
    to the bytecode stream.
    
    With an 8-bit opcode at the bottom, we have 24 bits remaining,
    which are generally split into 6 4-bit slots.  This fits well
    with the maximum length opcodes, e.g. INDEX_op_add2_i32, which
    have 6 register operands.
    
    We have, in previous patches, rearranged things such that there
    are no operations with a label which have more than one other
    operand.  Which leaves us with a 20-bit field in which to encode
    a label, giving us a maximum TB size of 512k -- easily large.
    
    Change the INDEX_op_tci_movi_{i32,i64} opcodes to tci_mov[il].
    The former puts the immediate in the upper 20 bits of the insn,
    like we do for the label displacement.  The later uses a label
    to reference an entry in the constant pool.  Thus, in the worst
    case we still have a single memory reference for any constant,
    but now the constants are out-of-line of the bytecode and can
    be shared between different moves saving space.
    
    Change INDEX_op_call to use a label to reference a pair of
    pointers in the constant pool.  This removes the only slightly
    dodgy link with the layout of struct TCGHelperInfo.
    
    The re-encode cannot be done in pieces.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",6508988918
0,"commit 7e00a0800051655e6fdd85ad5dd6fcadafc2dc47
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Feb 1 11:30:30 2021 -1000

    tcg/tci: Remove tci_write_reg
    
    Inline it into its one caller, tci_write_reg64.
    Drop the asserts that are redundant with tcg_read_r.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",7e00a08000
0,"commit fc8ec9e12529eceac4eef483cdde52c14f3ca937
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Feb 1 09:41:20 2021 -1000

    tcg/tci: Emit setcond before brcond
    
    The encoding planned for tci does not have enough room for
    brcond2, with 4 registers and a condition as input as well
    as the label.  Resolve the condition into TCG_REG_TMP, and
    relax brcond to one register plus a label, considering the
    condition to always be reg != 0.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",fc8ec9e125
0,"commit baa94c0d333b5eccd68450625e0c3960e85d1913
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sun Jan 31 23:26:14 2021 -1000

    tcg/tci: Reserve r13 for a temporary
    
    We're about to adjust the offset range on host memory ops,
    and the format of branches.  Both will require a temporary.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",baa94c0d33
0,"commit 7b7d8b2d9a7fd68de821f96267e224c1a6256af1
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Jan 30 14:24:25 2021 -0800

    tcg/tci: Use ffi for calls
    
    This requires adjusting where arguments are stored.
    Place them on the stack at left-aligned positions.
    Adjust the stack frame to be at entirely positive offsets.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",7b7d8b2d9a
0,"commit bcb81061dc8173076d9669f969d132b998cd2af9
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sun Jan 31 23:23:07 2021 -1000

    tcg/tci: Move call-return regs to end of tcg_target_reg_alloc_order
    
    As the only call-clobbered regs for TCI, these should
    receive the least priority.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",bcb81061dc
0,"commit b6139eb0578fc422cfee77fccbd11152e73af1df
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Jan 29 10:00:42 2021 -1000

    tcg/tci: Improve tcg_target_call_clobber_regs
    
    The current setting is much too pessimistic.  Indicating only
    the one or two registers that are actually assigned after a
    call should avoid unnecessary movement between the register
    array and the stack array.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",b6139eb057
0,"commit 22f15579fa1ca654d331cac8e68a4e70981a8801
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu Mar 18 12:46:44 2021 -0600

    tcg: Build ffi data structures for helpers
    
    Add libffi as a build requirement for TCI.
    Add libffi to the dockerfiles to satisfy that requirement.
    
    Construct an ffi_cif structure for each unique typemask.
    Record the result in a separate hash table for later lookup;
    this allows helper_table to stay const.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",22f15579fa
0,"commit fa52e660620fbb2418868e337aee06427ceafdbb
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu Mar 18 16:40:07 2021 -0600

    tcg: Add tcg_call_func
    
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",fa52e66062
0,"commit 3e92aa34434bbcf88e5cc0a8334946216dcaf233
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu Mar 18 11:29:50 2021 -0600

    tcg: Store the TCGHelperInfo in the TCGOp for call
    
    This will give us both flags and typemask for use later.
    
    We also fix a dumping bug, wherein calls generated for plugins
    fail tcg_find_helper and print (null) instead of either a name
    or the raw function pointer.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",3e92aa3443
0,"commit 9d87e59585784cbc6a3307a00d1493268e0daead
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Mar 19 14:28:17 2021 -0600

    accel/tcg: Add tcg call flags to plugins helpers
    
    As noted by qemu-plugins.h, plugins can neither read nor write
    guest registers.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",9d87e59585
0,"commit c7bb41b44ad63515adccffa8a6486da46b0c2e26
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Mar 19 14:18:30 2021 -0600

    plugins: Drop tcg_flags from struct qemu_plugin_dyn_cb
    
    As noted by qemu-plugins.h, enum qemu_plugin_cb_flags is
    currently unused -- plugins can neither read nor write
    guest registers.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c7bb41b44a
0,"commit 9a3ee36609da355a5a9c86512e5003ce6a9a2239
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Mar 19 13:01:32 2021 -0600

    accel/tcg/plugin-gen: Drop inline markers
    
    Let the compiler decide on inlining.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",9a3ee36609
0,"commit 90163900e3c71ed2743cafd27542d941c4e25991
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu Mar 18 10:21:45 2021 -0600

    tcg: Add tcg_call_flags
    
    We're going to change how to look up the call flags from a TCGop,
    so extract it as a helper.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",90163900e3
0,"commit 7319d83a735004ba24b439491a9d7727dac2ddbe
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu Mar 18 10:01:01 2021 -0600

    tcg: Combine dh_is_64bit and dh_is_signed to dh_typecode
    
    We will shortly be interested in distinguishing pointers
    from integers in the helper's declaration, as well as a
    true void return.  We currently have two parallel 1 bit
    fields; merge them and expand to a 3 bit field.
    
    Our current maximum is 7 helper arguments, plus the return
    makes 8 * 3 = 24 bits used within the uint32_t typemask.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",7319d83a73
0,"commit d08caefe6648fc0713af5361e2b88bee53b67ebb
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:49 2021 -0400

    scripts/qmp-shell: add redirection shim
    
    qmp-shell has a new home, add a redirect for a little while as the dust
    settles.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-43-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",d08caefe66
0,"commit 957f3c5cee0ffd706cfabf4cf0e6b1247615fc59
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:48 2021 -0400

    python: add qmp-shell entry point
    
    now 'qmp-shell' should be available from the command line when
    installing the python package.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-42-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",957f3c5cee
0,"commit 6be7206efc394b0232912e7055c7298ec2b0352d
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:47 2021 -0400

    scripts/qmp-shell: move to python/qemu/qmp/qmp_shell.py
    
    The script will be unavailable for a commit or two, which will help
    preserve development history attached to the new file. A forwarder will
    be added shortly afterwards.
    
    With qmp_shell in the python qemu.qmp package, now it is fully type
    checked, linted, etc. via the Python CI. It will be quite a bit harder
    to accidentally break it again in the future.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-41-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",6be7206efc
0,"commit e359c5a8b8e6184c15806d1408de085aab9c268b
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:46 2021 -0400

    scripts/qmp-shell: add docstrings
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-40-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",e359c5a8b8
0,"commit 6a1105adba41c3cd6371437b46c045ae9ea85314
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:45 2021 -0400

    scripts/qmp-shell: make QMPShellError inherit QMPError
    
    In preparation for moving qmp-shell into the qemu.qmp package, make
    QMPShellError inherit from QMPError so that all custom errors in this
    package all derive from QMPError.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-39-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",6a1105adba
0,"commit a64fe44d5abfd4aa933b17a8cf21d3c0b9df6143
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:44 2021 -0400

    scripts/qmp-shell: remove double-underscores
    
    They're not needed; single underscore is enough to express intent that
    these methods are ""internal"". double underscore is used as a weak name
    mangling, but that isn't beneficial for us here.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-38-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",a64fe44d5a
0,"commit 7fc29896d237b6cb2db49e65f00882f554fc48c0
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:43 2021 -0400

    scripts/qmp-shell: convert usage comment to docstring
    
    The nice usage comment should be a docstring instead of a comment, so
    that it's visible from other python tooling.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-37-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",7fc29896d2
0,"commit 26d3ce9e5e42920a6f9c1f481d900e63a636b07d
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:42 2021 -0400

    scripts/qmp-shell: Remove too-broad-exception
    
    We are only anticipating QMPShellErrors here, for syntax we weren't able
    to understand. Other errors, if any, should be allowed to percolate
    upwards.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-36-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",26d3ce9e5e
0,"commit c83055ef1d47cd03667d7608f3f5ff232484146e
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:41 2021 -0400

    scripts/qmp-shell: Fix empty-transaction invocation
    
    calling ""transaction( )"" is pointless, but valid. Rework the parser to
    allow this kind of invocation. This helps clean up exception handling
    later by removing accidental breakages of the parser that aren't
    explicitly forbidden.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-35-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",c83055ef1d
0,"commit 74688377feb551101f8a3e3de483df56d30299e4
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:40 2021 -0400

    scripts/qmp-shell: remove TODO
    
    We still want to revamp qmp-shell again, but there's much more to the
    idea than the comment now intuits. Remove it.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-34-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",74688377fe
0,"commit be19c6a7126e5a463b3ef1ea23b985f6dc627a7a
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:39 2021 -0400

    scripts/qmp-shell: use logging to show warnings
    
    A perfect candidate is non-fatal shell history messages.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-33-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",be19c6a712
0,"commit d1d14e59895b2ebd2953e9442225ffba56f80e9b
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:38 2021 -0400

    scripts/qmp-shell: Use context manager instead of atexit
    
    We can invoke the shell history writing when we leave the QMPShell scope
    instead of relying on atexit. Doing so may be preferable to avoid global
    state being registered from within a class instead of from the
    application logic directly.
    
    Use QMP's context manager to hook this history saving at close time,
    which gets invoked when we leave the context block.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-32-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",d1d14e5989
0,"commit eac8aabc92f80d9a41d9f01163921472e309334c
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:37 2021 -0400

    python/qmp: return generic type from context manager
    
    __enter__ can be invoked from a subclass, so it needs a more flexible
    type.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-31-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",eac8aabc92
0,"commit 6e24a7edb8b64854636acd1f74abd8e5f1735b50
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:36 2021 -0400

    scripts/qmp-shell: unprivatize 'pretty' property
    
    Similar to verbose, there's no reason this needs to be hidden.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-30-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",6e24a7edb8
0,"commit b0b8ca17e518bc57ae231ade4be4a7ed0e5f07f1
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:35 2021 -0400

    scripts/qmp-shell: Accept SocketAddrT instead of string
    
    Don't ""extend"" QEMUMonitorProtocol by changing the argument types. Move
    the string parsing just outside of the class instead.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-29-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",b0b8ca17e5
0,"commit 1eab88723c4c8c18cd67b4cad88dbbccf5916061
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:34 2021 -0400

    scripts/qmp-shell: add mypy types
    
    As per my usual, this patch is annotations only. Any changes with side
    effects are done elsewhere.
    
    Note: pylint does not understand the subscripts for Collection in Python 3.6,
    so use the stronger Sequence type as a workaround.
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-28-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",1eab88723c
0,"commit 1acde76328de10beff07c7f1c8146af72813ecd7
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:33 2021 -0400

    python/qmp: add QMPObject type alias
    
    This is meant to represent any generic object seen in a QMPMessage, not
    just the root object itself.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-27-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",1acde76328
0,"commit 41574295829b9a34d43e7cb95847340942d1ddf5
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:32 2021 -0400

    scripts/qmp-shell: initialize completer early
    
    Add an empty completer as a more type-safe placeholder instead of
    'None'.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-26-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",4157429582
0,"commit db12abc20859e93e802f668a2f744222c96ada63
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:31 2021 -0400

    scripts/qmp-shell: refactor QMPCompleter
    
    list is a generic type, but we expect to use strings directly. We could
    subclass list[str], but pylint does not presently understand that
    invocation.
    
    Change this class to envelop a list instead of *being* a list, for
    simpler mypy typing.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-25-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",db12abc208
0,"commit 6faf2384ec78d5a1e0b5dfe430e80cf2278e45c4
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:30 2021 -0400

    scripts/qmp-shell: Fix ""FuzzyJSON"" parser
    
    I'm not sure when this regressed (Or maybe if it was ever working right
    to begin with?), but the Python AST requires you to change ""Names"" to
    ""Constants"" in order to truly convert `false` to `False`.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-24-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",6faf2384ec
0,"commit ad4eebee00a52a6f0e9761ffd0fd0002c259bc21
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:29 2021 -0400

    scripts/qmp-shell: move the REPL functionality into QMPShell
    
    Instead of doing this in main, move it into the class itself. (This
    makes it easier to put into the qemu.qmp package later by removing as
    much as we can from the main() function.)
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-23-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",ad4eebee00
0,"commit 1215a1fbef205ba9930a976619163271d8195cdb
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:28 2021 -0400

    scripts/qmp-shell: remove prompt argument from read_exec_command
    
    It's only ever used by one caller, we can just absorb that logic.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-22-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",1215a1fbef
0,"commit 1caa505766dbf7bd233b088e82bd7a745d2ba325
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:27 2021 -0400

    scripts/qmp-shell: move get_prompt() to prompt property
    
    Small tidying; treat ""prompt"" like an immutable property instead of
    function/method/routine.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-21-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",1caa505766
0,"commit 2ac3f3786e09c2ad40da16fa4ff4b0f99200f72e
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:26 2021 -0400

    scripts/qmp-shell: Make verbose a public attribute
    
    No real reason to hide this behind an underscore; make it part of the
    initializer and make it a regular RW attribute.
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-20-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",2ac3f3786e
0,"commit ad459132c088dc9b33e86b8ad87f96742e4de4bf
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:25 2021 -0400

    scripts/qmp-shell: Add pretty attribute to HMP shell
    
    It's less useful, but it makes the initialization methods LSP
    consistent, which quiets a mypy complaint.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-19-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",ad459132c0
0,"commit 17329be2fd1557c3e1e30ce3d0f714fc70c4e5be
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:24 2021 -0400

    scripts/qmp-shell: use argparse
    
    Use argparse instead of an open-coded CLI parser, for consistency with
    everything else.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-18-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",17329be2fd
0,"commit 90bd8eb8dcdc94da964786ddedd90c30eb54ada7
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:23 2021 -0400

    scripts/qmp-shell: use isinstance() instead of type()
    
    A bit more idiomatic, and quiets some linter warnings.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-17-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",90bd8eb8dc
0,"commit 73f699c903d429dfcd3b43232155cd515a854e80
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:22 2021 -0400

    scripts/qmp-shell: remove if-raise-else patterns
    
    Shushes pylint. I don't always mind these patterns personally, but I'm
    not as sure that I want to remove the warning from pylint's repertoire
    entirely. Oh well.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-16-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",73f699c903
0,"commit d962ec85ed188b04f35a28771c69845f09a3867e
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:21 2021 -0400

    scripts/qmp-shell: fix shell history exception handling
    
    We want to remove exceptions that are too broad here; we only want to
    catch IOErrors that get raised as a direct result of the open call.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-15-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",d962ec85ed
0,"commit 628b92dd67a262ebeac12dba65905c8143ce710f
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:20 2021 -0400

    scripts/qmp-shell: rename one and two-letter variables
    
    A bit of churn and housekeeping for pylint, flake8 et al.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-14-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",628b92dd67
0,"commit 2813dee0536c1b5d114c0fa0bdeb25317a38f486
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:19 2021 -0400

    scripts/qmp-shell: make QMPCompleter returns explicit
    
    This function returns None when it doesn't find a match; do that
    explicitly.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-13-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",2813dee053
0,"commit 50f6f1c3081322a1d9e2d0bbe5c9f434d712cf50
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:18 2021 -0400

    scripts/qmp-shell: ignore visit_Name name
    
    Not something I control, sorry, pylint.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-12-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",50f6f1c308
0,"commit c6be2bf86eb93a2e6afc4a6818310303471b3212
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:17 2021 -0400

    scripts/qmp-shell: use triple-double-quote docstring style
    
    (2014 me had never written python before.)
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-11-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",c6be2bf86e
0,"commit 31226369ab9fa654cdb37d977c5f396367065019
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:16 2021 -0400

    scripts/qmp-shell: declare verbose in __init__
    
    Linters get angry when we don't define state at init time.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-10-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",31226369ab
0,"commit 5cb0233861750908f5942ffb36061442e84c86da
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:15 2021 -0400

    scripts/qmp-shell: Use python3-style super()
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-9-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",5cb0233861
0,"commit c4a1447fc13fd71df3813bfd451b98137f12b434
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:14 2021 -0400

    scripts/qmp-shell: use @classmethod where appropriate
    
    Methods with no self-use should belong to the class.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-8-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",c4a1447fc1
0,"commit 9669c8289c8f16eb97ac887ab09598925f4712ce
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:13 2021 -0400

    scripts/qmp-shell: remove shadowed variable from _print()
    
    Don't use 'qmp' here, which shadows the qmp module.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-7-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",9669c8289c
0,"commit f2daa2d489d7b4f94288d6fafb8072fb1ea384a9
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:12 2021 -0400

    scripts/qmp-shell: fix connect method signature
    
    It needs to match the parent's signature -- the negotiate parameter must
    be optional.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-6-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",f2daa2d489
0,"commit de14ba24f3f31329debdfac9fa73c8d78e30399b
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:11 2021 -0400

    scripts/qmp-shell: fix exception handling
    
    Fixes: 50d189c
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-5-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",de14ba24f3
0,"commit 70e56740181a980a5bb60c3b0223e34e2616caf4
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:10 2021 -0400

    scripts/qmp-shell: fix show_banner signature
    
    The signatures need to match.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-4-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",70e5674018
0,"commit 169b43b367b874076c544984fc3e63e3c5c49763
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:09 2021 -0400

    scripts/qmp-shell: Apply flake8 rules
    
    A lot of fiddling around to get us below 80 columns.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-3-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",169b43b367
0,"commit badf462985eb55a8f589d983ee65542972d16d3e
Author: John Snow <jsnow@redhat.com>
Date:   Mon Jun 7 16:06:08 2021 -0400

    scripts/qmp-shell: apply isort rules
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210607200649.1840382-2-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",badf462985
0,"commit 88fb483fc559e297ee681e161d70c4615b2a28ea
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:32 2021 -0400

    scripts/qemu-ga-client: Add forwarder shim
    
    Add a little forwarder shim until we are sure that everyone is
    comfortable with how to use the tools in their new packaged location.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-12-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",88fb483fc5
0,"commit 7e7c2a0de74d56c3f47205df3dcf68ed7d43d30d
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:31 2021 -0400

    python/qemu-ga-client: add entry point
    
    Remove the shebang, and add a package-defined entry point instead. Now,
    it can be accessed using 'qemu-ga-client' from the command line after
    installing the package.
    
    The next commit adds a forwarder shim that allows the running of this
    script without needing to install the package again.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-11-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",7e7c2a0de7
0,"commit 1e129afc311a4a3897e83a308cce79e2c1cc3d89
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:30 2021 -0400

    scripts/qemu-ga-client: move to python/qemu/qmp/qemu_ga_client.py
    
    The script itself will be unavailable for a few commits before being
    restored, with no way to run it right after this commit. This helps move
    git history into the new file. To prevent linter regressions, though, we
    do need to immediately touch up the filename to remove dashes (to make
    the module importable), and remove the executable bit.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-10-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",1e129afc31
0,"commit ca683d4a2fece0e6bf58f065baa1e23226c1ac06
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:29 2021 -0400

    scripts/qemu-ga-client: add mypy type hints
    
    This script is in slightly rough shape, but it still works. A lot of
    care went into its initial development. In good faith, I'm updating it
    to the latest Python coding standards. If there is in interest in this
    script, though, I'll be asking for a contributor to take care of it
    further.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-9-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",ca683d4a2f
0,"commit 1f6399393bc672c2b89c3c3b862ff96baecc1bef
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:28 2021 -0400

    python/qmp: Correct type of QMPReturnValue
    
    It's only a Dict[str, Any] most of the time. It's not actually
    guaranteed to be anything in particular. Fix this type to be
    more accurate to the reality we live in.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-8-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",1f6399393b
0,"commit f85d3252ef889b102eb42756450f45c973d3cb43
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:27 2021 -0400

    scripts/qemu-ga-client: apply (most) pylint rules
    
    I'm only doing a very quick best-effort to preserve this script, to help
    keep it from breaking further. I think there are pending ideas swirling
    on the right way to implement better SDKs and better clients, and this
    script might be a handy reference for those discussions. It presents
    some interesting design problems, like static type safety when using a
    dynamic RPC mechanism.
    
    I believe it's worth preserving the effort and care that went into
    making this script by updating it to work with our current
    infrastructure. However, I am disabling the requirement for docstrings
    in this file.
    
    If you would like to help improve this script, please add docstrings
    alongside any refactors or rejuvenations you might apply at that time.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-7-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",f85d3252ef
0,"commit aff103b531dc6e44650e5d3d983f313700cb7534
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:26 2021 -0400

    scripts/qemu-ga-client: add module docstring
    
    Turn that nice usage comment into a docstring.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-6-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",aff103b531
0,"commit 0cf1a52d289d69461df0d984aa50ec61f8a21c30
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:25 2021 -0400

    scripts/qemu-ga-client: replace deprecated optparse with argparse
    
    optparse isn't supported anymore, it's from the python2 days. Replace it
    with the mostly similar argparse.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-5-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",0cf1a52d28
0,"commit e6de9ce90a67960a6477da5a5c69c19ce390ed1d
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:24 2021 -0400

    scripts/qemu-ga-client: Fix exception handling
    
    Fixes: 50d189c
    
    These error classes aren't available anymore. Fix the bitrot.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-4-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",e6de9ce90a
0,"commit e75f516ac131dbc3c82ac52ef527680c4745add3
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:23 2021 -0400

    scripts/qemu-ga-client: apply (most) flake8 rules
    
    - Line length should be < 80
    - You shouldn't perform unscoped imports except at the top of the module
    
    Notably, the sys.path hack creates problems with the import rule. This
    will be fixed later.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-3-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",e75f516ac1
0,"commit 9510e4fb6967c39871b149676e09bb7ee875bc18
Author: John Snow <jsnow@redhat.com>
Date:   Fri Jun 4 11:55:22 2021 -0400

    scripts/qemu-ga-client: apply isort rules
    
    Hint:
    > ln -s scripts/qmp/qemu-ga-client python/qemu/qmp/qemu_ga_client.py
    > cd python
    > isort qemu
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210604155532.1499282-2-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",9510e4fb69
0,"commit 176c5490724b813704bd5b083b9f5c9b857fdaad
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:19 2021 -0400

    python/qmp: add fuse command to 'qom' tools
    
    The 'fuse' command will be unavailable if 'fusepy' is not installed. It
    will simply not load and subsequently be unavailable as a subcommand.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-20-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",176c549072
0,"commit c89b38cd0a9ec852ed5504b3083ca7592d76b730
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:18 2021 -0400

    scripts/qom-fuse: add redirection shim to python/qemu/qmp/qom-fuse.py
    
    By leaving the script absent for a commit, git-blame travels to the new
    file instead of staying on the shim.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-19-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",c89b38cd0a
0,"commit 173d185de98c4ee358e5615cedcd8773719586c0
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:17 2021 -0400

    scripts/qom-fuse: move to python/qemu/qmp/qom_fuse.py
    
    Move qom-fuse over to the python package now that it passes the
    linter. Update the import paradigms so that it continues to pass in the
    context of the Python package.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210603003719.1321369-18-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",173d185de9
0,"commit c63f3b0b29f8320e77a83acd9d055e6607f02f85
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:16 2021 -0400

    python: add optional FUSE dependencies
    
    In preparation for moving qom-fuse over to the python package, we need
    some new dependencies to support it.
    
    Add an optional 'fusepy' dependency that users of the package can opt
    into with e.g. ""pip install qemu[fuse]"" which installs the requirements
    necessary to obtain the additional functionality.
    
    Add the same fusepy dependency to the 'devel' extras group --
    unfortunately I do not see a way for optional groups to imply other
    optional groups at present, so the dependency is repeated. The
    development group needs to include the full set of dependencies for the
    purpose of static analysis of all features offered by this library.
    
    Lastly, add the [fuse] extras group to tox's configuration as a
    workaround so that if a stale tox environment is found when running
    `make check-tox`, tox will know to rebuild its environments.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210603003719.1321369-17-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",c63f3b0b29
0,"commit 30ec845c599acc0616a57811316bc506a08344f2
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:15 2021 -0400

    scripts/qom-fuse: add static type hints
    
    Because fusepy does not have type hints, add some targeted warning
    suppressions.
    
    Namely, we need to allow subclassing something of an unknown type (in
    qom_fuse.py), and we need to allow missing imports (recorded against
    fuse itself) because mypy will be unable to import fusepy (even when
    installed) as it has no types nor type stubs available.
    
    Note: Until now, it was possible to run invocations like 'mypy qemu/'
    from ./python and have that work. However, these targeted suppressions
    require that you run 'mypy -p qemu/' instead. The correct, canonical
    invocation is recorded in ./python/tests/mypy.sh and all of the various
    CI invocations always use this correct form.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210603003719.1321369-16-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",30ec845c59
0,"commit 2cea7134620749b106af167322d921716ef61144
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:14 2021 -0400

    scripts/qom-fuse: ensure QOMFuse.read always returns bytes
    
    - Use FuseOSError to signal ENOENT instead of returning it
    - Wrap qom-get in str(), as we don't always know its type
    - The empty return should be b'', not ''.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-15-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",2cea713462
0,"commit 9ec8a3869480a9826ba77b480bb7ca567aa3d26b
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:13 2021 -0400

    scripts/qom-fuse: use QOMCommand.qom_list()
    
    the qom_list method provides a type-safe object that's easier to type
    check, so switch to using it.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-14-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",9ec8a38694
0,"commit 2aa101799acf45fd5e4207fbec95d2ee9507bc54
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:12 2021 -0400

    scripts/qom-fuse: Convert to QOMCommand
    
    Move qom-fuse onto the QOMCommand base established in
    python/qemu/qmp/qom_common.py. The interface doesn't change
    incompatibly, ""qom-fuse mountpoint"" still works as an invocation, and
    QMP_SOCKET is still used as the environment variable.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210603003719.1321369-13-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",2aa101799a
0,"commit 187be27c7bc66afaf8c90c3b8c302a55c8f9f7d6
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:11 2021 -0400

    scripts/qom-fuse: Add docstrings
    
    The methods inherited from fuse don't need docstrings; that's up to
    fusepy to handle.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210603003719.1321369-12-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",187be27c7b
0,"commit 7552823a36d3b99598ec53431ff43774ce11e6f2
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:10 2021 -0400

    scripts/qom-fuse: Apply pylint rules
    
    - Catch specific exceptions from QMP
    - Reraise errors with explicit context
    - method parameters should match parent's names
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-11-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",7552823a36
0,"commit d229f1c83d698ed5f605bcc2eab96e05afeddefb
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:09 2021 -0400

    python: Add 'fh' to known-good variable names
    
    fd and fh are fine: we often use these for ""file descriptor"" or ""file
    handle"" accordingly. It is rarely the case that you need to enforce a
    more semantically meaningful name beyond ""This is the file we are using
    right now.""
    
    While we're here: add comments for all of the non-standard pylint
    names. (And the underscore.)
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210603003719.1321369-10-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",d229f1c83d
0,"commit 26c1ccadc41bf32a720faf4d652eae41c7e54d00
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:08 2021 -0400

    scripts/qom-fuse: apply flake8 rules
    
    flake8 still has one warning because of the sys.path hack, but that will
    be going away by the end of this patch series.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-9-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",26c1ccadc4
0,"commit c6b7eae9b6743f017067ece3830dd8563b2350a9
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:07 2021 -0400

    scripts/qom-fuse: apply isort rules
    
    Hint: you can use symlinks to create qom_fuse.py in python/qemu/qmp/ and
    point to scripts/qom-fuse to apply the standard linting rules to this
    script.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-8-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",c6b7eae9b6
0,"commit 908ff4b29f6ff8a990cc7e895feb4ebf9cf6d2c9
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:06 2021 -0400

    scripts/qmp: redirect qom-xxx scripts to python/qemu/qmp/
    
    Redirect to the new qom scripts. These forwarders can be deleted
    eventually when there has been more time for the dust on the Python
    packaging to settle and people understand how to find these commands.
    
    Note: You can run these by setting $PYTHONPATH in your shell and then
    running ""python3 -m qemu.qmp.qom"", or you can install the qemu namespace
    package and use the ""qom"" or ""qom-set"" scripts.
    
    I've written how to install the package elsewhere, but for the sake of
    git-blame, cd to ./python, and then do:
    
    - pip3 install [--user] [-e] .
    
    --user will install to your local user install (will not work inside of
      a venv), omitting this flag installs to your system-wide packages
      (outside of a venv) or to your current virtual environment (inside the
      venv).
    
      When installing to a venv or to your system-wide packages, ""qom""
      should be in your $PATH already. If you do a user install, you may
      need to add ~/.local/bin to your $PATH if you haven't already.
    
    -e installs in editable mode: the installed package is effectively just
     a symlink to this folder; so changes to your git working tree are
     reflected in the installed package.
    
    Note: installing these packages to an environment outside a venv can be
    dangerous: Many QEMU scripts will begin to prefer the installed version
    instead of the version directly in the tree. Use with caution. editable
    mode is recommended when working outside of a venv.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-7-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",908ff4b29f
0,"commit 7c4c595f13fa9bb19d8b6a1ed328aab5469c063a
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:05 2021 -0400

    python/qmp: add qom script entry points
    
    Add the 'qom', 'qom-set', 'qom-get', 'qom-list', and 'qom-tree' scripts
    to the qemu.qmp package. When you install this package, these scripts
    will become available on your command line.
    
    (e.g. when inside of a venv, `cd python && pip install .` will add
    'qom', 'qom-set', etc to your $PATH.)
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-6-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",7c4c595f13
0,"commit c750c02891a81f07c6c90735432306bea79fac4b
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:04 2021 -0400

    python/qmp: Add qom script rewrites
    
    Inspired by qom-set, qom-get, qom-tree and qom-list; combine all four of
    those scripts into a single script.
    
    A later addition of qom-fuse as an 'extension' necessitates that some
    common features are split out and shared between them.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210603003719.1321369-5-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",c750c02891
0,"commit 587adaca55e825412e54cbc9f9f20e86a6d68a72
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:03 2021 -0400

    python/qmp: add parse_address classmethod
    
    This takes the place of qmp-shell's __get_address function. It also
    allows other utilities to share the same parser and syntax for
    specifying QMP locations.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210603003719.1321369-4-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",587adaca55
0,"commit 5d15c9b875d2102143835ac989954a59a53d2b20
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:02 2021 -0400

    python/qmp: Fix type of SocketAddrT
    
    In porting the qom tools, qmp-shell, etc; it becomes evident that this
    type is wrong.
    
    This is an integer, not a string. We didn't catch this before because
    none of QEMUMonitorProtocol's *users* happen to be checked, and the
    internal logic of this class is otherwise self-consistent. Additionally,
    mypy was not introspecting into the socket() interface to realize we
    were passing a bad type for AF_INET. Fixed now.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210603003719.1321369-3-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",5d15c9b875
0,"commit 9d0ead63bf6b89ae7170dc4238a1ddc6b8188d14
Author: John Snow <jsnow@redhat.com>
Date:   Wed Jun 2 20:37:01 2021 -0400

    python/pipenv: Update Pipfile.lock
    
    In a previous commit, I added tox to the development requirements of the
    Python library. I never bothered to add them to the Pipfile, because
    they aren't needed there. Here, I sync it anyway in its own commit so
    that when we add new packages later that the diffstats will not
    confusingly appear to pull in lots of extra packages.
    
    Ideally I could tell Pipenv simply not to install these, but it doesn't
    seem to support that, exactly. The alternative is removing Tox from the
    development requires, which I'd rather not do.
    
    The other alternative is re-specifying all of the dependencies of
    setup.cfg in the Pipfile, which I'd also rather not do.
    
    Picking what feels least-worst here.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Message-id: 20210603003719.1321369-2-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",9d0ead63bf
0,"commit bbfb7c2f350262f893642433dea66352fc168295
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:08:02 2021 +0300

    block/nbd: safer transition to receiving request
    
    req->receiving is a flag of request being in one concrete yield point
    in nbd_co_do_receive_one_chunk().
    
    Such kind of boolean flag is always better to unset before scheduling
    the coroutine, to avoid double scheduling. So, let's be more careful.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-33-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",bbfb7c2f35
0,"commit 91e0998f5ab88e575b5d1b9bc55e0d179b9224f1
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:08:01 2021 +0300

    block/nbd: add nbd_client_connected() helper
    
    We already have two similar helpers for other state. Let's add another
    one for convenience.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-32-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",91e0998f5a
0,"commit a71d597b989fd701b923f09b3c20ac4fcaa55e81
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:08:00 2021 +0300

    block/nbd: reuse nbd_co_do_establish_connection() in nbd_open()
    
    The only last step we need to reuse the function is coroutine-wrapper.
    nbd_open() may be called from non-coroutine context. So, generate the
    wrapper and use it.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-31-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",a71d597b98
0,"commit 97cf89259e4e0455c3b2742911737de5969dc0de
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:59 2021 +0300

    nbd/client-connection: add option for non-blocking connection attempt
    
    We'll need a possibility of non-blocking nbd_co_establish_connection(),
    so that it returns immediately, and it returns success only if a
    connections was previously established in background.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-30-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",97cf89259e
0,"commit 51edbf537d2cbf97c8e9defd098b95ca8a18aa8c
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:58 2021 +0300

    block/nbd: split nbd_co_do_establish_connection out of nbd_reconnect_attempt
    
    Split out the part that we want to reuse for nbd_open().
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-29-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",51edbf537d
0,"commit bb43694872c344e27d498c0980c50c7effcb448a
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:57 2021 +0300

    block-coroutine-wrapper: allow non bdrv_ prefix
    
    We are going to reuse the script to generate a nbd_ function in
    further commit. Prepare the script now.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-28-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",bb43694872
0,"commit 43cb34dede464c2e9a51ea33bc246b40db5d68d4
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:56 2021 +0300

    nbd/client-connection: return only one io channel
    
    block/nbd doesn't need underlying sioc channel anymore. So, we can
    update nbd/client-connection interface to return only one top-most io
    channel, which is more straight forward.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-27-vsementsov@virtuozzo.com>
    [eblake: squash in Vladimir's fixes for uninit usage caught by clang]
    Signed-off-by: Eric Blake <eblake@redhat.com>",43cb34dede
0,"commit 95a078ea3e4863c0d516cf19ebcb5130bc760f49
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:55 2021 +0300

    block/nbd: drop BDRVNBDState::sioc
    
    Currently sioc pointer is used just to pass from socket-connection to
    nbd negotiation. Drop the field, and use local variables instead. With
    next commit we'll update nbd/client-connection.c to behave
    appropriately (return only top-most ioc, not two channels).
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-26-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",95a078ea3e
0,"commit c2405af0e418a3f4cca0840f31161f7ac17b9697
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:54 2021 +0300

    block/nbd: don't touch s->sioc in nbd_teardown_connection()
    
    Negotiation during reconnect is now done in a thread, and s->sioc is
    not available during negotiation. Negotiation in thread will be
    cancelled by nbd_client_connection_release() called from
    nbd_clear_bdrvstate().  So, we don't need this code chunk anymore.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-25-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",c2405af0e4
0,"commit 6d2b0332d3a2d85bb37786a914c6865a4386ef87
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:53 2021 +0300

    block/nbd: use negotiation of NBDClientConnection
    
    Now that we can opt in to negotiation as part of the client connection
    thread, use that to simplify connection_co.  This is another step on
    the way to moving all reconnect code into NBDClientConnection.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-24-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",6d2b0332d3
0,"commit e9ba7788b0c4328f7123eccb60cbb68b0b62bacb
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:52 2021 +0300

    block/nbd: split nbd_handle_updated_info out of nbd_client_handshake()
    
    To be reused in the following patch.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Roman Kagan <rvkagan@yandex-team.ru>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-23-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",e9ba7788b0
0,"commit f58b2dfe3e815d0c8491b33c36622824e8a08e40
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:51 2021 +0300

    nbd/client-connection: shutdown connection on release
    
    Now, when a thread can do negotiation and retry, it may run relatively
    long. We need a mechanism to stop it, when the user is not interested
    in a result any more. So, on nbd_client_connection_release() let's
    shutdown the socket, and do not retry connection if thread is detached.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-22-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",f58b2dfe3e
0,"commit e0e67cbe58f42500e3451c46b3caba572f2a965f
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:50 2021 +0300

    nbd/client-connection: implement connection retry
    
    Add an option for a thread to retry connecting until it succeeds. We'll
    use nbd/client-connection both for reconnect and for initial connection
    in nbd_open(), so we need a possibility to use same NBDClientConnection
    instance to connect once in nbd_open() and then use retry semantics for
    reconnect.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-21-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    [eblake: grammar tweak]
    Signed-off-by: Eric Blake <eblake@redhat.com>",e0e67cbe58
0,"commit 130d49baa50655729f09efb72e77bebf09421dd7
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:49 2021 +0300

    nbd/client-connection: add possibility of negotiation
    
    Add arguments and logic to support nbd negotiation in the same thread
    after successful connection.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-20-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",130d49baa5
0,"commit e70da5ff6445bf09db55e4828c08c2a30d816137
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:48 2021 +0300

    nbd/client-connection: use QEMU_LOCK_GUARD
    
    We don't update connect_thread_func() to use QEMU_LOCK_GUARD, as it
    will get more complex critical sections logic in further commit, where
    QEMU_LOCK_GUARD doesn't help.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-19-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",e70da5ff64
0,"commit 5276c87c12f4c2a2db0bf343f6d3092816f0afc6
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Tue Jun 15 14:07:05 2021 -0500

    nbd: move connection code from block/nbd to nbd/client-connection
    
    We now have bs-independent connection API, which consists of four
    functions:
    
      nbd_client_connection_new()
      nbd_client_connection_release()
      nbd_co_establish_connection()
      nbd_co_establish_connection_cancel()
    
    Move them to a separate file together with NBDClientConnection
    structure which becomes private to the new API.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-18-vsementsov@virtuozzo.com>
    [eblake: comment tweaks]
    Signed-off-by: Eric Blake <eblake@redhat.com>",5276c87c12
0,"commit 248d4701989dbe8de1c06aa8f65ef38f289df87b
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:46 2021 +0300

    block/nbd: introduce nbd_client_connection_release()
    
    This is a last step of creating bs-independent nbd connection
    interface. With next commit we can finally move it to separate file.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-17-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",248d470198
0,"commit f68729747da6b770e895fa88fedf7997666bc735
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:45 2021 +0300

    block/nbd: introduce nbd_client_connection_new()
    
    This is a step of creating bs-independent nbd connection interface.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Roman Kagan <rvkagan@yandex-team.ru>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-16-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",f68729747d
0,"commit 90ddc64fb2b9b1d698efc6d76026e76d5fe224ce
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:44 2021 +0300

    block/nbd: rename NBDConnectThread to NBDClientConnection
    
    We are going to move the connection code to its own file, and want
    clear names and APIs first.
    
    The structure is shared between user and (possibly) several runs of
    connect-thread. So it's wrong to call it ""thread"". Let's rename to
    something more generic.
    
    Appropriately rename connect_thread and thr variables to conn.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Roman Kagan <rvkagan@yandex-team.ru>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-15-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",90ddc64fb2
0,"commit c3e77304855040ffd390cb7abaf7ec9ebb9b714c
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:43 2021 +0300

    block/nbd: make nbd_co_establish_connection_cancel() bs-independent
    
    nbd_co_establish_connection_cancel() actually needs only pointer to
    NBDConnectThread. So, make it clean.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Roman Kagan <rvkagan@yandex-team.ru>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-14-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",c3e7730485
0,"commit d33833d7af73641d26b836a40f0bc697b656859b
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:42 2021 +0300

    block/nbd: bs-independent interface for nbd_co_establish_connection()
    
    We are going to split connection code to a separate file. Now we are
    ready to give nbd_co_establish_connection() clean and bs-independent
    interface.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Roman Kagan <rvkagan@yandex-team.ru>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-13-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",d33833d7af
0,"commit b8e8a3d116d2ba0f80ff47290604ece8c6ed09ca
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:41 2021 +0300

    block/nbd: drop thr->state
    
    We don't need all these states. The code refactored to use two boolean
    variables looks simpler.
    
    While moving the comment in nbd_co_establish_connection() rework it to
    give better information. Also, we are going to move the connection code
    to separate file and mentioning drained section would be confusing.
    
    Improve also the comment in NBDConnectThread, while dropping removed
    state names from it.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-12-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    [eblake: comment tweak]
    Signed-off-by: Eric Blake <eblake@redhat.com>",b8e8a3d116
0,"commit 08ea55d0681333c8c6475a82b71f7bc946042986
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:40 2021 +0300

    block/nbd: simplify waking of nbd_co_establish_connection()
    
    Instead of managing connect_bh, bh_ctx, and wait_connect fields, we
    can use a single link to the waiting coroutine with proper mutex
    protection.
    
    So new logic is:
    
    nbd_co_establish_connection() sets wait_co under the mutex, releases
    the mutex, then yield()s.  Note that wait_co may be scheduled by the
    thread immediately after unlocking the mutex.  Still, the main thread
    (or iothread) will not reach the code for entering the coroutine until
    the yield(), so we are safe.
    
    connect_thread_func() and nbd_co_establish_connection_cancel() do
    the following to handle wait_co:
    
    Under the mutex, if thr->wait_co is not NULL, make it NULL and
    schedule it. This way, we avoid scheduling the coroutine twice.
    
    Still scheduling is a bit different:
    
    In connect_thread_func() we can just call aio_co_wake under mutex,
    after commit
       [async: the main AioContext is only ""current"" if under the BQL]
    we are sure that aio_co_wake() will not try to acquire the aio context
    and do qemu_aio_coroutine_enter() but simply schedule the coroutine by
    aio_co_schedule().
    
    nbd_co_establish_connection_cancel() will be called from non-coroutine
    context in further patch and will be able to go through
    qemu_aio_coroutine_enter() path of aio_co_wake(). So keep current
    behavior of waking the coroutine after the critical section.
    
    Also, this commit reduces the dependence of
    nbd_co_establish_connection() on the internals of bs (we now use a
    generic pointer to the coroutine, instead of direct use of
    s->connection_co).  This is a step towards splitting the connection
    API out of nbd.c.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-11-vsementsov@virtuozzo.com>
    Reviewied-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",08ea55d068
0,"commit 2def3edb4bdc6913c83b14beb0140c395e68ac17
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:39 2021 +0300

    block/nbd: BDRVNBDState: drop unused connect_err and connect_status
    
    These fields are write-only. Drop them.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Roman Kagan <rvkagan@yandex-team.ru>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-10-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",2def3edb4b
0,"commit 2a25def4be09714c543713f111813b521b2356ee
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:38 2021 +0300

    block/nbd: nbd_client_handshake(): fix leak of s->ioc
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Roman Kagan <rvkagan@yandex-team.ru>
    Message-Id: <20210610100802.5888-9-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",2a25def4be
0,"commit e8b35bf5dc8d4e98d91855a9c7b2ed905c8e6888
Author: Roman Kagan <rvkagan@yandex-team.ru>
Date:   Thu Jun 10 13:07:37 2021 +0300

    block/nbd: ensure ->connection_thread is always valid
    
    Simplify lifetime management of BDRVNBDState->connect_thread by
    delaying the possible cleanup of it until the BDRVNBDState itself goes
    away.
    
    This also reverts
     0267101af6 ""block/nbd: fix possible use after free of s->connect_thread""
    as now s->connect_thread can't be cleared until the very end.
    
    Signed-off-by: Roman Kagan <rvkagan@yandex-team.ru>
     [vsementsov: rebase, revert 0267101af6 changes]
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
     [eblake: tweak comment]
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-8-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",e8b35bf5dc
0,"commit 6cc702beac795a6de7b5f97700b140dcd9936055
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:36 2021 +0300

    block/nbd: call socket_address_parse_named_fd() in advance
    
    Detecting monitor by current coroutine works bad when we are not in
    coroutine context. And that's exactly so in nbd reconnect code, where
    qio_channel_socket_connect_sync() is called from thread.
    
    Monitor is needed only to parse named file descriptor. So, let's just
    parse it during nbd_open(), so that all further users of s->saddr don't
    need to access monitor.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-7-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",6cc702beac
0,"commit c5423704184c43cadd7b3c5ff0aea3925c5509bc
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:35 2021 +0300

    qemu-sockets: introduce socket_address_parse_named_fd()
    
    Add function that transforms named fd inside SocketAddress structure
    into number representation. This way it may be then used in a context
    where current monitor is not available.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-6-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    [eblake: comment tweak]
    Signed-off-by: Eric Blake <eblake@redhat.com>",c542370418
0,"commit fb392b548eb4c6c2b2c7689e7fc6b1d2077d4f02
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:34 2021 +0300

    block/nbd: connect_thread_func(): do qio_channel_set_delay(false)
    
    nbd_open() does it (through nbd_establish_connection()).
    Actually we lost that call on reconnect path in 1dc4718d849e1a1fe
    ""block/nbd: use non-blocking connect: fix vm hang on connect()""
    when we have introduced reconnect thread.
    
    Fixes: 1dc4718d849e1a1fe665ce5241ed79048cfa2cfc
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-5-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",fb392b548e
0,"commit bbba1c376b8b1ba5171bd14eb6bf212fa1173ddb
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:33 2021 +0300

    block/nbd: fix how state is cleared on nbd_open() failure paths
    
    We have two ""return error"" paths in nbd_open() after
    nbd_process_options(). Actually we should call nbd_clear_bdrvstate()
    on these paths. Interesting that nbd_process_options() calls
    nbd_clear_bdrvstate() by itself.
    
    Let's fix leaks and refactor things to be more obvious:
    
    - intialize yank at top of nbd_open()
    - move yank cleanup to nbd_clear_bdrvstate()
    - refactor nbd_open() so that all failure paths except for
      yank-register goes through nbd_clear_bdrvstate()
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Roman Kagan <rvkagan@yandex-team.ru>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-4-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",bbba1c376b
0,"commit 3687ad49038e13103f7382316e16dff79abddf95
Author: Roman Kagan <rvkagan@yandex-team.ru>
Date:   Thu Jun 10 13:07:32 2021 +0300

    block/nbd: fix channel object leak
    
    nbd_free_connect_thread leaks the channel object if it hasn't been
    stolen.
    
    Unref it and fix the leak.
    
    Signed-off-by: Roman Kagan <rvkagan@yandex-team.ru>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Message-Id: <20210610100802.5888-3-vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",3687ad4903
0,"commit 0e70260b65814fe7c016a63c3081ac39617294a0
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu Jun 10 13:07:31 2021 +0300

    co-queue: drop extra coroutine_fn marks
    
    qemu_co_queue_next() and qemu_co_queue_restart_all() just call
    aio_co_wake() which works well in non-coroutine context. So these
    functions can be called from non-coroutine context as well. And
    actually qemu_co_queue_restart_all() is called from
    nbd_cancel_in_flight(), which is called from non-coroutine context.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210610100802.5888-2-vsementsov@virtuozzo.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",0e70260b65
0,"commit 55159c34b8788ae00984341356d3ea4774912665
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Jun 14 13:02:14 2021 +0200

    tests: cover aio_co_enter from a worker thread without BQL taken
    
    Add a testcase for the test fixed by commit 'async: the main AioContext
    is only ""current"" if under the BQL.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210614110214.726722-1-pbonzini@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Eric Blake <eblake@redhat.com>",55159c34b8
0,"commit 5f50be9b5810293141bb53cfd0cb46e765367d56
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 9 14:22:34 2021 +0200

    async: the main AioContext is only ""current"" if under the BQL
    
    If we want to wake up a coroutine from a worker thread, aio_co_wake()
    currently does not work.  In that scenario, aio_co_wake() calls
    aio_co_enter(), but there is no current AioContext and therefore
    qemu_get_current_aio_context() returns the main thread.  aio_co_wake()
    then attempts to call aio_context_acquire() instead of going through
    aio_co_schedule().
    
    The default case of qemu_get_current_aio_context() was added to cover
    synchronous I/O started from the vCPU thread, but the main and vCPU
    threads are quite different.  The main thread is an I/O thread itself,
    only running a more complicated event loop; the vCPU thread instead
    is essentially a worker thread that occasionally calls
    qemu_mutex_lock_iothread().  It is only in those critical sections
    that it acts as if it were the home thread of the main AioContext.
    
    Therefore, this patch detaches qemu_get_current_aio_context() from
    iothreads, which is a useless complication.  The AioContext pointer
    is stored directly in the thread-local variable, including for the
    main loop.  Worker threads (including vCPU threads) optionally behave
    as temporary home threads if they have taken the big QEMU lock,
    but if that is not the case they will always schedule coroutines
    on remote threads via aio_co_schedule().
    
    With this change, the stub qemu_mutex_iothread_locked() must be changed
    from true to false.  The previous value of true was needed because the
    main thread did not have an AioContext in the thread-local variable,
    but now it does have one.
    
    Reported-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210609122234.544153-1-pbonzini@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Tested-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    [eblake: tweak commit message per Vladimir's review]
    Signed-off-by: Eric Blake <eblake@redhat.com>",5f50be9b58
0,"commit 8f521741e1280f0957ac1b873292c19219e1fb9a
Merge: 3ccf6cd0e3 d742d064c1
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 18 16:42:25 2021 +0100

    Merge remote-tracking branch 'remotes/awilliam/tags/vfio-update-20210618.0' into staging
    
    VFIO update 2021-06-18
    
     * VFIO migration documentation (Tarun Gupta)
    
     * Fix SaveVMHandler de-registration (Kunkun Jiang)
    
     * Fix vmstate change transition (Kirti Wankhede)
    
    # gpg: Signature made Fri 18 Jun 2021 16:20:34 BST
    # gpg:                using RSA key 42F6C04E540BD1A99E7B8A90239B9B6E3BB08B22
    # gpg:                issuer ""alex.williamson@redhat.com""
    # gpg: Good signature from ""Alex Williamson <alex.williamson@redhat.com>"" [full]
    # gpg:                 aka ""Alex Williamson <alex@shazbot.org>"" [full]
    # gpg:                 aka ""Alex Williamson <alwillia@redhat.com>"" [full]
    # gpg:                 aka ""Alex Williamson <alex.l.williamson@gmail.com>"" [full]
    # Primary key fingerprint: 42F6 C04E 540B D1A9 9E7B  8A90 239B 9B6E 3BB0 8B22
    
    * remotes/awilliam/tags/vfio-update-20210618.0:
      vfio/migration: Correct device state from vmstate change for savevm case
      vfio: Fix unregister SaveVMHandler in vfio_migration_finalize
      docs/devel: Add VFIO device migration documentation
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",8f521741e1
0,"commit d742d064c1f541ac8ad6541e248a97f2dc502721
Author: Kirti Wankhede <kwankhede@nvidia.com>
Date:   Wed Jun 9 00:07:21 2021 +0530

    vfio/migration: Correct device state from vmstate change for savevm case
    
    Set _SAVING flag for device state from vmstate change handler when it
    gets called from savevm.
    
    Currently State transition savevm/suspend is seen as:
        _RUNNING -> _STOP -> Stop-and-copy -> _STOP
    
    State transition savevm/suspend should be:
        _RUNNING -> Stop-and-copy -> _STOP
    
    State transition from _RUNNING to _STOP occurs from
    vfio_vmstate_change() where when vmstate changes from running to
    !running, _RUNNING flag is reset but at the same time when
    vfio_vmstate_change() is called for RUN_STATE_SAVE_VM, _SAVING bit
    should be set.
    
    Reported by: Yishai Hadas <yishaih@nvidia.com>
    Signed-off-by: Kirti Wankhede <kwankhede@nvidia.com>
    Message-Id: <1623177441-27496-1-git-send-email-kwankhede@nvidia.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>",d742d064c1
0,"commit 22fca190e25b10761925bb1eeadeda07aabf3c26
Author: Kunkun Jiang <jiangkunkun@huawei.com>
Date:   Thu May 27 20:31:01 2021 +0800

    vfio: Fix unregister SaveVMHandler in vfio_migration_finalize
    
    In the vfio_migration_init(), the SaveVMHandler is registered for
    VFIO device. But it lacks the operation of 'unregister'. It will
    lead to 'Segmentation fault (core dumped)' in
    qemu_savevm_state_setup(), if performing live migration after a
    VFIO device is hot deleted.
    
    Fixes: 7c2f5f75f94 (vfio: Register SaveVMHandlers for VFIO device)
    Reported-by: Qixin Gan <ganqixin@huawei.com>
    Signed-off-by: Kunkun Jiang <jiangkunkun@huawei.com>
    Message-Id: <20210527123101.289-1-jiangkunkun@huawei.com>
    Reviewed by: Kirti Wankhede <kwankhede@nvidia.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>",22fca190e2
0,"commit 2a5781331a08628fa5d5a0e9a5ea415ce462e707
Author: Tarun Gupta <targupta@nvidia.com>
Date:   Sun Apr 18 17:52:51 2021 +0530

    docs/devel: Add VFIO device migration documentation
    
    Document interfaces used for VFIO device migration. Added flow
    of state changes during live migration with VFIO device.
    
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Co-developed-by: Kirti Wankhede <kwankhede@nvidia.com>
    Signed-off-by: Kirti Wankhede <kwankhede@nvidia.com>
    Signed-off-by: Tarun Gupta <targupta@nvidia.com>
    Message-Id: <20210418122251.88809-1-targupta@nvidia.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>",2a5781331a
0,"commit 3ccf6cd0e3e1dfd663814640b3b18b55715d7a75
Merge: b6d73e9cb1 986bdbc6a2
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 18 09:54:42 2021 +0100

    Merge remote-tracking branch 'remotes/kraxel/tags/audio-20210617-pull-request' into staging
    
    audio: bugfix collection.
    
    # gpg: Signature made Thu 17 Jun 2021 13:40:56 BST
    # gpg:                using RSA key A0328CFFB93A17A79901FE7D4CB6D8EED3E87138
    # gpg: Good signature from ""Gerd Hoffmann (work) <kraxel@redhat.com>"" [full]
    # gpg:                 aka ""Gerd Hoffmann <gerd@kraxel.org>"" [full]
    # gpg:                 aka ""Gerd Hoffmann (private) <kraxel@gmail.com>"" [full]
    # Primary key fingerprint: A032 8CFF B93A 17A7 9901  FE7D 4CB6 D8EE D3E8 7138
    
    * remotes/kraxel/tags/audio-20210617-pull-request:
      coreaudio: Fix output stream format settings
      audio: Fix format specifications of debug logs
      hw/audio/sb16: Avoid assertion by restricting I/O sampling rate range
      jackaudio: avoid that the client name contains the word (NULL)
      audio: move code to audio/audio.c
      paaudio: remove unused stream flags
      alsaaudio: remove #ifdef DEBUG to avoid bit rot
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",3ccf6cd0e3
0,"commit 4e2f5f3a9db06e87a73eb60a7cc9754fc13596ee
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Mon Jun 7 14:58:42 2021 +0100

    scripts: helper to generate x86_64 CPU ABI compat info
    
    This script is what is used to generate the docs data table in:
    
      docs/system/cpu-models-x86-abi.csv
    
    It can be useful to run if adding new CPU models / versions and
    the csv needs updating.
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210607135843.196595-4-berrange@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",4e2f5f3a9d
0,"commit 38dec0ef76a852d10636a69fc93b21cee9a67715
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Mon Jun 7 14:58:40 2021 +0100

    docs: add a table showing x86-64 ABI compatibility levels
    
    It is useful to know which CPUs satisfy each x86-64 ABI
    compatibility level, when dealing with guest OS that require
    something newer than the baseline ABI.
    
    These ABI levels are defined in:
    
      https://gitlab.com/x86-psABIs/x86-64-ABI/
    
    and supported by GCC, Clang, glibc and more.
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210607135843.196595-2-berrange@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",38dec0ef76
0,"commit d44df1d73ce04d7f4b8f94cba5f715e2dadc998b
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Fri Apr 23 15:08:19 2021 -0500

    docs/interop/firmware.json: Add SEV-ES support
    
    Create an enum definition, '@amd-sev-es', for SEV-ES and add documention
    for the new enum. Add an example that shows some of the requirements for
    SEV-ES, including not having SMM support and the requirement for an
    X64-only build.
    
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Reviewed-by: Laszlo Ersek <lersek@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Message-Id: <b941a7ee105dfeb67607cf2d24dafcb82658b212.1619208498.git.thomas.lendacky@amd.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",d44df1d73c
0,"commit 61b7d7098cd53dd386939610d534f8bd79240881
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Fri Apr 23 15:08:18 2021 -0500

    docs: Add SEV-ES documentation to amd-memory-encryption.txt
    
    Update the amd-memory-encryption.txt file with information about SEV-ES,
    including how to launch an SEV-ES guest and some of the differences
    between SEV and SEV-ES guests in regards to launching and measuring the
    guest.
    
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Acked-by: Laszlo Ersek <lersek@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Message-Id: <fa1825a5eb0290eac4712cde75ba4c6829946eac.1619208498.git.thomas.lendacky@amd.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",61b7d7098c
0,"commit f538adeccf4554e6402fe661a0a51bcc8d6bd227
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Fri Apr 23 15:08:17 2021 -0500

    doc: Fix some mistakes in the SEV documentation
    
    Fix some spelling and grammar mistakes in the amd-memory-encryption.txt
    file. No new information added.
    
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Reviewed-by: Laszlo Ersek <lersek@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Message-Id: <a7c5ee6c056d840f46028f4a817c16a9862bdd9e.1619208498.git.thomas.lendacky@amd.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",f538adeccf
0,"commit 035d1ef26565f8f8eae058c37f5731a9ae304b96
Author: Chenyi Qiang <chenyi.qiang@intel.com>
Date:   Fri May 21 12:38:20 2021 +0800

    i386: Add ratelimit for bus locks acquired in guest
    
    A bus lock is acquired through either split locked access to writeback
    (WB) memory or any locked access to non-WB memory. It is typically >1000
    cycles slower than an atomic operation within a cache and can also
    disrupts performance on other cores.
    
    Virtual Machines can exploit bus locks to degrade the performance of
    system. To address this kind of performance DOS attack coming from the
    VMs, bus lock VM exit is introduced in KVM and it can report the bus
    locks detected in guest. If enabled in KVM, it would exit to the
    userspace to let the user enforce throttling policies once bus locks
    acquired in VMs.
    
    The availability of bus lock VM exit can be detected through the
    KVM_CAP_X86_BUS_LOCK_EXIT. The returned bitmap contains the potential
    policies supported by KVM. The field KVM_BUS_LOCK_DETECTION_EXIT in
    bitmap is the only supported strategy at present. It indicates that KVM
    will exit to userspace to handle the bus locks.
    
    This patch adds a ratelimit on the bus locks acquired in guest as a
    mitigation policy.
    
    Introduce a new field ""bus_lock_ratelimit"" to record the limited speed
    of bus locks in the target VM. The user can specify it through the
    ""bus-lock-ratelimit"" as a machine property. In current implementation,
    the default value of the speed is 0 per second, which means no
    restrictions on the bus locks.
    
    As for ratelimit on detected bus locks, simply set the ratelimit
    interval to 1s and restrict the quota of bus lock occurence to the value
    of ""bus_lock_ratelimit"". A potential alternative is to introduce the
    time slice as a property which can help the user achieve more precise
    control.
    
    The detail of bus lock VM exit can be found in spec:
    https://software.intel.com/content/www/us/en/develop/download/intel-architecture-instruction-set-extensions-programming-reference.html
    
    Signed-off-by: Chenyi Qiang <chenyi.qiang@intel.com>
    Message-Id: <20210521043820.29678-1-chenyi.qiang@intel.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",035d1ef265
0,"commit 278f064e452468d66ee15c3f453826e697ec6832
Author: Eduardo Habkost <ehabkost@redhat.com>
Date:   Thu Jun 3 15:15:41 2021 -0400

    Update Linux headers to 5.13-rc4
    
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210603191541.2862286-1-ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",278f064e45
0,"commit b6d73e9cb1c620960ca7d864ee0725f8a55fe778
Merge: 18e53dff93 f51f8e3591
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 15:43:26 2021 +0100

    Merge remote-tracking branch 'remotes/bonzini-gitlab/tags/for-upstream' into staging
    
    * avoid deprecation warnings for SASL on macOS 10.11 or newer
    * fix -readconfig when config blocks have an id (like [chardev ""qmp""])
    * Error* initialization fixes
    * Improvements to ESP emulation (Mark)
    * Allow creating noreserve memory backends (David)
    * Improvements to query-memdev (David)
    * Bump compiler to C11 (Richard)
    * First round of SVM fixes from GSoC project (Lara)
    
    # gpg: Signature made Wed 16 Jun 2021 16:37:49 BST
    # gpg:                using RSA key F13338574B662389866C7682BFFBD25F78C7AE83
    # gpg:                issuer ""pbonzini@redhat.com""
    # gpg: Good signature from ""Paolo Bonzini <bonzini@gnu.org>"" [full]
    # gpg:                 aka ""Paolo Bonzini <pbonzini@redhat.com>"" [full]
    # Primary key fingerprint: 46F5 9FBD 57D6 12E7 BFD4  E2F7 7E15 100C CD36 69B1
    #      Subkey fingerprint: F133 3857 4B66 2389 866C  7682 BFFB D25F 78C7 AE83
    
    * remotes/bonzini-gitlab/tags/for-upstream: (45 commits)
      configure: Remove probe for _Static_assert
      qemu/compiler: Remove QEMU_GENERIC
      include/qemu/lockable: Use _Generic instead of QEMU_GENERIC
      util: Use unique type for QemuRecMutex in thread-posix.h
      util: Pass file+line to qemu_rec_mutex_unlock_impl
      util: Use real functions for thread-posix QemuRecMutex
      softfloat: Use _Generic instead of QEMU_GENERIC
      configure: Use -std=gnu11
      target/i386: Added Intercept CR0 writes check
      target/i386: Added consistency checks for CR0
      target/i386: Added consistency checks for VMRUN intercept and ASID
      target/i386: Refactored intercept checks into cpu_svm_has_intercept
      configure: map x32 to cpu_family x86_64 for meson
      hmp: Print ""reserve"" property of memory backends with ""info memdev""
      qmp: Include ""reserve"" property of memory backends
      hmp: Print ""share"" property of memory backends with ""info memdev""
      qmp: Include ""share"" property of memory backends
      qmp: Clarify memory backend properties returned via query-memdev
      hostmem: Wire up RAM_NORESERVE via ""reserve"" property
      util/mmap-alloc: Support RAM_NORESERVE via MAP_NORESERVE under Linux
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",b6d73e9cb1
0,"commit 0e8876970401dee2055c1eb1c23f92f2e57d73ad
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Mon Jun 14 15:42:45 2021 +0100

    linux-user/trace-events: fix minor typo in format string
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-Id: <20210614144245.17660-1-alex.bennee@linaro.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",0e88769704
0,"commit 986bdbc6a29c4d7ef125299c5013783e30dc2cae
Author: Akihiko Odaki <akihiko.odaki@gmail.com>
Date:   Wed Jun 16 23:17:21 2021 +0900

    coreaudio: Fix output stream format settings
    
    Before commit 7d6948cd98cf5ad8a3458a4ce7fdbcb79bcd1212, it was coded to
    retrieve the initial output stream format settings, modify the frame
    rate, and set again. However, I removed a frame rate modification code by
    mistake in the commit. It also assumes the initial output stream format
    is consistent with what QEMU expects, but that expectation is not in the
    code, which makes it harder to understand and will lead to breakage if
    the initial settings change.
    
    This change explicitly sets all of the output stream settings to solve
    these problems.
    
    Signed-off-by: Akihiko Odaki <akihiko.odaki@gmail.com>
    Message-Id: <20210616141721.54091-1-akihiko.odaki@gmail.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",986bdbc6a2
0,"commit 0c29b786e6b5276d43be2be255a8323c628ec790
Author: Akihiko Odaki <akihiko.odaki@gmail.com>
Date:   Wed Jun 16 23:14:11 2021 +0900

    audio: Fix format specifications of debug logs
    
    Signed-off-by: Akihiko Odaki <akihiko.odaki@gmail.com>
    Message-id: 20210616141411.53892-1-akihiko.odaki@gmail.com
    Message-Id: <20210616141411.53892-1-akihiko.odaki@gmail.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",0c29b786e6
0,"commit a2cd86a94a881b38a7d8bb67c61920ab3b23e82d
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed Jun 16 12:43:49 2021 +0200

    hw/audio/sb16: Avoid assertion by restricting I/O sampling rate range
    
    While the SB16 seems to work up to 48000 Hz, the ""Sound Blaster Series
    Hardware Programming Guide"" limit the sampling range from 4000 Hz to
    44100 Hz (Section 3-9, 3-10: Digitized Sound I/O Programming, tables
    3-2 and 3-3).
    
    Later, section 6-15 (DSP Commands) is more specific regarding the 41h /
    42h registers (Set digitized sound output sampling rate):
    
      Valid sampling rates range from 5000 to 45000 Hz inclusive.
    
    There is no comment regarding error handling if the register is filled
    with an out-of-range value.  (See also section 3-28 ""8-bit or 16-bit
    Auto-initialize Transfer""). Assume limits are enforced in hardware.
    
    This fixes triggering an assertion in audio_calloc():
    
      #1 abort
      #2 audio_bug audio/audio.c:119:9
      #3 audio_calloc audio/audio.c:154:9
      #4 audio_pcm_sw_alloc_resources_out audio/audio_template.h:116:15
      #5 audio_pcm_sw_init_out audio/audio_template.h:175:11
      #6 audio_pcm_create_voice_pair_out audio/audio_template.h:410:9
      #7 AUD_open_out audio/audio_template.h:503:14
      #8 continue_dma8 hw/audio/sb16.c:216:20
      #9 dma_cmd8 hw/audio/sb16.c:276:5
      #10 command hw/audio/sb16.c:0
      #11 dsp_write hw/audio/sb16.c:949:13
      #12 portio_write softmmu/ioport.c:205:13
      #13 memory_region_write_accessor softmmu/memory.c:491:5
      #14 access_with_adjusted_size softmmu/memory.c:552:18
      #15 memory_region_dispatch_write softmmu/memory.c:0:13
      #16 flatview_write_continue softmmu/physmem.c:2759:23
      #17 flatview_write softmmu/physmem.c:2799:14
      #18 address_space_write softmmu/physmem.c:2891:18
      #19 cpu_outw softmmu/ioport.c:70:5
    
    [*] http://www.baudline.com/solutions/full_duplex/sb16_pci/index.html
    
    OSS-Fuzz Report: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29174
    
    Fixes: 85571bc7415 (""audio merge (malc)"")
    Buglink: https://bugs.launchpad.net/bugs/1910603
    Tested-by: Qiang Liu <cyruscyliu@gmail.com>
    Reviewed-by: Qiang Liu <cyruscyliu@gmail.com>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-Id: <20210616104349.2398060-1-f4bug@amsat.org>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",a2cd86a94a
0,"commit 2833d697b9a418e2b9735e38ad4b33ae86f84739
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Mon May 17 21:46:04 2021 +0200

    jackaudio: avoid that the client name contains the word (NULL)
    
    Currently with jackaudio client name and qemu guest name unset,
    the JACK client names are out-(NULL) and in-(NULL). These names
    are user visible in the patch bay. Replace the function call to
    qemu_get_vm_name() with a call to audio_application_name() which
    replaces NULL with ""qemu"" to have more descriptive names.
    
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Message-Id: <20210517194604.2545-4-vr_qemu@t-online.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",2833d697b9
0,"commit 37a54d054f5aac43cb5721c68954b8b76d0db12d
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Mon May 17 21:46:03 2021 +0200

    audio: move code to audio/audio.c
    
    Move the code to generate the pa_context_new() application name
    argument to a function in audio/audio.c. The new function
    audio_application_name() will also be used in the jackaudio
    backend.
    
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Message-Id: <20210517194604.2545-3-vr_qemu@t-online.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",37a54d054f
0,"commit 50db82d84ce24e893932ecb1aa90cc9c5560fc91
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Mon May 17 21:46:02 2021 +0200

    paaudio: remove unused stream flags
    
    In current code there are no calls to pa_stream_get_latency()
    or pa_stream_get_time() to receive latency or time information.
    
    Remove the flags PA_STREAM_INTERPOLATE_TIMING and
    PA_STREAM_AUTO_TIMING_UPDATE which instruct PulseAudio to
    calculate this information in regular intervals.
    
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Message-Id: <20210517194604.2545-2-vr_qemu@t-online.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",50db82d84c
0,"commit 243011896ad2503e515b4fed746402e651b8e520
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Mon May 17 21:46:01 2021 +0200

    alsaaudio: remove #ifdef DEBUG to avoid bit rot
    
    Merge the #ifdef DEBUG code with the if statement a few lines
    above to avoid bit rot.
    
    Suggested-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Message-Id: <20210517194604.2545-1-vr_qemu@t-online.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",243011896a
0,"commit 18e53dff939898c6dd00d206a3c2f5cd3d6669db
Merge: 38848ce565 c7a7cb5692
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 17 10:42:57 2021 +0100

    Merge remote-tracking branch 'remotes/rth-gitlab/tags/pull-c11-20210615' into staging
    
    Change to -std=gnu11.
    Replace QEMU_GENERIC with _Generic.
    Remove configure detect of _Static_assert.
    
    # gpg: Signature made Wed 16 Jun 2021 02:32:32 BST
    # gpg:                using RSA key 7A481E78868B4DB6A85A05C064DF38E8AF7E215F
    # gpg:                issuer ""richard.henderson@linaro.org""
    # gpg: Good signature from ""Richard Henderson <richard.henderson@linaro.org>"" [full]
    # Primary key fingerprint: 7A48 1E78 868B 4DB6 A85A  05C0 64DF 38E8 AF7E 215F
    
    * remotes/rth-gitlab/tags/pull-c11-20210615:
      configure: Remove probe for _Static_assert
      qemu/compiler: Remove QEMU_GENERIC
      include/qemu/lockable: Use _Generic instead of QEMU_GENERIC
      util: Use unique type for QemuRecMutex in thread-posix.h
      util: Pass file+line to qemu_rec_mutex_unlock_impl
      util: Use real functions for thread-posix QemuRecMutex
      softfloat: Use _Generic instead of QEMU_GENERIC
      configure: Use -std=gnu11
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",18e53dff93
0,"commit 38848ce565849e5b867a5e08022b3c755039c11a
Merge: e3897b75fd 703235a303
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Wed Jun 16 17:02:30 2021 +0100

    Merge remote-tracking branch 'remotes/pmaydell/tags/pull-target-arm-20210616' into staging
    
    target-arm queue:
     * hw/intc/arm_gicv3_cpuif: Tolerate spurious EOIR writes
     * handle some UNALLOCATED decode cases correctly rather
       than asserting
     * hw: virt: consider hw_compat_6_0
     * hw/arm: add quanta-gbs-bmc machine
     * hw/intc/armv7m_nvic: Remove stale comment
     * target/arm: Fix mte page crossing test
     * hw/arm: quanta-q71l add pca954x muxes
     * target/arm: First few parts of MVE support
    
    # gpg: Signature made Wed 16 Jun 2021 14:34:49 BST
    # gpg:                using RSA key E1A5C593CD419DE28E8315CF3C2525ED14360CDE
    # gpg:                issuer ""peter.maydell@linaro.org""
    # gpg: Good signature from ""Peter Maydell <peter.maydell@linaro.org>"" [ultimate]
    # gpg:                 aka ""Peter Maydell <pmaydell@gmail.com>"" [ultimate]
    # gpg:                 aka ""Peter Maydell <pmaydell@chiark.greenend.org.uk>"" [ultimate]
    # Primary key fingerprint: E1A5 C593 CD41 9DE2 8E83  15CF 3C25 25ED 1436 0CDE
    
    * remotes/pmaydell/tags/pull-target-arm-20210616: (25 commits)
      include/qemu/int128.h: Add function to create Int128 from int64_t
      bitops.h: Provide hswap32(), hswap64(), wswap64() swapping operations
      target/arm: Move expand_pred_b() data to vec_helper.c
      target/arm: Add framework for MVE decode
      target/arm: Implement MVE LETP insn
      target/arm: Implement MVE DLSTP
      target/arm: Implement MVE WLSTP insn
      target/arm: Implement MVE LCTP
      target/arm: Let vfp_access_check() handle late NOCP checks
      target/arm: Add handling for PSR.ECI/ICI
      target/arm: Handle VPR semantics in existing code
      target/arm: Enable FPSCR.QC bit for MVE
      target/arm: Provide and use H8 and H1_8 macros
      hw/arm: quanta-q71l add pca954x muxes
      hw/arm: gsj add pca9548
      hw/arm: gsj add i2c comments
      target/arm: Fix mte page crossing test
      hw/intc/armv7m_nvic: Remove stale comment
      hw/arm: quanta-gbs-bmc add i2c comments
      hw/arm: add quanta-gbs-bmc machine
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",38848ce565
0,"commit 703235a303d6862a7e3f5c6aa9eff7471cb138b2
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:43 2021 +0100

    include/qemu/int128.h: Add function to create Int128 from int64_t
    
    int128_make64() creates an Int128 from an unsigned 64 bit value; add
    a function int128_makes64() creating an Int128 from a signed 64 bit
    value.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-id: 20210614151007.4545-34-peter.maydell@linaro.org",703235a303
0,"commit dbcf6f9367a6a4af05b18cf0d7badf7677f403c4
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:26 2021 +0100

    bitops.h: Provide hswap32(), hswap64(), wswap64() swapping operations
    
    Currently the ARM SVE helper code defines locally some utility
    functions for swapping 16-bit halfwords within 32-bit or 64-bit
    values and for swapping 32-bit words within 64-bit values,
    parallel to the byte-swapping bswap16/32/64 functions.
    
    We want these also for the ARM MVE code, and they're potentially
    generally useful for other targets, so move them to bitops.h.
    (We don't put them in bswap.h with the bswap* functions because
    they are implemented in terms of the rotate operations also
    defined in bitops.h, and including bitops.h from bswap.h seems
    better avoided.)
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-id: 20210614151007.4545-17-peter.maydell@linaro.org",dbcf6f9367
0,"commit 77f96148f3f6c4106a2a3cee8146690f954fd6cd
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:23 2021 +0100

    target/arm: Move expand_pred_b() data to vec_helper.c
    
    For MVE, we want to re-use the large data table from expand_pred_b().
    Move the data table to vec_helper.c so it is no longer in an SVE
    specific source file.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-14-peter.maydell@linaro.org",77f96148f3
0,"commit 6390eed45cab462320ceb4cbfc2cbd1c1552ed00
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:20 2021 +0100

    target/arm: Add framework for MVE decode
    
    Add the framework for decoding MVE insns, with the necessary new
    files and the meson.build rules, but no actual content yet.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-11-peter.maydell@linaro.org",6390eed45c
0,"commit a454ea1e6d40bbd4632e4e66de90e802ae47a68e
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:19 2021 +0100

    target/arm: Implement MVE LETP insn
    
    Implement the MVE LETP insn.  This is like the existing LE loop-end
    insn, but it must perform an FPU-enabled check, and on loop-exit it
    resets LTPSIZE to 4.
    
    To accommodate the requirement to do something on loop-exit, we drop
    the use of condlabel and instead manage both the TB exits manually,
    in the same way we already do in trans_WLS().
    
    The other MVE-specific change to the LE insn is that we must raise an
    INVSTATE UsageFault insn if LTPSIZE is not 4.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-10-peter.maydell@linaro.org",a454ea1e6d
0,"commit 40a36f003c0375bb9d347eeb3f60bac7bbeb82c3
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:18 2021 +0100

    target/arm: Implement MVE DLSTP
    
    Implement the MVE DLSTP insn; this is like the existing DLS
    insn, except that it must do an FPU access check and it
    sets LTPSIZE to the value specified in the insn.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-9-peter.maydell@linaro.org",40a36f003c
0,"commit 6822abfdf8b382be4fc84066fa1087e5fef81360
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:17 2021 +0100

    target/arm: Implement MVE WLSTP insn
    
    Implement the MVE WLSTP insn; this is like the existing WLS insn,
    except that it specifies a size value which is used to set
    FPSCR.LTPSIZE.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-8-peter.maydell@linaro.org",6822abfdf8
0,"commit 76c32d721da1a69999eb2d3cd5f1d272ca26f98e
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:16 2021 +0100

    target/arm: Implement MVE LCTP
    
    Implement the MVE LCTP instruction.
    
    We put its decode and implementation with the other
    low-overhead-branch insns because although it is only present if MVE
    is implemented it is logically in the same group as the other LOB
    insns.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-7-peter.maydell@linaro.org",76c32d721d
0,"commit 9a486856e9173af190eaefdf1080db82bd04b536
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:15 2021 +0100

    target/arm: Let vfp_access_check() handle late NOCP checks
    
    In commit a3494d4671797c we reworked the M-profile handling of its
    checks for when the NOCP exception should be raised because the FPU
    is disabled, so that (in line with the architecture) the NOCP check
    is done early over a large range of the encoding space, and takes
    precedence over UNDEF exceptions.  As part of this, we removed the
    code from full_vfp_access_check() which raised an exception there for
    M-profile with the FPU disabled, because it was no longer reachable.
    
    For MVE, some instructions which are outside the ""coprocessor space""
    region of the encoding space must nonetheless do ""is the FPU enabled""
    checks and possibly raise a NOCP exception.  (In particular this
    covers the MVE-specific low-overhead branch insns LCTP, DLSTP and
    WLSTP.) To support these insns, reinstate the code in
    full_vfp_access_check(), so that their trans functions can call
    vfp_access_check() and get the correct behaviour.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-6-peter.maydell@linaro.org",9a486856e9
0,"commit 5138bd0143cc87c91e41f26fab2a5ba96e62ce49
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:14 2021 +0100

    target/arm: Add handling for PSR.ECI/ICI
    
    On A-profile, PSR bits [15:10][26:25] are always the IT state bits.
    On M-profile, some of the reserved encodings of the IT state are used
    to instead indicate partial progress through instructions that were
    interrupted partway through by an exception and can be resumed.
    
    These resumable instructions fall into two categories:
    
    (1) load/store multiple instructions, where these bits are called
    ""ICI"" and specify the register in the ldm/stm list where execution
    should resume.  (Specifically: LDM, STM, VLDM, VSTM, VLLDM, VLSTM,
    CLRM, VSCCLRM.)
    
    (2) MVE instructions subject to beatwise execution, where these bits
    are called ""ECI"" and specify which beats in this and possibly also
    the following MVE insn have been executed.
    
    There are also a few insns (LE, LETP, and BKPT) which do not use the
    ICI/ECI bits but must leave them alone.
    
    Otherwise, we should raise an INVSTATE UsageFault for any attempt to
    execute an insn with non-zero ICI/ECI bits.
    
    So far we have been able to ignore ECI/ICI, because the architecture
    allows the IMPDEF choice of ""always restart load/store multiple from
    the beginning regardless of ICI state"", so the only thing we have
    been missing is that we don't raise the INVSTATE fault for bad guest
    code.  However, MVE requires that we honour ECI bits and do not
    rexecute beats of an insn that have already been executed.
    
    Add the support in the decoder for handling ECI/ICI:
     * identify the ECI/ICI case in the CONDEXEC TB flags
     * when a load/store multiple insn succeeds, it updates the ECI/ICI
       state (both in DisasContext and in the CPU state), and sets a flag
       to say that the ECI/ICI state was handled
     * if we find that the insn we just decoded did not handle the
       ECI/ICI state, we delete all the code that we just generated for
       it and instead emit the code to raise the INVFAULT.  This allows
       us to avoid having to update every non-MVE non-LDM/STM insn to
       make it check for ""is ECI/ICI set?"".
    
    We continue with our existing IMPDEF choice of not caring about the
    ICI state for the load/store multiples and simply restarting them
    from the beginning.  Because we don't allow interrupts in the middle
    of an insn, the only way we would see this state is if the guest set
    ICI manually on return from an exception handler, so it's a corner
    case which doesn't merit optimisation.
    
    ICI update for LDM/STM is simple -- it always zeroes the state.  ECI
    update for MVE beatwise insns will be a little more complex, since
    the ECI state may include information for the following insn.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-5-peter.maydell@linaro.org",5138bd0143
0,"commit 375256a8460ae7310b053b52fe579c8832e73d10
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:13 2021 +0100

    target/arm: Handle VPR semantics in existing code
    
    When MVE is supported, the VPR register has a place on the exception
    stack frame in a previously reserved slot just above the FPSCR.
    It must also be zeroed in various situations when we invalidate
    FPU context.
    
    Update the code which handles the stack frames (exception entry and
    exit code, VLLDM, and VLSTM) to save/restore VPR.
    
    Update code which invalidates FP registers (mostly also exception
    entry and exit code, but also VSCCLRM and the code in
    full_vfp_access_check() that corresponds to the ExecuteFPCheck()
    pseudocode) to zero VPR.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-4-peter.maydell@linaro.org",375256a846
0,"commit c485ce2c491a6e5d66da1d1555ecd474b450db98
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:12 2021 +0100

    target/arm: Enable FPSCR.QC bit for MVE
    
    MVE has an FPSCR.QC bit similar to the A-profile Neon one; when MVE
    is implemented make the bit writeable, both in the generic ""load and
    store FPSCR"" helper functions and in the code for handling the NZCVQC
    sysreg which we had previously left as ""TODO when we implement MVE"".
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-3-peter.maydell@linaro.org",c485ce2c49
0,"commit 6e802db3c418e522b25a16fd74ea6d98fc2a1480
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 16:09:11 2021 +0100

    target/arm: Provide and use H8 and H1_8 macros
    
    Currently we provide Hn and H1_n macros for accessing the correct
    data within arrays of vector elements of size 1, 2 and 4, accounting
    for host endianness.  We don't provide any macros for elements of
    size 8 because there the host endianness doesn't matter.  However,
    this does result in awkwardness where we need to pass empty arguments
    to macros, because checkpatch complains about them.  The empty
    argument is a little confusing for humans to read as well.
    
    Add H8() and H1_8() macros and use them where we were previously
    passing empty arguments to macros.
    
    Suggested-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614151007.4545-2-peter.maydell@linaro.org
    Message-id: 20210610132505.5827-1-peter.maydell@linaro.org",6e802db3c4
0,"commit 3ec75e39e67d69fe56731606c0c03921889a3019
Author: Patrick Venture <venture@google.com>
Date:   Tue Jun 8 13:25:22 2021 -0700

    hw/arm: quanta-q71l add pca954x muxes
    
    Adds the pca954x muxes expected.
    
    Tested: Booted quanta-q71l image to userspace.
    Signed-off-by: Patrick Venture <venture@google.com>
    Reviewed-by: Hao Wu <wuhaotsh@google.com>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Message-id: 20210608202522.2677850-4-venture@google.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",3ec75e39e6
0,"commit 6229659ec83e979545194c296dd1afc5cd7b7310
Author: Patrick Venture <venture@google.com>
Date:   Tue Jun 8 13:25:21 2021 -0700

    hw/arm: gsj add pca9548
    
    Tested: Quanta-gsj firmware booted.
    
    i2c /dev entries driver
    I2C init bus 1 freq 100000
    I2C init bus 2 freq 100000
    I2C init bus 3 freq 100000
    I2C init bus 4 freq 100000
    I2C init bus 8 freq 100000
    I2C init bus 9 freq 100000
    at24 9-0055: 8192 byte 24c64 EEPROM, writable, 1 bytes/write
    I2C init bus 10 freq 100000
    at24 10-0055: 8192 byte 24c64 EEPROM, writable, 1 bytes/write
    I2C init bus 12 freq 100000
    I2C init bus 15 freq 100000
    i2c i2c-15: Added multiplexed i2c bus 16
    i2c i2c-15: Added multiplexed i2c bus 17
    i2c i2c-15: Added multiplexed i2c bus 18
    i2c i2c-15: Added multiplexed i2c bus 19
    i2c i2c-15: Added multiplexed i2c bus 20
    i2c i2c-15: Added multiplexed i2c bus 21
    i2c i2c-15: Added multiplexed i2c bus 22
    i2c i2c-15: Added multiplexed i2c bus 23
    pca954x 15-0075: registered 8 multiplexed busses for I2C switch pca9548
    
    Signed-off-by: Patrick Venture <venture@google.com>
    Reviewed-by: Hao Wu <wuhaotsh@google.com>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Message-id: 20210608202522.2677850-3-venture@google.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",6229659ec8
0,"commit 319466876b33dc98aa2b9e59deab126c2236bd3e
Author: Patrick Venture <venture@google.com>
Date:   Tue Jun 8 13:25:20 2021 -0700

    hw/arm: gsj add i2c comments
    
    Adds comments to the board init to identify missing i2c devices.
    
    Signed-off-by: Patrick Venture <venture@google.com>
    Reviewed-by: Hao Wu <wuhaotsh@google.com>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Message-id: 20210608202522.2677850-2-venture@google.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",319466876b
0,"commit d3327a38cda104dd292105b6b9d140f2158209f9
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Jun 12 12:57:07 2021 -0700

    target/arm: Fix mte page crossing test
    
    The test was off-by-one, because tag_last points to the
    last byte of the tag to check, thus tag_last - prev_page
    will equal TARGET_PAGE_SIZE when we use the first byte
    of the next page.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/403
    Reported-by: Peter Collingbourne <pcc@google.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210612195707.840217-1-richard.henderson@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",d3327a38cd
0,"commit e3897b75fd2ac8c4bfda95d60309cb6414da8000
Merge: 1dd259ae24 4fa7b4cc50
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Wed Jun 16 14:32:43 2021 +0100

    Merge remote-tracking branch 'remotes/kraxel/tags/vga-20210615-pull-request' into staging
    
    vga: fixes for stdvga, vhost-user-gpu and virtio-gpu.
    
    # gpg: Signature made Tue 15 Jun 2021 18:40:11 BST
    # gpg:                using RSA key A0328CFFB93A17A79901FE7D4CB6D8EED3E87138
    # gpg: Good signature from ""Gerd Hoffmann (work) <kraxel@redhat.com>"" [full]
    # gpg:                 aka ""Gerd Hoffmann <gerd@kraxel.org>"" [full]
    # gpg:                 aka ""Gerd Hoffmann (private) <kraxel@gmail.com>"" [full]
    # Primary key fingerprint: A032 8CFF B93A 17A7 9901  FE7D 4CB6 D8EE D3E8 7138
    
    * remotes/kraxel/tags/vga-20210615-pull-request:
      virtio-gpu: move scanout_id sanity check
      vhost-user-gpu: reorder free calls.
      vga: Allow writing VBE_DISPI_ID5 to ID register
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",e3897b75fd
0,"commit f51f8e3591393f7f274e1435ac22188e2dafdfe8
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:43 2021 -0700

    configure: Remove probe for _Static_assert
    
    _Static_assert is part of C11, which is now required.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210614233143.1221879-9-richard.henderson@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",f51f8e3591
0,"commit de51d8cbf0f9a9745ac02fb07e02063b7dfe35b9
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:42 2021 -0700

    qemu/compiler: Remove QEMU_GENERIC
    
    All previous users now use C11 _Generic.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-8-richard.henderson@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",de51d8cbf0
0,"commit 23c9b7e0f3ddc727fc664b616a3d73a24adef9d0
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:41 2021 -0700

    include/qemu/lockable: Use _Generic instead of QEMU_GENERIC
    
    This is both more and less complicated than our expansion
    using __builtin_choose_expr and __builtin_types_compatible_p.
    
    The expansion through QEMU_MAKE_LOCKABLE_ doesn't work because
    we're not emumerating all of the types within the same _Generic,
    which results in errors about unhandled cases.  We must also
    handle void* explicitly, so that the NULL constant can be used.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Tested-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-7-richard.henderson@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",23c9b7e0f3
0,"commit dc41737844dbec4736855e128dce0da20c082f65
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:40 2021 -0700

    util: Use unique type for QemuRecMutex in thread-posix.h
    
    We will shortly convert lockable.h to _Generic, and we cannot
    have two compatible types in the same expansion.  Wrap QemuMutex
    in a struct, and unwrap in qemu-thread-posix.c.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210614233143.1221879-6-richard.henderson@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",dc41737844
0,"commit d3192460bffdf31e830a9ef1261b587259e7ebd7
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:39 2021 -0700

    util: Pass file+line to qemu_rec_mutex_unlock_impl
    
    Create macros for file+line expansion in qemu_rec_mutex_unlock
    like we have for qemu_mutex_unlock.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210614233143.1221879-5-richard.henderson@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",d3192460bf
0,"commit 5d63bd5aad0d80f9c3901c0948354ee3fb7da9bc
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:38 2021 -0700

    util: Use real functions for thread-posix QemuRecMutex
    
    Move the declarations from thread-win32.h into thread.h
    and remove the macro redirection from thread-posix.h.
    This will be required by following cleanups.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210614233143.1221879-4-richard.henderson@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",5d63bd5aad
0,"commit 52a80715799122c0a31e68c66a10ca901f6454ab
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:37 2021 -0700

    softfloat: Use _Generic instead of QEMU_GENERIC
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210614233143.1221879-3-richard.henderson@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",52a8071579
0,"commit 8a9d3d564093dbd5a7339085406e840893944d21
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:36 2021 -0700

    configure: Use -std=gnu11
    
    Now that the minimum gcc version is 7.5, we can use C11.
    This will allow lots of cleanups to the code, currently
    hidden behind macros in include/qemu/compiler.h.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210614233143.1221879-2-richard.henderson@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",8a9d3d5640
0,"commit e0375ec760d3c49163eb16f272349dc16f13e59c
Author: Lara Lazier <laramglazier@gmail.com>
Date:   Wed Jun 16 14:39:07 2021 +0200

    target/i386: Added Intercept CR0 writes check
    
    When the selective CR0 write intercept is set, all writes to bits in
    CR0 other than CR0.TS or CR0.MP cause a VMEXIT.
    
    Signed-off-by: Lara Lazier <laramglazier@gmail.com>
    Message-Id: <20210616123907.17765-5-laramglazier@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",e0375ec760
0,"commit 498df2a7470e09d6cb0204f45eeb30d7ae796465
Author: Lara Lazier <laramglazier@gmail.com>
Date:   Wed Jun 16 14:39:06 2021 +0200

    target/i386: Added consistency checks for CR0
    
    The combination of unset CD and set NW bit in CR0 is illegal.
    CR0[63:32] are also reserved and need to be zero.
    (AMD64 Architecture Programmer's Manual, V2, 15.5)
    
    Signed-off-by: Lara Lazier <laramglazier@gmail.com>
    Message-Id: <20210616123907.17765-4-laramglazier@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",498df2a747
0,"commit 7eb54ca95d369135f2570c10daf1a41a1f8a6b9c
Author: Lara Lazier <laramglazier@gmail.com>
Date:   Wed Jun 16 14:39:05 2021 +0200

    target/i386: Added consistency checks for VMRUN intercept and ASID
    
    Zero VMRUN intercept and ASID should cause an immediate VMEXIT
    during the consistency checks performed by VMRUN.
    (AMD64 Architecture Programmer's Manual, V2, 15.5)
    
    Signed-off-by: Lara Lazier <laramglazier@gmail.com>
    Message-Id: <20210616123907.17765-3-laramglazier@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",7eb54ca95d
0,"commit 813c6459ee774ee48496653cd530658b733b79cd
Author: Lara Lazier <laramglazier@gmail.com>
Date:   Wed Jun 16 14:39:04 2021 +0200

    target/i386: Refactored intercept checks into cpu_svm_has_intercept
    
    Added cpu_svm_has_intercept to reduce duplication when checking the
    corresponding intercept bit outside of cpu_svm_check_intercept_param
    
    Signed-off-by: Lara Lazier <laramglazier@gmail.com>
    Message-Id: <20210616123907.17765-2-laramglazier@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",813c6459ee
0,"commit c7a7cb5692690ad621b6eb2d1c7256907ff45d67
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:43 2021 -0700

    configure: Remove probe for _Static_assert
    
    _Static_assert is part of C11, which is now required.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-9-richard.henderson@linaro.org>",c7a7cb5692
0,"commit 8bae43fa1a3d4d9d5aa589984235db6865f5a347
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:42 2021 -0700

    qemu/compiler: Remove QEMU_GENERIC
    
    All previous users now use C11 _Generic.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-8-richard.henderson@linaro.org>",8bae43fa1a
0,"commit 4ffb0681d7de34a5286f390a19fb48709107903b
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:41 2021 -0700

    include/qemu/lockable: Use _Generic instead of QEMU_GENERIC
    
    This is both more and less complicated than our expansion
    using __builtin_choose_expr and __builtin_types_compatible_p.
    
    The expansion through QEMU_MAKE_LOCKABLE_ doesn't work because
    we're not emumerating all of the types within the same _Generic,
    which results in errors about unhandled cases.  We must also
    handle void* explicitly, so that the NULL constant can be used.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Tested-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-7-richard.henderson@linaro.org>",4ffb0681d7
0,"commit 6c98635ed7772e63b98944ab972c1eef8e498da3
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:40 2021 -0700

    util: Use unique type for QemuRecMutex in thread-posix.h
    
    We will shortly convert lockable.h to _Generic, and we cannot
    have two compatible types in the same expansion.  Wrap QemuMutex
    in a struct, and unwrap in qemu-thread-posix.c.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-6-richard.henderson@linaro.org>",6c98635ed7
0,"commit 9c75bae717eae4c139cbd8b6a713cff01fe718f0
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:39 2021 -0700

    util: Pass file+line to qemu_rec_mutex_unlock_impl
    
    Create macros for file+line expansion in qemu_rec_mutex_unlock
    like we have for qemu_mutex_unlock.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-5-richard.henderson@linaro.org>",9c75bae717
0,"commit 4b193bb798f31dde78b2ec4ba299de6d962db8a4
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:38 2021 -0700

    util: Use real functions for thread-posix QemuRecMutex
    
    Move the declarations from thread-win32.h into thread.h
    and remove the macro redirection from thread-posix.h.
    This will be required by following cleanups.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-4-richard.henderson@linaro.org>",4b193bb798
0,"commit 6c06aca03678e72ed05aa0762d0935c81f06bfcc
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:37 2021 -0700

    softfloat: Use _Generic instead of QEMU_GENERIC
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-3-richard.henderson@linaro.org>",6c06aca036
0,"commit d22797ce36a388214dfc03b49d3609a334a52ff7
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:31:36 2021 -0700

    configure: Use -std=gnu11
    
    Now that the minimum gcc version is 7.5, we can use C11.
    This will allow lots of cleanups to the code, currently
    hidden behind macros in include/qemu/compiler.h.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210614233143.1221879-2-richard.henderson@linaro.org>",d22797ce36
0,"commit f8bb7e1c25b3d9c55975ca0f428f03d1049f2b06
Author: David Michael <fedora.dm0@gmail.com>
Date:   Wed Jun 9 08:28:39 2021 -0400

    configure: map x32 to cpu_family x86_64 for meson
    
    The meson.build file defines supported_cpus which does not contain
    x32, and x32 is not one of meson's stable built-in values:
    https://mesonbuild.com/Reference-tables.html#cpu-families
    
    Signed-off-by: David Michael <fedora.dm0@gmail.com>
    Message-Id: <878s3jrzm0.fsf@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",f8bb7e1c25
0,"commit baa014e3b92a12a6037c7525ee1a169ab7ec0302
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:28 2021 +0200

    hmp: Print ""reserve"" property of memory backends with ""info memdev""
    
    Let's print the new property.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Eric Blake <eblake@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-16-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",baa014e3b9
0,"commit 69647f9d51795ebea09eef05b5b2d14ffb835baf
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:27 2021 +0200

    qmp: Include ""reserve"" property of memory backends
    
    Let's include the new property. Instead of relying on CONFIG_LINUX,
    let's try to unconditionally grab the property and treat errors as
    ""does not exist"".
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Cc: Eric Blake <eblake@redhat.com>
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-15-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",69647f9d51
0,"commit 7428e7ba15cbc2a1a801ea2697f5f47fe1153381
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:26 2021 +0200

    hmp: Print ""share"" property of memory backends with ""info memdev""
    
    Let's print the property.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Eric Blake <eblake@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-14-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",7428e7ba15
0,"commit d300fc54a48dcdbdd7c06873c3b9941f05c7c6ae
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:25 2021 +0200

    qmp: Include ""share"" property of memory backends
    
    Let's include the property, which can be helpful when debugging,
    for example, to spot misuse of MAP_PRIVATE which can result in some ugly
    corner cases (e.g., double-memory consumption on shmem).
    
    Use the same description we also use for describing the property.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Cc: Eric Blake <eblake@redhat.com>
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-13-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",d300fc54a4
0,"commit 157cfaf9b21c90a7c874ce80c4c1c9b1187ad244
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:24 2021 +0200

    qmp: Clarify memory backend properties returned via query-memdev
    
    We return information on the currently configured memory backends and
    don't configure them, so decribe what the currently set properties
    express.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Suggested-by: Markus Armbruster <armbru@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Cc: Eric Blake <eblake@redhat.com>
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-12-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",157cfaf9b2
0,"commit 9181fb7043edcf096e0ae426cc3fb6f669c7fcb5
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:23 2021 +0200

    hostmem: Wire up RAM_NORESERVE via ""reserve"" property
    
    Let's provide a way to control the use of RAM_NORESERVE via memory
    backends using the ""reserve"" property which defaults to true (old
    behavior).
    
    Only Linux currently supports clearing the flag (and support is checked at
    runtime, depending on the setting of ""/proc/sys/vm/overcommit_memory"").
    Windows and other POSIX systems will bail out with ""reserve=false"".
    
    The target use case is virtio-mem, which dynamically exposes memory
    inside a large, sparse memory area to the VM. This essentially allows
    avoiding to set ""/proc/sys/vm/overcommit_memory == 0"") when using
    virtio-mem and also supporting hugetlbfs in the future.
    
    As really only Linux implements RAM_NORESERVE right now, let's expose
    the property only with CONFIG_LINUX. Setting the property to ""false""
    will then only fail in corner cases -- for example on very old kernels
    or when memory overcommit was completely disabled by the admin.
    
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Eric Blake <eblake@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-11-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",9181fb7043
0,"commit d94e0bc9ef7848f69550a80e7be6d4de68856e46
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:22 2021 +0200

    util/mmap-alloc: Support RAM_NORESERVE via MAP_NORESERVE under Linux
    
    Let's support RAM_NORESERVE via MAP_NORESERVE on Linux. The flag has no
    effect on most shared mappings - except for hugetlbfs and anonymous memory.
    
    Linux man page:
      ""MAP_NORESERVE: Do not reserve swap space for this mapping. When swap
      space is reserved, one has the guarantee that it is possible to modify
      the mapping. When swap space is not reserved one might get SIGSEGV
      upon a write if no physical memory is available. See also the discussion
      of the file /proc/sys/vm/overcommit_memory in proc(5). In kernels before
      2.6, this flag had effect only for private writable mappings.""
    
    Note that the ""guarantee"" part is wrong with memory overcommit in Linux.
    
    Also, in Linux hugetlbfs is treated differently - we configure reservation
    of huge pages from the pool, not reservation of swap space (huge pages
    cannot be swapped).
    
    The rough behavior is [1]:
    a) !Hugetlbfs:
    
      1) Without MAP_NORESERVE *or* with memory overcommit under Linux
         disabled (""/proc/sys/vm/overcommit_memory == 2""), the following
         accounting/reservation happens:
          For a file backed map
           SHARED or READ-only - 0 cost (the file is the map not swap)
           PRIVATE WRITABLE - size of mapping per instance
    
          For an anonymous or /dev/zero map
           SHARED   - size of mapping
           PRIVATE READ-only - 0 cost (but of little use)
           PRIVATE WRITABLE - size of mapping per instance
    
      2) With MAP_NORESERVE, no accounting/reservation happens.
    
    b) Hugetlbfs:
    
      1) Without MAP_NORESERVE, huge pages are reserved.
    
      2) With MAP_NORESERVE, no huge pages are reserved.
    
    Note: With ""/proc/sys/vm/overcommit_memory == 0"", we were already able
    to configure it for !hugetlbfs globally; this toggle now allows
    configuring it more fine-grained, not for the whole system.
    
    The target use case is virtio-mem, which dynamically exposes memory
    inside a large, sparse memory area to the VM.
    
    [1] https://www.kernel.org/doc/Documentation/vm/overcommit-accounting
    
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-10-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",d94e0bc9ef
0,"commit 8dbe22c6868b8a5efd1df3d0c5150524fabe61ff
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:21 2021 +0200

    memory: Introduce RAM_NORESERVE and wire it up in qemu_ram_mmap()
    
    Let's introduce RAM_NORESERVE, allowing mmap'ing with MAP_NORESERVE. The
    new flag has the following semantics:
    
    ""
    RAM is mmap-ed with MAP_NORESERVE. When set, reserving swap space (or huge
    pages if applicable) is skipped: will bail out if not supported. When not
    set, the OS will do the reservation, if supported for the memory type.
    ""
    
    Allow passing it into:
    - memory_region_init_ram_nomigrate()
    - memory_region_init_resizeable_ram()
    - memory_region_init_ram_from_file()
    
    ... and teach qemu_ram_mmap() and qemu_anon_ram_alloc() about the flag.
    Bail out if the flag is not supported, which is the case right now for
    both, POSIX and win32. We will add Linux support next and allow specifying
    RAM_NORESERVE via memory backends.
    
    The target use case is virtio-mem, which dynamically exposes memory
    inside a large, sparse memory area to the VM.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-9-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",8dbe22c686
0,"commit b444f5c079fdb8019d2c59ffa6b67069e857f4e1
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:20 2021 +0200

    util/mmap-alloc: Pass flags instead of separate bools to qemu_ram_mmap()
    
    Let's pass flags instead of bools to prepare for passing other flags and
    update the documentation of qemu_ram_mmap(). Introduce new QEMU_MAP_
    flags that abstract the mmap() PROT_ and MAP_ flag handling and simplify
    it.
    
    We expose only flags that are currently supported by qemu_ram_mmap().
    Maybe, we'll see qemu_mmap() in the future as well that can implement these
    flags.
    
    Note: We don't use MAP_ flags as some flags (e.g., MAP_SYNC) are only
    defined for some systems and we want to always be able to identify
    these flags reliably inside qemu_ram_mmap() -- for example, to properly
    warn when some future flags are not available or effective on a system.
    Also, this way we can simplify PROT_ handling as well.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-8-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",b444f5c079
0,"commit ebef62d0e527d4a021f94a405fb38db263f3c4a5
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:19 2021 +0200

    softmmu/memory: Pass ram_flags to qemu_ram_alloc() and qemu_ram_alloc_internal()
    
    Let's pass ram_flags to qemu_ram_alloc() and qemu_ram_alloc_internal(),
    preparing for passing additional flags.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-7-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",ebef62d0e5
0,"commit 7f863cba4d8d35adacd513cba634dc0dd08d7904
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:18 2021 +0200

    softmmu/memory: Pass ram_flags to memory_region_init_ram_shared_nomigrate()
    
    Let's forward ram_flags instead, renaming
    memory_region_init_ram_shared_nomigrate() into
    memory_region_init_ram_flags_nomigrate().
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-6-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",7f863cba4d
0,"commit d5015b80134047013eeec10000df5ce2014ee114
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:17 2021 +0200

    softmmu/memory: Pass ram_flags to qemu_ram_alloc_from_fd()
    
    Let's pass in ram flags just like we do with qemu_ram_alloc_from_file(),
    to clean up and prepare for more flags.
    
    Simplify the documentation of passed ram flags: Looking at our
    documentation of RAM_SHARED and RAM_PMEM is sufficient, no need to be
    repetitive.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-5-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",d5015b8013
0,"commit d01cbf82ce748955e622712356d8f56bc762ba9d
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:16 2021 +0200

    util/mmap-alloc: Factor out activating of memory to mmap_activate()
    
    We want to activate memory within a reserved memory region, to make it
    accessible. Let's factor that out.
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Acked-by: Murilo Opsfelder Araujo <muriloo@linux.ibm.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-4-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",d01cbf82ce
0,"commit 01c26ad6affae8c00279f5cc8e1af4d6aac004ce
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:15 2021 +0200

    util/mmap-alloc: Factor out reserving of a memory region to mmap_reserve()
    
    We want to reserve a memory region without actually populating memory.
    Let's factor that out.
    
    Reviewed-by: Igor Kotrasinski <i.kotrasinsk@partner.samsung.com>
    Acked-by: Murilo Opsfelder Araujo <muriloo@linux.ibm.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-3-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",01c26ad6af
0,"commit adad0b3ae8446acef0670efaa1e835ba37fca4bc
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 10 13:43:14 2021 +0200

    util/mmap-alloc: Factor out calculation of the pagesize for the guard page
    
    Let's factor out calculating the size of the guard page and rename the
    variable to make it clearer that this pagesize only applies to the
    guard page.
    
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Acked-by: Murilo Opsfelder Araujo <muriloo@linux.ibm.com>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com> for memory backend and machine core
    Cc: Igor Kotrasinski <i.kotrasinsk@partner.samsung.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210510114328.21835-2-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",adad0b3ae8
0,"commit dbb92eea3857ffeb770d006ad0306e408d33dd62
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Apr 6 10:01:26 2021 +0200

    softmmu/physmem: Fix qemu_ram_remap() to handle shared anonymous memory
    
    RAM_SHARED now also properly indicates shared anonymous memory. Let's check
    that flag for anonymous memory as well, to restore the proper mapping.
    
    Fixes: 06329ccecfa0 (""mem: add share parameter to memory-backend-ram"")
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210406080126.24010-4-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",dbb92eea38
0,"commit cdfa56c551bb48f286cfe1f2daa1083d333ee45d
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Apr 6 10:01:25 2021 +0200

    softmmu/physmem: Fix ram_block_discard_range() to handle shared anonymous memory
    
    We can create shared anonymous memory via
        ""-object memory-backend-ram,share=on,...""
    which is, for example, required by PVRDMA for mremap() to work.
    
    Shared anonymous memory is weird, though. Instead of MADV_DONTNEED, we
    have to use MADV_REMOVE: MADV_DONTNEED will only remove / zap all
    relevant page table entries of the current process, the backend storage
    will not get removed, resulting in no reduced memory consumption and
    a repopulation of previous content on next access.
    
    Shared anonymous memory is internally really just shmem, but without a
    fd exposed. As we cannot use fallocate() without the fd to discard the
    backing storage, MADV_REMOVE gets the same job done without a fd as
    documented in ""man 2 madvise"". Removing backing storage implicitly
    invalidates all page table entries with relevant mappings - an additional
    MADV_DONTNEED is not required.
    
    Fixes: 06329ccecfa0 (""mem: add share parameter to memory-backend-ram"")
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210406080126.24010-3-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",cdfa56c551
0,"commit 1dd259ae24a26d8a987ab83aefb5c04dbe5f4b2a
Merge: 1ea06abcee caff255a54
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue Jun 15 16:33:05 2021 +0100

    Merge remote-tracking branch 'remotes/stefanberger/tags/pull-tpm-2021-06-15-1' into staging
    
    Merge tpm 2021/06/15 v1
    
    # gpg: Signature made Tue 15 Jun 2021 16:09:31 BST
    # gpg:                using RSA key B818B9CADF9089C2D5CEC66B75AD65802A0B4211
    # gpg: Good signature from ""Stefan Berger <stefanb@linux.vnet.ibm.com>"" [unknown]
    # gpg: WARNING: This key is not certified with a trusted signature!
    # gpg:          There is no indication that the signature belongs to the owner.
    # Primary key fingerprint: B818 B9CA DF90 89C2 D5CE  C66B 75AD 6580 2A0B 4211
    
    * remotes/stefanberger/tags/pull-tpm-2021-06-15-1:
      tpm: Return QMP error when TPM is disabled in build
      sysemu: Make TPM structures inaccessible if CONFIG_TPM is not defined
      acpi: Eliminate all TPM related code if CONFIG_TPM is not set
      arm: Eliminate all TPM related code if CONFIG_TPM is not set
      i386: Eliminate all TPM related code if CONFIG_TPM is not set
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",1dd259ae24
0,"commit a25c84c7e0ac00c026afa28fbbfa044e12fe0b1a
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 17:12:43 2021 +0100

    hw/intc/armv7m_nvic: Remove stale comment
    
    In commit da6d674e509f0939b we split the NVIC code out from the GIC.
    This allowed us to specify the NVIC's default value for the num-irq
    property (64) in the usual way in its property list, and we deleted
    the previous hack where we updated the value in the state struct in
    the instance init function.  Remove a stale comment about that hack
    which we forgot to delete at that time.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210614161243.14211-1-peter.maydell@linaro.org",a25c84c7e0
0,"commit 1c7f3e248e0ac8fc53d1d40d7ef8c9852fefed8c
Author: Patrick Venture <venture@google.com>
Date:   Tue Jun 8 12:36:05 2021 -0700

    hw/arm: quanta-gbs-bmc add i2c comments
    
    Add a comment and i2c method that describes the board layout.
    
    Tested: firmware booted to userspace.
    Signed-off-by: Patrick Venture <venture@google.com>
    Reviewed-by: Brandon Kim <brandonkim@google.com>
    Reviewed-by: Hao Wu <wuhaotsh@google.com>
    Message-id: 20210608193605.2611114-3-venture@google.com
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",1c7f3e248e
0,"commit a8b3ddde6c756059c00663224c1ad9835d30eae5
Author: Patrick Venture <venture@google.com>
Date:   Tue Jun 8 12:36:04 2021 -0700

    hw/arm: add quanta-gbs-bmc machine
    
    Adds initial quanta-gbs-bmc machine support.
    
    Tested: Boots to userspace.
    Signed-off-by: Patrick Venture <venture@google.com>
    Reviewed-by: Brandon Kim <brandonkim@google.com>
    Reviewed-by: Hao Wu <wuhaotsh@google.com>
    Message-id: 20210608193605.2611114-2-venture@google.com
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",a8b3ddde6c
0,"commit 75228f0522be9708c227c4572b8a1851c39300a7
Author: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date:   Thu Jun 10 20:34:59 2021 +0200

    hw: virt: consider hw_compat_6_0
    
    virt-6.0 must consider hw_compat_6_0.
    
    Fixes: da7e13c00b59 (""hw: add compat machines for 6.1"")
    Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Message-id: 20210610183500.54207-1-xypron.glpk@gmx.de
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",75228f0522
0,"commit 475d696af7edd74779a2ac2245496b20d4625fdf
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:34:06 2021 +0100

    target/arm: Diagnose UNALLOCATED in disas_simd_three_reg_same_fp16
    
    This fprintf+assert has been in place since the beginning.
    It is after to the fp_access_check, so we need to move the
    check up.  Fold that in to the pairwise filter.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-id: 20210604183506.916654-4-richard.henderson@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",475d696af7
0,"commit 0af4d13b3114a87e53cb9e2ee0c5588c513f4b1a
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:34:06 2021 +0100

    target/arm: Remove fprintf from disas_simd_mod_imm
    
    The default of this switch is truly unreachable.
    The switch selector is 3 bits, and all 8 cases are present.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-id: 20210604183506.916654-3-richard.henderson@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",0af4d13b31
0,"commit cd39e773e00bf98ab41e2ffaaeab7a00a3f68bd1
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 14 16:34:06 2021 +0100

    target/arm: Diagnose UNALLOCATED in disas_simd_two_reg_misc_fp16
    
    This fprintf+assert has been in place since the beginning.
    It is prior to the fp_access_check, so we're still good to
    raise sigill here.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/381
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-id: 20210604183506.916654-2-richard.henderson@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",cd39e773e0
0,"commit 96a664d05c238ea1b64af2394b58e956fe0afe26
Author: Jean-Philippe Brucker <jean-philippe@linaro.org>
Date:   Mon Jun 14 16:34:05 2021 +0100

    hw/intc/arm_gicv3_cpuif: Tolerate spurious EOIR writes
    
    Commit 382c7160d1cd (""hw/intc/arm_gicv3_cpuif: Fix EOIR write access
    check logic"") added an assert_not_reached() if the guest writes the EOIR
    register while no interrupt is active.
    
    It turns out some software does this: EDK2, in
    GicV3ExitBootServicesEvent(), unconditionally write EOIR for all
    interrupts that it manages. This now causes QEMU to abort when running
    UEFI on a VM with GICv3. Although it is UNPREDICTABLE behavior and EDK2
    does need fixing, the punishment seems a little harsh, especially since
    icc_eoir_write() already tolerates writes of nonexistent interrupt
    numbers. Display a guest error and tolerate spurious EOIR writes.
    
    Fixes: 382c7160d1cd (""hw/intc/arm_gicv3_cpuif: Fix EOIR write access check logic"")
    Signed-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Tested-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 20210604130352.1887560-1-jean-philippe@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",96a664d05c
0,"commit 7ce18ca0257dac6e3ac92c8bc3d610abbf14bcce
Author: David Hildenbrand <david@redhat.com>
Date:   Tue Apr 6 10:01:24 2021 +0200

    softmmu/physmem: Mark shared anonymous memory RAM_SHARED
    
    Let's drop the ""shared"" parameter from ram_block_add() and properly
    store it in the flags of the ram block instead, such that
    qemu_ram_is_shared() properly succeeds on all ram blocks that were mapped
    MAP_SHARED.
    
    We'll use this information next to fix some cases with shared anonymous
    memory.
    
    Reviewed-by: Igor Kotrasinski <i.kotrasinsk@partner.samsung.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210406080126.24010-2-david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",7ce18ca025
0,"commit 4eb86065603400fe27c17a346985a97b489b55d4
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Jun 11 13:38:58 2021 +0200

    esp: store lun coming from the MESSAGE OUT phase
    
    The LUN is selected with an IDENTIFY message, and persists
    until the next message out phase.  Instead of passing it to
    do_busid_cmd, store it in ESPState.  Because do_cmd can simply
    skip the message out phase if cmdfifo_cdb_offset is zero, it
    can now be used for the S without ATN cases as well.
    
    Reviewed-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Tested-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",4eb8606560
0,"commit 0bcd5a18940e1c1e3350b93cfadcdc6b58ca1c0e
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Sun Jun 13 11:26:14 2021 +0100

    esp: fix migration version check in esp_is_version_5()
    
    Commit 4e78f3bf35 ""esp: defer command completion interrupt on incoming data
    transfers"" added a version check for use with VMSTATE_*_TEST macros to allow
    migration from older QEMU versions. Unfortunately the version check fails to
    work in its current form since if the VMStateDescription version_id is
    incremented, the test returns false and so the fields are not included in the
    outgoing migration stream.
    
    Change the version check to use >= rather == to ensure that migration works
    correctly when the ESPState VMStateDescription has version_id > 5.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Fixes: 4e78f3bf35 (""esp: defer command completion interrupt on incoming data transfers"")
    Message-Id: <20210613102614.5438-1-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",0bcd5a1894
0,"commit c348458f357784629c36a6eb1493c0c0c33b74e7
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Wed May 19 11:08:03 2021 +0100

    esp: correctly accumulate extended messages for PDMA
    
    Commit 799d90d818 ""esp: transition to message out phase after SATN and stop
    command"" added logic to correctly handle extended messages for DMA requests
    but not for PDMA requests.
    
    Apply the same logic in esp_do_dma() to do_dma_pdma_cb() so that extended
    messages terminated with a PDMA request are accumulated correctly. This allows
    the ESP device to respond correctly to the SDTR negotiation initiated by the
    NetBSD ESP driver without causing errors and timeouts on boot.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Message-Id: <20210519100803.10293-6-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",c348458f35
0,"commit 35579b523cf8f441da12f968ce5dcf6ae0bfbfea
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Wed May 19 11:08:02 2021 +0100

    esp: revert 75ef849696 ""esp: correctly fill bus id with requested lun""
    
    This commit from nearly 10 years ago is now broken due to the improvements
    in esp emulation (or perhaps was never correct).  It shows up as a bug
    in detecting the CDROM drive under MacOS. The error is caused by the
    MacOS CDROM driver sending this CDB with an ""S without ATN"" command and
    without DMA:
    
        0x12 0x00 0x00 0x00 0x05 0x00 (INQUIRY)
    
    This is a valid INQUIRY command, however with this logic present the 3rd
    byte (0x0) is copied over the 1st byte (0x12) which silently converts the
    INQUIRY command to a TEST UNIT READY command before passing it to the
    QEMU SCSI layer.  Since the TEST UNIT READY command has a zero length
    response the MacOS CDROM driver never receives a response and assumes
    the CDROM is not present.
    
    The logic was to ignore the IDENTIFY byte and copy the LUN over from
    the CDB, which did store the LUN in bits 5-7 of the second byte in
    olden times.  This however is all obsolete, so just drop the code.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Message-Id: <20210519100803.10293-5-mark.cave-ayland@ilande.co.uk>
    [Tweaked commit message. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",35579b523c
0,"commit e62a959afd2b1a13b27dda9d03f10c7feb36aa9b
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Wed May 19 11:08:01 2021 +0100

    esp: ensure PDMA write transfers are flushed from the FIFO to the target immediately
    
    After each PDMA write transfer the MacOS CDROM driver waits until the FIFO is empty
    (i.e. its contents have been written out to the SCSI bus) by polling the FIFO count
    register until it reads 0. This doesn't work with the current PDMA write
    implementation which waits until either the FIFO is full or the transfer is complete
    before invoking the PDMA callback to process the FIFO contents.
    
    Change the PDMA write transfer logic so that the PDMA callback is invoked after each
    PDMA write to transfer the FIFO contents to the target buffer immediately, and hence
    avoid getting stuck in the FIFO count register polling loop.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Message-Id: <20210519100803.10293-4-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",e62a959afd
0,"commit 6ef2cabc7c4231207cfbac326853c0242d9c4617
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Wed May 19 11:08:00 2021 +0100

    esp: handle non-DMA transfers from the target one byte at a time
    
    The initial implementation of non-DMA transfers was based upon analysis of traces
    from the MacOS toolbox ROM for handling unaligned reads but missed one key
    aspect - during a non-DMA transfer from the target, the bus service interrupt
    should be raised for every single byte received from the bus and not just at either
    the end of the transfer or when the FIFO is full.
    
    Adjust the non-DMA code accordingly so that esp_do_nodma() is called for every byte
    received from the target. This also includes special handling for managing the change
    from DATA IN to STATUS phase as this needs to occur when the final byte is read out
    from the FIFO, and not at the end of the transfer of the last byte into the FIFO.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Message-Id: <20210519100803.10293-3-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",6ef2cabc7c
0,"commit 880d3089f1c667d7c84730ba9e9a2518220f7caf
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Wed May 19 11:07:59 2021 +0100

    esp: allow non-DMA callback in esp_transfer_data() initial transfer
    
    The current implementation only resumes DMA transfers when incoming data is
    received from the target device, but this is also required for non-DMA transfers
    with the next set of non-DMA changes.
    
    Rather than duplicate the DMA/non-DMA dispatch logic in the initial transfer
    section, update the code so that the initial transfer section can just
    fallthrough to the main DMA/non-DMA dispatch logic.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Message-Id: <20210519100803.10293-2-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",880d3089f1
0,"commit af947a3d853a235943681a00f07f3081f5143cc3
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Tue May 18 22:25:11 2021 +0100

    esp: only set ESP_RSEQ at the start of the select sequence
    
    When processing a command to select a target and send a CDB, the ESP device
    maintains a sequence step register so that if an error occurs the host can
    determine which part of the selection/CDB submission sequence failed.
    
    The old Linux 2.6 driver is really pedantic here: it checks the sequence step
    register even if a command succeeds and complains loudly on the console if the
    sequence step register doesn't match the expected bus phase and interrupt flags.
    
    This reason this mismatch occurs is because the ESP emulation currently doesn't
    update the bus phase until the next TI (Transfer Information) command and so the
    cleared sequence step register is considered invalid for the stale bus phase.
    
    Normally this isn't an issue as the host only checks the sequence step register
    if an error occurs but the old Linux 2.6 driver does this in several places
    causing a large stream of ""esp0: STEP_ASEL for tgt 0"" messages to appear on the
    console during the boot process.
    
    Fix this by not clearing the sequence step register when reading the interrupt
    register and clearing the DMA status, so the guest sees a valid sequence step
    and bus phase combination at the end of the command phase. No other change is
    required since the sequence step register is correctly updated throughout the
    selection/CDB submission sequence once one of the select commands is issued.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Fixes: 1b9e48a5bd (""esp: implement non-DMA transfers in PDMA mode"")
    Message-Id: <20210518212511.21688-3-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",af947a3d85
0,"commit cf1a7a9b3721544aaa3e43d111eb383c30d71a62
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Tue May 18 22:25:10 2021 +0100

    esp: only assert INTR_DC interrupt flag if selection fails
    
    The datasheet sequence tables confirm that when a target selection fails, only
    the INTR_DC interrupt flag should be asserted.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Fixes: cf47a41e05 (""esp: latch individual bits in ESP_RINTR register"")
    Message-Id: <20210518212511.21688-2-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",cf1a7a9b37
0,"commit 6e1da3d305499d3907f3c7f6638243e2e09b5085
Author: Peng Liang <liangpeng10@huawei.com>
Date:   Thu Jun 10 21:17:29 2021 +0800

    runstate: Initialize Error * to NULL
    
    Based on the description of error_setg(), the local variable err in
    qemu_init_subsystems() should be initialized to NULL.
    
    Fixes: efd7ab22fb (""vl: extract qemu_init_subsystems"")
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Peng Liang <liangpeng10@huawei.com>
    Message-Id: <20210610131729.3906565-1-liangpeng10@huawei.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",6e1da3d305
0,"commit 06b80795ee25d23e69747b2cb435003c6db2a6ab
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Thu Dec 17 18:56:12 2020 +0200

    block/scsi: correctly emulate the VPD block limits page
    
    When the device doesn't support the VPD block limits page, we emulate it even
    for SCSI passthrough.
    
    As a part of the emulation we need to add it to the 'Supported VPD Pages'
    
    The code that does this adds it to the page, but it doesn't increase the length
    of the data to be copied to the guest, thus the guest never sees the VPD block
    limits page as supported.
    
    Bump the transfer size by 1 in this case.
    
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Message-Id: <20201217165612.942849-6-mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",06b80795ee
0,"commit e7d85d955a7a3405934a104f35228aae1d338a6d
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Jun 9 14:34:35 2021 +0200

    qemu-config: use qemu_opts_from_qdict
    
    Using qemu_opts_absorb_qdict, and then checking for any leftover options,
    is redundant because there is already a function that does the same,
    qemu_opts_from_qdict.  qemu_opts_from_qdict consumes the whole dictionary
    and therefore can just return an error message if an option fails to validate.
    
    This also fixes a bug, because the ""id"" entry was retrieved in
    qemu_config_do_parse and then left there by qemu_opts_absorb_qdict.
    As a result, it was reported as an unrecognized option.
    
    Reported-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Fixes: 3770141139 (""qemu-config: parse configuration files to a QDict"")
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",e7d85d955a
0,"commit 38f71349c7c4969bc14da4da1c70b8cc4078d596
Author: Zhenzhong Duan <zhenzhong.duan@intel.com>
Date:   Thu Jun 10 16:47:41 2021 +0800

    vl: Fix an assert failure in error path
    
    Based on the description of error_setg(), the local variable err in
    qemu_maybe_daemonize() should be initialized to NULL.
    
    Without fix, the uninitialized *errp triggers assert failure which
    doesn't show much valuable information.
    
    Before the fix:
    qemu-system-x86_64: ../util/error.c:59: error_setv: Assertion `*errp == NULL' failed.
    
    After fix:
    qemu-system-x86_64: cannot create PID file: Cannot open pid file: Permission denied
    
    Signed-off-by: Zhenzhong Duan <zhenzhong.duan@intel.com>
    Message-Id: <20210610084741.456260-1-zhenzhong.duan@intel.com>
    Cc: qemu-stable@nongnu.org
    Fixes: 0546c0609c (""vl: split various early command line options to a separate function"", 2020-12-10)
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",38f71349c7
0,"commit b65310ab34cbada47a5570c94d6f8f5efd39d171
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri Jun 4 14:09:15 2021 +0200

    vnc: avoid deprecation warnings for SASL on OS X
    
    Apple has deprecated sasl.h functions in OS X 10.11.  Therefore,
    all files that use SASL API need to disable -Wdeprecated-declarations.
    Remove the only use that is outside vnc-auth-sasl.c and add the
    relevant #pragma GCC diagnostic there.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210604120915.286195-1-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",b65310ab34
0,"commit caff255a546d12530cf7c28e60690cd0e65851fd
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue Jun 15 16:21:21 2021 +0200

    tpm: Return QMP error when TPM is disabled in build
    
    When the management layer queries a binary built using --disable-tpm
    for TPM devices, it gets confused by getting empty responses:
    
      { ""execute"": ""query-tpm"" }
      {
          ""return"": [
          ]
      }
      { ""execute"": ""query-tpm-types"" }
      {
          ""return"": [
          ]
      }
      { ""execute"": ""query-tpm-models"" }
      {
          ""return"": [
          ]
      }
    
    To make it clearer by returning an error:
    - Make the TPM QAPI schema conditional
      All of tpm.json is now 'if': 'defined(CONFIG_TPM)'.
    - Adapt the HMP command
    - Remove stubs which became unnecessary
    
    The management layer now gets a 'CommandNotFound' error:
    
      { ""execute"": ""query-tpm"" }
      {
          ""error"": {
              ""class"": ""CommandNotFound"",
              ""desc"": ""The command query-tpm has not been found""
          }
      }
    
    Suggested-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>",caff255a54
0,"commit e542b71805dc4b7827e6c2f00a1170a61843345e
Author: Stefan Berger <stefanb@linux.vnet.ibm.com>
Date:   Tue Jun 15 16:21:20 2021 +0200

    sysemu: Make TPM structures inaccessible if CONFIG_TPM is not defined
    
    Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Tested-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210614191335.1968807-5-stefanb@linux.ibm.com>
    [PMD: Remove tpm_init() / tpm_cleanup() stubs]
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>",e542b71805
0,"commit 295f7dcb609e02d8902180e48ffa590bea531d7e
Author: Stefan Berger <stefanb@linux.vnet.ibm.com>
Date:   Tue Jun 15 16:21:19 2021 +0200

    acpi: Eliminate all TPM related code if CONFIG_TPM is not set
    
    Cc: M: Michael S. Tsirkin <mst@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Tested-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210614191335.1968807-4-stefanb@linux.ibm.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>",295f7dcb60
0,"commit f50be48a7b64905ca8556fa5ca18beb11004fa4a
Author: Stefan Berger <stefanb@linux.vnet.ibm.com>
Date:   Tue Jun 15 16:21:18 2021 +0200

    arm: Eliminate all TPM related code if CONFIG_TPM is not set
    
    Peter Maydell <peter.maydell@linaro.org>
    
    Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Tested-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210614191335.1968807-3-stefanb@linux.ibm.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>",f50be48a7b
0,"commit 11fb99e6f48ca51364e070bb3cd365680edee90c
Author: Stefan Berger <stefanb@linux.vnet.ibm.com>
Date:   Tue Jun 15 16:21:17 2021 +0200

    i386: Eliminate all TPM related code if CONFIG_TPM is not set
    
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Cc: Igor Mammedov <imammedo@redhat.com>
    Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Tested-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210614191335.1968807-2-stefanb@linux.ibm.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>",11fb99e6f4
0,"commit 144bff0304b8f93cf0eb9ed432434644302dc6d5
Author: Michael Forney <mforney@mforney.org>
Date:   Wed May 26 12:02:03 2021 -0700

    linux-user: Disable static assert involving __SIGRTMAX if it is missing
    
    This check is to ensure that the loop in signal_table_init() from
    SIGRTMIN to SIGRTMAX falls within the bounds of host_to_target_signal_table
    (_NSIG). However, it is not critical, since _NSIG is already defined
    to be the one larger than the largest signal supported by the system
    (as specified in the upcoming POSIX revision[0]).
    
    musl libc does not define __SIGRTMAX, so disabling this check when
    it is missing fixes one of the last remaining errors when building
    qemu.
    
    [0] https://www.austingroupbugs.net/view.php?id=741
    
    Signed-off-by: Michael Forney <mforney@mforney.org>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Message-Id: <20210526190203.4255-1-mforney@mforney.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",144bff0304
0,"commit 228168cbb7cc40bfb1621b0b6868c018b522276a
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Jun 11 23:08:28 2021 -0700

    linux-user: Set CF_PARALLEL when mapping shared memory
    
    Signal the translator to use host atomic instructions for
    guest operations, insofar as it is possible.  This is the
    best we can do to allow the guest to interact atomically
    with other processes.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/121
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210612060828.695332-1-richard.henderson@linaro.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",228168cbb7
0,"commit 4fa7b4cc500e1fbd8c11e65548b7713db81e75ff
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Fri Jun 4 09:50:29 2021 +0200

    virtio-gpu: move scanout_id sanity check
    
    Checking scanout_id in virtio_gpu_do_set_scanout() is too late, for the
    ""resource_id == 0"" case (aka disable scanout) the scanout_id is used
    unchecked.  Move the check into the callers to fix that.
    
    Fixes: e64d4b6a9bc3 (""virtio-gpu: Refactor virtio_gpu_set_scanout"")
    Fixes: 32db3c63ae11 (""virtio-gpu: Add virtio_gpu_set_scanout_blob"")
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/383
    Reported-by: Alexander Bulekov <alxndr@bu.edu>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Reviewed-by: Li Qiang <liq3ea@gmail.com>
    Message-Id: <20210604075029.1201478-1-kraxel@redhat.com>",4fa7b4cc50
0,"commit 25b2ef2e8ee23109b0c3ce9ea71330bf8a7d12bd
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Fri Jun 4 12:37:14 2021 +0200

    vhost-user-gpu: reorder free calls.
    
    Free in correct order to avoid use-after-free.
    
    Resolves: CID 1453812
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Li Qiang <liq3ea@gmail.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210604103714.1237414-1-kraxel@redhat.com>",25b2ef2e8e
0,"commit 05ece98f965997649b8d922d224240459bcc1403
Author: Dennis Wölfing <denniswoelfing@gmx.de>
Date:   Mon Jun 7 13:53:03 2021 +0200

    vga: Allow writing VBE_DISPI_ID5 to ID register
    
    The highest VBE_DISPI_INDEX_ID version supported by QEMU is
    VBE_DISPI_ID5. But currently QEMU only allows writing values up to
    VBE_DISPI_ID4 to the VBE_DISPI_INDEX_ID register.
    
    As a result of this when a lower version is written to this register and
    later VBE_DISPI_ID5 is written back, reads from the register will
    continue to report the lower version.
    
    Indeed SeaBIOS is doing that during VGA initialization which causes
    guests to always read VBE_DISPI_ID0 instead of the correct version.
    
    Signed-off-by: Dennis Wölfing <denniswoelfing@gmx.de>
    Message-Id: <20210607115303.228659-1-denniswoelfing@gmx.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",05ece98f96
0,"commit 1ea06abceec61b6f3ab33dadb0510b6e09fb61e2
Merge: fbe7919ece 970bc16f60
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 15:59:13 2021 +0100

    Merge remote-tracking branch 'remotes/berrange-gitlab/tags/misc-fixes-pull-request' into staging
    
    Merge misc patches
    
    # gpg: Signature made Mon 14 Jun 2021 15:14:48 BST
    # gpg:                using RSA key DAF3A6FDB26B62912D0E8E3FBE86EBB415104FDF
    # gpg: Good signature from ""Daniel P. Berrange <dan@berrange.com>"" [full]
    # gpg:                 aka ""Daniel P. Berrange <berrange@redhat.com>"" [full]
    # Primary key fingerprint: DAF3 A6FD B26B 6291 2D0E  8E3F BE86 EBB4 1510 4FDF
    
    * remotes/berrange-gitlab/tags/misc-fixes-pull-request:
      usb/dev-mtp: use GDateTime for formatting timestamp for objects
      block: use GDateTime for formatting timestamp when dumping snapshot info
      migration: use GDateTime for formatting timestamp in snapshot names
      block: remove duplicate trace.h include
      block: add trace point when fdatasync fails
      block: preserve errno from fdatasync failures
      softmmu: add trace point when bdrv_flush_all fails
      migration: add trace point when vm_stop_force_state fails
      sasl: remove comment about obsolete kerberos versions
      docs: recommend SCRAM-SHA-256 SASL mech instead of SHA-1 variant
      docs: document usage of the authorization framework
      docs: document how to pass secret data to QEMU
      docs: add table of contents to QAPI references
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",1ea06abcee
0,"commit 970bc16f60937bcfd334f14c614bd4407c247961
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri Apr 30 12:59:06 2021 +0100

    usb/dev-mtp: use GDateTime for formatting timestamp for objects
    
    The GDateTime APIs provided by GLib avoid portability pitfalls, such
    as some platforms where 'struct timeval.tv_sec' field is still 'long'
    instead of 'time_t'. When combined with automatic cleanup, GDateTime
    often results in simpler code too.
    
    Reviewed-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",970bc16f60
0,"commit 39683553f9a66b735a003ad43bb4d1460cef4d64
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri Apr 30 12:59:06 2021 +0100

    block: use GDateTime for formatting timestamp when dumping snapshot info
    
    The GDateTime APIs provided by GLib avoid portability pitfalls, such
    as some platforms where 'struct timeval.tv_sec' field is still 'long'
    instead of 'time_t'. When combined with automatic cleanup, GDateTime
    often results in simpler code too.
    
    Reviewed-by: Max Reitz <mreitz@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",39683553f9
0,"commit 85cd1cc6687e827f3e5e94ad2e13444b75d0c5fa
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri Apr 30 12:59:06 2021 +0100

    migration: use GDateTime for formatting timestamp in snapshot names
    
    The GDateTime APIs provided by GLib avoid portability pitfalls, such
    as some platforms where 'struct timeval.tv_sec' field is still 'long'
    instead of 'time_t'. When combined with automatic cleanup, GDateTime
    often results in simpler code too.
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",85cd1cc668
0,"commit 99be1ac366c20992242f6cd0b9458e3ef52a7a70
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Thu Apr 15 14:50:07 2021 +0100

    block: remove duplicate trace.h include
    
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",99be1ac366
0,"commit 60ff2ae2a21ddc11cc7284194a3013ff864ac03c
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Thu Apr 15 14:28:16 2021 +0100

    block: add trace point when fdatasync fails
    
    A flush failure is a critical failure scenario for some operations.
    For example, it will prevent migration from completing, as it will
    make vm_stop() report an error. Thus it is important to have a
    trace point present for debugging.
    
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",60ff2ae2a2
0,"commit c7ddc8821d88d958bb6d4ef1279ec3609b17ffda
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Thu Apr 15 14:28:16 2021 +0100

    block: preserve errno from fdatasync failures
    
    When fdatasync() fails on a file backend we set a flag that
    short-circuits any future attempts to call fdatasync(). The
    first failure returns the true errno, but the later short-
    circuited calls return a generic EIO. The latter is unhelpful
    because fdatasync() can return a variety of errnos, including
    EACCESS.
    
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",c7ddc8821d
0,"commit 8af3f5c6d66ac203000c2d8ebebd3b751f575008
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Thu Apr 15 14:33:51 2021 +0100

    softmmu: add trace point when bdrv_flush_all fails
    
    The VM stop process has to flush outstanding I/O and this is a critical
    failure scenario that is hard to diagnose. Add a probe point that
    records the flush return code.
    
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",8af3f5c6d6
0,"commit 626ff6515d41854dc8a880849ae2744c20a70ba7
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Thu Apr 15 14:33:51 2021 +0100

    migration: add trace point when vm_stop_force_state fails
    
    This is a critical failure scenario for migration that is hard to
    diagnose from existing probes. Most likely it is caused by an error
    from bdrv_flush(), but we're not logging the errno anywhere, hence
    this new probe.
    
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",626ff6515d
0,"commit 213de8a2fb12f6962ded0240c900f728a72f8217
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Thu Mar 4 18:15:20 2021 +0000

    sasl: remove comment about obsolete kerberos versions
    
    This is not relevant to any OS distro that QEMU currently targets.
    
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",213de8a2fb
0,"commit e2bf32dfabbfe6aabde4a0400b25b768b4481785
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Thu Mar 4 18:14:26 2021 +0000

    docs: recommend SCRAM-SHA-256 SASL mech instead of SHA-1 variant
    
    The SHA-256 variant better meats modern security expectations.
    Also warn that the password file is storing entries in clear
    text.
    
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",e2bf32dfab
0,"commit 1c45af36e77ca315b33f237786f8a9fda512a8d3
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 18:20:30 2021 +0100

    docs: document usage of the authorization framework
    
    The authorization framework provides a way to control access to network
    services after a client has been authenticated. This documents how to
    actually use it.
    
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",1c45af36e7
0,"commit 491024a5b4efcf79ef46ddfd5c02957102d60175
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Tue Feb 23 15:35:45 2021 +0000

    docs: document how to pass secret data to QEMU
    
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",491024a5b4
0,"commit e0bd0cd43e4105dcb4e7f1849879170ae3d9da78
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Tue May 11 10:23:52 2021 +0100

    docs: add table of contents to QAPI references
    
    The QAPI reference docs for the guest agent, storage daemon and QMP are
    all rather long and hard to navigate unless you already know the name of
    the command and can do full text search for it.
    
    A table of contents in each doc will help people locate stuff much more
    easily.
    
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>",e0bd0cd43e
0,"commit fbe7919ecee8d525ccd107027d73d877cd4eccc4
Merge: 894fc4fd67 a5a8b84772
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 14 10:25:37 2021 +0100

    Merge remote-tracking branch 'remotes/rth-gitlab/tags/pull-tcg-20210613' into staging
    
    Clean up code_gen_buffer allocation.
    Add tcg_remove_ops_after.
    Fix tcg_constant_* documentation.
    Improve TB chaining documentation.
    Fix float32_exp2.
    Fix arm tcg_out_op function signature.
    
    # gpg: Signature made Mon 14 Jun 2021 02:12:35 BST
    # gpg:                using RSA key 7A481E78868B4DB6A85A05C064DF38E8AF7E215F
    # gpg:                issuer ""richard.henderson@linaro.org""
    # gpg: Good signature from ""Richard Henderson <richard.henderson@linaro.org>"" [full]
    # Primary key fingerprint: 7A48 1E78 868B 4DB6 A85A  05C0 64DF 38E8 AF7E 215F
    
    * remotes/rth-gitlab/tags/pull-tcg-20210613: (34 commits)
      docs/devel: Explain in more detail the TB chaining mechanisms
      softfloat: Fix tp init in float32_exp2
      tcg/arm: Fix tcg_out_op function signature
      tcg: Fix documentation for tcg_constant_* vs tcg_temp_free_*
      tcg: Introduce tcg_remove_ops_after
      tcg: Move tcg_init_ctx and tcg_ctx from accel/tcg/
      tcg: When allocating for !splitwx, begin with PROT_NONE
      tcg: Merge buffer protection and guard page protection
      tcg: Round the tb_size default from qemu_get_host_physmem
      util/osdep: Add qemu_mprotect_rw
      tcg: Sink qemu_madvise call to common code
      tcg: Return the map protection from alloc_code_gen_buffer
      tcg: Allocate code_gen_buffer into struct tcg_region_state
      tcg: Move in_code_gen_buffer and tests to region.c
      tcg: Tidy split_cross_256mb
      tcg: Tidy tcg_n_regions
      tcg: Rename region.start to region.after_prologue
      tcg: Replace region.end with region.total_size
      tcg: Move MAX_CODE_GEN_BUFFER_SIZE to tcg-target.h
      tcg: Introduce tcg_max_ctxs
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",fbe7919ece
0,"commit a5a8b84772e13066c6c45f480cc5b5312bbde08e
Author: Luis Pires <luis.pires@eldorado.org.br>
Date:   Tue Jun 1 09:51:43 2021 -0300

    docs/devel: Explain in more detail the TB chaining mechanisms
    
    Signed-off-by: Luis Pires <luis.pires@eldorado.org.br>
    Message-Id: <20210601125143.191165-1-luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",a5a8b84772
0,"commit f291f45f4ef445ccc1aaf7b5bc595dab17d89e8d
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Jun 7 15:38:12 2021 -0700

    softfloat: Fix tp init in float32_exp2
    
    Typo in the conversion to FloatParts64.
    
    Fixes: 572c4d862ff2
    Fixes: Coverity CID 1457457
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210607223812.110596-1-richard.henderson@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",f291f45f4e
0,"commit c372565d08e278d6e65a54c8b5ab082bd63234ea
Author: Jose R. Ziviani <jziviani@suse.de>
Date:   Thu Jun 10 19:44:50 2021 -0300

    tcg/arm: Fix tcg_out_op function signature
    
    Commit 5e8892db93 fixed several function signatures but tcg_out_op for
    arm is missing. This patch fixes it as well.
    
    Signed-off-by: Jose R. Ziviani <jziviani@suse.de>
    Message-Id: <20210610224450.23425-1-jziviani@suse.de>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c372565d08
0,"commit a14b3ad11af1803e018d2be8ca26be27f816872d
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu Jun 10 09:32:40 2021 -0700

    tcg: Fix documentation for tcg_constant_* vs tcg_temp_free_*
    
    At some point during the development of tcg_constant_*, I changed
    my mind about whether such temps should be able to be passed to
    tcg_temp_free_*.  The final version committed allows this, but the
    commentary was not updated to match.
    
    Fixes: c0522136adf
    Reported-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",a14b3ad11a
0,"commit a80cdd3183ed85bc254cbe22ca240dc035fc6548
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Jun 4 14:26:45 2021 -0700

    tcg: Introduce tcg_remove_ops_after
    
    Introduce a function to remove everything emitted
    since a given point.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",a80cdd3183
0,"commit 42eb6dfcf135068aa6873e6e9f5f8afa77858914
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Mar 13 13:36:51 2021 -0600

    tcg: Move tcg_init_ctx and tcg_ctx from accel/tcg/
    
    These variables belong to the jit side, not the user side.
    
    Since tcg_init_ctx is no longer used outside of tcg/, move
    the declaration to tcg-internal.h.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Suggested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",42eb6dfcf1
0,"commit b7da02dad0f25928e688a5dce74a0f10fa120594
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Mar 10 17:41:26 2021 -0600

    tcg: When allocating for !splitwx, begin with PROT_NONE
    
    There's a change in mprotect() behaviour [1] in the latest macOS
    on M1 and it's not yet clear if it's going to be fixed by Apple.
    
    In this case, instead of changing permissions of N guard pages,
    we change permissions of N rwx regions.  The same number of
    syscalls are required either way.
    
    [1] https://gist.github.com/hikalium/75ae822466ee4da13cbbe486498a191f
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",b7da02dad0
0,"commit 22c6a9938f7515a2c05fb7dea128e2e305953115
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Mar 10 17:27:49 2021 -0600

    tcg: Merge buffer protection and guard page protection
    
    Do not handle protections on a case-by-case basis in the
    various alloc_code_gen_buffer instances; do it within a
    single loop in tcg_region_init.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",22c6a9938f
0,"commit ba22783d6ef821551360890a025cd29b2444e948
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sun Mar 14 13:32:18 2021 -0600

    tcg: Round the tb_size default from qemu_get_host_physmem
    
    If qemu_get_host_physmem returns an odd number of pages,
    then physmem / 8 will not be a multiple of the page size.
    
    The following was observed on a gitlab runner:
    
    ERROR qtest-arm/boot-serial-test - Bail out!
    ERROR:../util/osdep.c:80:qemu_mprotect__osdep: \
      assertion failed: (!(size & ~qemu_real_host_page_mask))
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",ba22783d6e
0,"commit d7107fc00aff819338e1d2683eabcbb2ff4ef61b
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Mar 10 17:47:33 2021 -0600

    util/osdep: Add qemu_mprotect_rw
    
    For --enable-tcg-interpreter on Windows, we will need this.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",d7107fc00a
0,"commit cd9ea992e99b231f8065d66ae19a643673f70eed
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Mar 10 17:01:46 2021 -0600

    tcg: Sink qemu_madvise call to common code
    
    Move the call out of the N versions of alloc_code_gen_buffer
    and into tcg_region_init.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",cd9ea992e9
0,"commit 7be9ebcf924c04b22f4c4cf990f51da4259b07c3
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Mar 10 13:59:37 2021 -0600

    tcg: Return the map protection from alloc_code_gen_buffer
    
    Change the interface from a boolean error indication to a
    negative error vs a non-negative protection.  For the moment
    this is only interface change, not making use of the new data.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",7be9ebcf92
0,"commit 032a4b1ba09ab15bb9331a75d49db186e782c00c
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Mar 10 12:34:27 2021 -0600

    tcg: Allocate code_gen_buffer into struct tcg_region_state
    
    Do not mess around with setting values within tcg_init_ctx.
    Put the values into 'region' directly, which is where they
    will live for the lifetime of the program.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",032a4b1ba0
0,"commit 47d590df34b22595f1a6f9e8aafe5531cd2e4b13
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Mar 13 12:29:28 2021 -0600

    tcg: Move in_code_gen_buffer and tests to region.c
    
    Shortly, the full code_gen_buffer will only be visible
    to region.c, so move in_code_gen_buffer out-of-line.
    
    Move the debugging versions of tcg_splitwx_to_{rx,rw}
    to region.c as well, so that the compiler gets to see
    the implementation of in_code_gen_buffer.
    
    This leaves exactly one use of in_code_gen_buffer outside
    of region.c, in cpu_restore_state.  Which, being on the
    exception path, is not performance critical.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",47d590df34
0,"commit a4df1b2d193d1a265bfc3773703bba7da12446e9
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Mar 10 11:16:27 2021 -0600

    tcg: Tidy split_cross_256mb
    
    Return output buffer and size via output pointer arguments,
    rather than returning size via tcg_ctx->code_gen_buffer_size.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",a4df1b2d19
0,"commit 01afda991971745948633529bf52df8fbf3710d1
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Mar 10 11:06:17 2021 -0600

    tcg: Tidy tcg_n_regions
    
    Compute the value using straight division and bounds,
    rather than a loop.  Pass in tb_size rather than reading
    from tcg_init_ctx.code_gen_buffer_size,
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",01afda9919
0,"commit c2471ca0defb3b4393ae4ae2d8698ced9613700e
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Mar 13 12:20:54 2021 -0600

    tcg: Rename region.start to region.after_prologue
    
    Give the field a name reflecting its actual meaning.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c2471ca0de
0,"commit 77bd7fd12545e4a7db8ee7179014dd06250a753e
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Mar 10 10:35:05 2021 -0600

    tcg: Replace region.end with region.total_size
    
    A size is easier to work with than an end point,
    particularly during initial buffer allocation.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",77bd7fd125
0,"commit 26a75d12d33ff80ee797ca32373f6333da4f194f
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 23:30:38 2021 -0600

    tcg: Move MAX_CODE_GEN_BUFFER_SIZE to tcg-target.h
    
    Remove the ifdef ladder and move each define into the
    appropriate header file.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",26a75d12d3
0,"commit 0e2d61cf29833f8984e7421a74eb0a4f921f92b5
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 23:06:32 2021 -0600

    tcg: Introduce tcg_max_ctxs
    
    Finish the divorce of tcg/ from hw/, and do not take
    the max cpu value from MachineState; just remember what
    we were passed in tcg_init.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",0e2d61cf29
0,"commit 43b972b7ebe9b8e84aa535031de7e605f6bf2cb2
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 22:52:45 2021 -0600

    accel/tcg: Pass down max_cpus to tcg_init
    
    Start removing the include of hw/boards.h from tcg/.
    Pass down the max_cpus value from tcg_init_machine,
    where we have the MachineState already.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",43b972b7eb
0,"commit efba8ae9f6f4df011b0441ae2b634be6152026a4
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Thu Jun 3 13:32:11 2021 -0700

    accel/tcg: Use MiB in tcg_init_machine
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",efba8ae9f6
0,"commit fa79cde6ed245629141b5a084f3110b8a3131d60
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 17:42:16 2021 -0600

    accel/tcg: Merge tcg_exec_init into tcg_init_machine
    
    There is only one caller, and shortly we will need access
    to the MachineState, which tcg_init_machine already has.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",fa79cde6ed
0,"commit a76aabd37b5d9ddfff2de837ddef91768aa26e3e
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 17:24:33 2021 -0600

    tcg: Create tcg_init
    
    Perform both tcg_context_init and tcg_region_init.
    Do not leave this split to the caller.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",a76aabd37b
0,"commit 7109ef15c51d2a948f88764e4a4fe0666c4c91db
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 17:22:23 2021 -0600

    accel/tcg: Rename tcg_init to tcg_init_machine
    
    We shortly want to use tcg_init for something else.
    Since the hook is called init_machine, match that.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",7109ef15c5
0,"commit c46184a90a5a0209960b7c0813aff4feb1e373e1
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 17:02:48 2021 -0600

    accel/tcg: Move alloc_code_gen_buffer to tcg/region.c
    
    Buffer management is integral to tcg.  Do not leave the allocation
    to code outside of tcg/.  This is code movement, with further
    cleanups to follow.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c46184a90a
0,"commit 324b9d462ea227f10a25c80421046e6187247116
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 16:40:37 2021 -0600

    accel/tcg: Inline cpu_gen_init
    
    It consists of one function call and has only one caller.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",324b9d462e
0,"commit 5ff7258cc649dd5a3752485f285411e3915c9aba
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 16:24:14 2021 -0600

    tcg: Split out region.c
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",5ff7258cc6
0,"commit bf042e8e52f0140388837ce75f865969831ab1ab
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 16:33:15 2021 -0600

    tcg: Split out tcg_region_prologue_set
    
    This has only one user, but will make more sense after some
    code motion.
    
    Always leave the tcg_init_ctx initialized to the first region,
    in preparation for tcg_prologue_init().  This also requires
    that we don't re-allocate the region for the first cpu, lest
    we hit the assertion for total number of regions allocated .
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",bf042e8e52
0,"commit 0430ca00f586a7ad27d3f13de3010ac4d6f40bb6
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 12:27:05 2021 -0600

    tcg: Split out tcg_region_initial_alloc
    
    This has only one user, and currently needs an ifdef,
    but will make more sense after some code motion.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",0430ca00f5
0,"commit bd35f2ceac5e933f8eb168866e8899a36e32317d
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 11:45:19 2021 -0600

    tcg: Remove error return from tcg_region_initial_alloc__locked
    
    All callers immediately assert on error, so move the assert
    into the function itself.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",bd35f2ceac
0,"commit b0a0794a0f16e2160d8d35b14cca8f5e81b8b67e
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Mar 9 08:45:58 2021 -0800

    tcg: Re-order tcg_region_init vs tcg_prologue_init
    
    Instead of delaying tcg_region_init until after tcg_prologue_init
    is complete, do tcg_region_init first and let tcg_prologue_init
    shrink the first region by the size of the generated prologue.
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",b0a0794a0f
0,"commit c6347541728b0face2c509c4ebc8ba6fdf807fc6
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Mar 8 12:15:06 2021 -0800

    meson: Split out fpu/meson.build
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c634754172
0,"commit 104cc2c0853cd17fde8a58c2aa0c54a5e6e4e6de
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon Mar 8 12:04:33 2021 -0800

    meson: Split out tcg/meson.build
    
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",104cc2c085
0,"commit 894fc4fd670aaf04a67dc7507739f914ff4bacf2
Merge: 7fe7fae8b4 5a2d9929ac
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 11 09:21:48 2021 +0100

    Merge remote-tracking branch 'remotes/jasowang/tags/net-pull-request' into staging
    
    # gpg: Signature made Fri 11 Jun 2021 03:54:51 BST
    # gpg:                using RSA key EF04965B398D6211
    # gpg: Good signature from ""Jason Wang (Jason Wang on RedHat) <jasowang@redhat.com>"" [marginal]
    # gpg: WARNING: This key is not certified with sufficiently trusted signatures!
    # gpg:          It is not certain that the signature belongs to the owner.
    # Primary key fingerprint: 215D 46F4 8246 689E C77F  3562 EF04 965B 398D 6211
    
    * remotes/jasowang/tags/net-pull-request:
      Fixed calculation error of pkt->header_size in fill_pkt_tcp_info()
      Add the function of colo_compare_cleanup
      Add a function named packet_new_nocopy for COLO.
      Remove migrate_set_block_enabled in checkpoint
      Optimize the function of filter_send
      Fix the qemu crash when guest shutdown during checkpoint
      Remove some duplicate trace code.
      netdev: add more commands to preconfig mode
      vhost-vdpa: remove the unused vhost_vdpa_get_acked_features()
      vhost-vdpa: don't initialize backend_features
      vhost-vdpa: map virtqueue notification area if possible
      vhost-vdpa: skip ram device from the IOTLB mapping
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",894fc4fd67
0,"commit 5a2d9929ac1f01a1e8ef2a3f56f69e6069863dad
Author: Rao, Lei <lei.rao@intel.com>
Date:   Tue Jun 8 16:23:31 2021 +0800

    Fixed calculation error of pkt->header_size in fill_pkt_tcp_info()
    
    The data pointer has skipped vnet_hdr_len in the function of
    parse_packet_early().So, we can not subtract vnet_hdr_len again
    when calculating pkt->header_size in fill_pkt_tcp_info(). Otherwise,
    it will cause network packet comparsion errors and greatly increase
    the frequency of checkpoints.
    
    Signed-off-by: Lei Rao <lei.rao@intel.com>
    Signed-off-by: Zhang Chen <chen.zhang@intel.com>
    Reviewed-by: Li Zhijian <lizhijian@fujitsu.com>
    Reviewed-by: Zhang Chen <chen.zhang@intel.com>
    Reviewed-by: Lukas Straub <lukasstraub2@web.de>
    Tested-by: Lukas Straub <lukasstraub2@web.de>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",5a2d9929ac
0,"commit 0c7af1a778d036402ec0829783afee1ce6ea942c
Author: Rao, Lei <lei.rao@intel.com>
Date:   Tue Jun 8 16:23:30 2021 +0800

    Add the function of colo_compare_cleanup
    
    This patch fixes the following:
        #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
        #1  0x00007f6ae4559859 in __GI_abort () at abort.c:79
        #2  0x0000559aaa386720 in error_exit (err=16, msg=0x559aaa5973d0 <__func__.16227> ""qemu_mutex_destroy"") at util/qemu-thread-posix.c:36
        #3  0x0000559aaa3868c5 in qemu_mutex_destroy (mutex=0x559aabffe828) at util/qemu-thread-posix.c:69
        #4  0x0000559aaa2f93a8 in char_finalize (obj=0x559aabffe800) at chardev/char.c:285
        #5  0x0000559aaa23318a in object_deinit (obj=0x559aabffe800, type=0x559aabfd7d20) at qom/object.c:606
        #6  0x0000559aaa2331b8 in object_deinit (obj=0x559aabffe800, type=0x559aabfd9060) at qom/object.c:610
        #7  0x0000559aaa233200 in object_finalize (data=0x559aabffe800) at qom/object.c:620
        #8  0x0000559aaa234202 in object_unref (obj=0x559aabffe800) at qom/object.c:1074
        #9  0x0000559aaa2356b6 in object_finalize_child_property (obj=0x559aac0dac10, name=0x559aac778760 ""compare0-0"", opaque=0x559aabffe800) at qom/object.c:1584
        #10 0x0000559aaa232f70 in object_property_del_all (obj=0x559aac0dac10) at qom/object.c:557
        #11 0x0000559aaa2331ed in object_finalize (data=0x559aac0dac10) at qom/object.c:619
        #12 0x0000559aaa234202 in object_unref (obj=0x559aac0dac10) at qom/object.c:1074
        #13 0x0000559aaa2356b6 in object_finalize_child_property (obj=0x559aac0c75c0, name=0x559aac0dadc0 ""chardevs"", opaque=0x559aac0dac10) at qom/object.c:1584
        #14 0x0000559aaa233071 in object_property_del_child (obj=0x559aac0c75c0, child=0x559aac0dac10, errp=0x0) at qom/object.c:580
        #15 0x0000559aaa233155 in object_unparent (obj=0x559aac0dac10) at qom/object.c:599
        #16 0x0000559aaa2fb721 in qemu_chr_cleanup () at chardev/char.c:1159
        #17 0x0000559aa9f9b110 in main (argc=54, argv=0x7ffeb62fa998, envp=0x7ffeb62fab50) at vl.c:4539
    
    When chardev is cleaned up, chr_write_lock needs to be destroyed. But
    the colo-compare module is not cleaned up normally before it when the
    guest poweroff. It is holding chr_write_lock at this time. This will
    cause qemu crash.So we add the function of colo_compare_cleanup() before
    qemu_chr_cleanup() to fix the bug.
    
    Signed-off-by: Lei Rao <lei.rao@intel.com>
    Reviewed-by: Zhang Chen <chen.zhang@intel.com>
    Reviewed-by: Lukas Straub <lukasstraub2@web.de>
    Tested-by: Lukas Straub <lukasstraub2@web.de>
    Signed-off-by: Zhang Chen <chen.zhang@intel.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",0c7af1a778
0,"commit 9b492719dd0445c676da6805c84f9a5893583d1c
Author: Rao, Lei <lei.rao@intel.com>
Date:   Tue Jun 8 16:23:29 2021 +0800

    Add a function named packet_new_nocopy for COLO.
    
    Use the packet_new_nocopy instead of packet_new in the
    filter-rewriter module. There will be one less memory
    copy in the processing of each network packet.
    
    Signed-off-by: Lei Rao <lei.rao@intel.com>
    Signed-off-by: Zhang Chen <chen.zhang@intel.com>
    Reviewed-by: Zhang Chen <chen.zhang@intel.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",9b492719dd
0,"commit 3ba024457facdb6b0ef9c5c742261d4080a80a11
Author: Rao, Lei <lei.rao@intel.com>
Date:   Tue Jun 8 16:23:28 2021 +0800

    Remove migrate_set_block_enabled in checkpoint
    
    We can detect disk migration in migrate_prepare, if disk migration
    is enabled in COLO mode, we can directly report an error.and there
    is no need to disable block migration at every checkpoint.
    
    Signed-off-by: Lei Rao <lei.rao@intel.com>
    Signed-off-by: Zhang Chen <chen.zhang@intel.com>
    Reviewed-by: Li Zhijian <lizhijian@fujitsu.com>
    Reviewed-by: Zhang Chen <chen.zhang@intel.com>
    Reviewed-by: Lukas Straub <lukasstraub2@web.de>
    Tested-by: Lukas Straub <lukasstraub2@web.de>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",3ba024457f
0,"commit 7c2eae9a77234f92be96d33cc20b990db714d86d
Author: Rao, Lei <lei.rao@intel.com>
Date:   Tue Jun 8 16:23:27 2021 +0800

    Optimize the function of filter_send
    
    The iov_size has been calculated in filter_send(). we can directly
    return the size.In this way, this is no need to repeat calculations
    in filter_redirector_receive_iov();
    
    Signed-off-by: Lei Rao <lei.rao@intel.com>
    Reviewed-by: Li Zhijian <lizhijian@fujitsu.com>
    Reviewed-by: Zhang Chen <chen.zhang@intel.com>
    Reviewed-by: Lukas Straub <lukasstraub2@web.de>
    Tested-by: Lukas Straub <lukasstraub2@web.de>
    Signed-off-by: Zhang Chen <chen.zhang@intel.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",7c2eae9a77
0,"commit 229620d52e389bc7690f11e4f5fa9b249b5ca65d
Author: Rao, Lei <lei.rao@intel.com>
Date:   Tue Jun 8 16:23:26 2021 +0800

    Fix the qemu crash when guest shutdown during checkpoint
    
    This patch fixes the following:
        qemu-system-x86_64: invalid runstate transition: 'colo' ->'shutdown'
        Aborted (core dumped)
    
    Signed-off-by: Lei Rao <lei.rao@intel.com>
    Reviewed-by: Li Zhijian <lizhijian@fujitsu.com>
    Reviewed-by: Zhang Chen <chen.zhang@intel.com>
    Reviewed-by: Lukas Straub <lukasstraub2@web.de>
    Tested-by: Lukas Straub <lukasstraub2@web.de>
    Signed-off-by: Zhang Chen <chen.zhang@intel.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",229620d52e
0,"commit f1ff9c437711803f4862e580a211b3af8bb369c7
Author: Rao, Lei <lei.rao@intel.com>
Date:   Tue Jun 8 16:23:25 2021 +0800

    Remove some duplicate trace code.
    
    There is the same trace code in the colo_compare_packet_payload.
    
    Signed-off-by: Lei Rao <lei.rao@intel.com>
    Reviewed-by: Li Zhijian <lizhijian@fujitsu.com>
    Reviewed-by: Zhang Chen <chen.zhang@intel.com>
    Reviewed-by: Lukas Straub <lukasstraub2@web.de>
    Tested-by: Lukas Straub <lukasstraub2@web.de>
    Signed-off-by: Zhang Chen <chen.zhang@intel.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",f1ff9c4377
0,"commit 48f596c5a711d62f8b0c78b95569b2d8f9ad2704
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue May 11 11:39:55 2021 -0400

    netdev: add more commands to preconfig mode
    
    Creating and destroying network backend does not require a fully
    constructed machine.  Allow the related monitor commands to run before
    machine initialization has concluded.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",48f596c5a7
0,"commit 1b031172119c8996af5fa84b6e10627ea4122d64
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Jun 2 11:31:27 2021 +0800

    vhost-vdpa: remove the unused vhost_vdpa_get_acked_features()
    
    No user for this helper, let's remove it.
    
    Signed-off-by: Jason Wang <jasowang@redhat.com>",1b03117211
0,"commit c33f23a419f95da16ab4faaf08be635c89b96ff0
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Jun 2 11:31:26 2021 +0800

    vhost-vdpa: don't initialize backend_features
    
    We used to initialize backend_features during vhost_vdpa_init()
    regardless whether or not it was supported by vhost. This will lead
    the unsupported features like VIRTIO_F_IN_ORDER to be included and set
    to the vhost-vdpa during vhost_dev_start. Because the
    VIRTIO_F_IN_ORDER is not supported by vhost-vdpa so it won't be
    advertised to guest which will break the datapath.
    
    Fix this by not initializing the backend_features, so the
    acked_features could be built only from guest features via
    vhost_net_ack_features().
    
    Fixes: 108a64818e69b (""vhost-vdpa: introduce vhost-vdpa backend"")
    Cc: qemu-stable@nongnu.org
    Cc: Gautam Dawar <gdawar@xilinx.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",c33f23a419
0,"commit d0416d487bd561526486c2e43910ea9494855e16
Author: Jason Wang <jasowang@redhat.com>
Date:   Thu Apr 15 15:33:56 2021 +0800

    vhost-vdpa: map virtqueue notification area if possible
    
    This patch implements the vq notification mapping support for
    vhost-vDPA. This is simply done by using mmap()/munmap() for the
    vhost-vDPA fd during device start/stop. For the device without
    notification mapping support, we fall back to eventfd based
    notification gracefully.
    
    Reviewed-by: Si-Wei Liu <si-wei.liu@oracle.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",d0416d487b
0,"commit d60c75d28fe9d49bef28f7fa863481e1d9f6ff96
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Jun 2 16:41:05 2021 +0800

    vhost-vdpa: skip ram device from the IOTLB mapping
    
    vDPA is not tie to any specific hardware, for safety and simplicity,
    vhost-vDPA doesn't allow MMIO area to be mapped via IOTLB. Only the
    doorbell could be mapped via mmap(). So this patch exclude skip the
    ram device from the IOTLB mapping.
    
    Reviewed-by: Si-Wei Liu <si-wei.liu@oracle.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",d60c75d28f
0,"commit 7fe7fae8b48e3f9c647fd685e5155ebc8e6fb84d
Merge: a4716fd8d7 a4a571d978
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Wed Jun 9 16:40:21 2021 +0100

    Merge remote-tracking branch 'remotes/dgilbert-gitlab/tags/pull-migration-20210609a' into staging
    
    Migration pull for 2021-06-09
    
    Yank crash fix from Leo
    RDMA fix from Li
    mptcp support from me
    dirty-rate changes from Hyman and Peter
    
    (Note I've switched to the gitlab I've been using for virtiofs pulls)
    
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    
    # gpg: Signature made Wed 09 Jun 2021 15:40:01 BST
    # gpg:                using RSA key 45F5C71B4A0CB7FB977A9FA90516331EBC5BFDE7
    # gpg: Good signature from ""Dr. David Alan Gilbert (RH2) <dgilbert@redhat.com>"" [full]
    # Primary key fingerprint: 45F5 C71B 4A0C B7FB 977A  9FA9 0516 331E BC5B FDE7
    
    * remotes/dgilbert-gitlab/tags/pull-migration-20210609a:
      hmp: Add ""calc_dirty_rate"" and ""info dirty_rate"" cmds
      migration/dirtyrate: make sample page count configurable
      sockets: Support multipath TCP
      migration/socket: Close the listener at the end
      migration: Add cleanup hook for inwards migration
      io/net-listener: Call the notifier during finalize
      channel-socket: Only set CLOEXEC if we have space for fds
      migration/rdma: Fix cm event use after free
      yank: Unregister function when using TLS migration
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",7fe7fae8b4
0,"commit a4a571d97866d056787d7a654be5792765be8a60
Author: Peter Xu <peterx@redhat.com>
Date:   Mon Jun 7 09:11:57 2021 +0800

    hmp: Add ""calc_dirty_rate"" and ""info dirty_rate"" cmds
    
    These two commands are missing when adding the QMP sister commands.
    Add them, so developers can play with them easier.
    
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: Hyman Huang(黄勇) <huangy81@chinatelecom.cn>
    Message-Id: <4cc0039fc3ad6145136770cf3b0f056c09a2910b.1623027729.git.huangy81@chinatelecom.cn>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",a4a571d978
0,"commit 7afa08cd8fd2e5016658c39f6eb327e92edf0612
Author: Hyman Huang(黄勇) <huangy81@chinatelecom.cn>
Date:   Mon Jun 7 09:11:34 2021 +0800

    migration/dirtyrate: make sample page count configurable
    
    introduce optional sample-pages argument in calc-dirty-rate,
    making sample page count per GB configurable so that more
    accurate dirtyrate can be calculated.
    
    Signed-off-by: Hyman Huang(黄勇) <huangy81@chinatelecom.cn>
    Message-Id: <3103453a3b2796f929269c99a6ad81a9a7f1f405.1623027729.git.huangy81@chinatelecom.cn>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
      Wrapped a couple of long lines",7afa08cd8f
0,"commit 8bd1078aebcec5eac196a83ef1a7e74be0ba67b7
Author: Dr. David Alan Gilbert <dgilbert@redhat.com>
Date:   Wed Apr 21 12:28:34 2021 +0100

    sockets: Support multipath TCP
    
    Multipath TCP allows combining multiple interfaces/routes into a single
    socket, with very little work for the user/admin.
    
    It's enabled by 'mptcp' on most socket addresses:
    
       ./qemu-system-x86_64 -nographic -incoming tcp:0:4444,mptcp
    
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-Id: <20210421112834.107651-6-dgilbert@redhat.com>
    Acked-by: Markus Armbruster <armbru@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",8bd1078aeb
0,"commit a59136f3b126cfbcaa13a44fbdaf8df6e3d1885f
Author: Dr. David Alan Gilbert <dgilbert@redhat.com>
Date:   Wed Apr 21 12:28:33 2021 +0100

    migration/socket: Close the listener at the end
    
    Delay closing the listener until the cleanup hook at the end; mptcp
    needs the listener to stay open while the other paths come in.
    
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210421112834.107651-5-dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",a59136f3b1
0,"commit 1df6ddb43b48eacf5e1c7f63f48b507716150e6f
Author: Dr. David Alan Gilbert <dgilbert@redhat.com>
Date:   Wed Apr 21 12:28:32 2021 +0100

    migration: Add cleanup hook for inwards migration
    
    Add a cleanup hook for incoming migration that gets called
    at the end as a way for a transport to allow cleanup.
    
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210421112834.107651-4-dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",1df6ddb43b
0,"commit 5b6116d32694c7d82d433c8fcd2b6afcf299d0c9
Author: Dr. David Alan Gilbert <dgilbert@redhat.com>
Date:   Wed Apr 21 12:28:31 2021 +0100

    io/net-listener: Call the notifier during finalize
    
    Call the notifier during finalize; it's currently only called
    if we change it, which is not the intent.
    
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210421112834.107651-3-dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",5b6116d326
0,"commit d80f54ce53167e38623b8aafe8317458a6d7a6cd
Author: Dr. David Alan Gilbert <dgilbert@redhat.com>
Date:   Wed Apr 21 12:28:30 2021 +0100

    channel-socket: Only set CLOEXEC if we have space for fds
    
    MSG_CMSG_CLOEXEC cleans up received fd's; it's really only for Unix
    sockets, but currently we enable it for everything; some socket types
    (IP_MPTCP) don't like this.
    
    Only enable it when we're giving the recvmsg room to receive fd's
    anyway.
    
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210421112834.107651-2-dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",d80f54ce53
0,"commit 6b8c2eb5c63db2b6b418256bcfecb51e17d72b0f
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Wed Jun 2 10:35:06 2021 +0800

    migration/rdma: Fix cm event use after free
    
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Message-Id: <20210602023506.3821293-1-lizhijian@cn.fujitsu.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",6b8c2eb5c6
0,"commit 7de2e8565335c13fb3516cddbe2e40e366cce273
Author: Leonardo Bras <leobras.c@gmail.com>
Date:   Tue Jun 1 02:40:31 2021 -0300

    yank: Unregister function when using TLS migration
    
    After yank feature was introduced in migration, whenever migration
    is started using TLS, the following error happens in both source and
    destination hosts:
    
    (qemu) qemu-kvm: ../util/yank.c:107: yank_unregister_instance:
    Assertion `QLIST_EMPTY(&entry->yankfns)' failed.
    
    This happens because of a missing yank_unregister_function() when using
    qio-channel-tls.
    
    Fix this by also allowing TYPE_QIO_CHANNEL_TLS object type to perform
    yank_unregister_function() in channel_close() and multifd_load_cleanup().
    
    Also, inside migration_channel_connect() and
    migration_channel_process_incoming() move yank_register_function() so
    it only runs once on a TLS migration.
    
    Fixes: b5eea99ec2f (""migration: Add yank feature"", 2021-01-13)
    Buglink: https://bugzilla.redhat.com/show_bug.cgi?id=1964326
    Signed-off-by: Leonardo Bras <leobras.c@gmail.com>
    Reviewed-by: Lukas Straub <lukasstraub2@web.de>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    
    --
    Changes since v2:
    - Dropped all references to ioc->master
    - yank_register_function() and yank_unregister_function() now only run
      once in a TLS migration.
    
    Changes since v1:
    - Cast p->c to QIOChannelTLS into multifd_load_cleanup()
    Message-Id: <20210601054030.1153249-1-leobras.c@gmail.com>
    
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",7de2e85653
0,"commit a4716fd8d7c877185652f5f8e25032dc7699d51b
Merge: 33ba8b0adc d2c1a177b1
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue Jun 8 13:54:23 2021 +0100

    Merge remote-tracking branch 'remotes/alistair/tags/pull-riscv-to-apply-20210608-1' into staging
    
    Second RISC-V PR for QEMU 6.1
    
     - Update the PLIC and CLINT DT bindings
     - Improve documentation for RISC-V machines
     - Support direct kernel boot for microchip_pfsoc
     - Fix WFI exception behaviour
     - Improve CSR printing
     - Initial support for the experimental Bit Manip extension
    
    # gpg: Signature made Tue 08 Jun 2021 01:28:27 BST
    # gpg:                using RSA key F6C4AC46D4934868D3B8CE8F21E10D29DF977054
    # gpg: Good signature from ""Alistair Francis <alistair@alistair23.me>"" [full]
    # Primary key fingerprint: F6C4 AC46 D493 4868 D3B8  CE8F 21E1 0D29 DF97 7054
    
    * remotes/alistair/tags/pull-riscv-to-apply-20210608-1: (32 commits)
      target/riscv: rvb: add b-ext version cpu option
      target/riscv: rvb: support and turn on B-extension from command line
      target/riscv: rvb: add/shift with prefix zero-extend
      target/riscv: rvb: address calculation
      target/riscv: rvb: generalized or-combine
      target/riscv: rvb: generalized reverse
      target/riscv: rvb: rotate (left/right)
      target/riscv: rvb: shift ones
      target/riscv: rvb: single-bit instructions
      target/riscv: add gen_shifti() and gen_shiftiw() helper functions
      target/riscv: rvb: sign-extend instructions
      target/riscv: rvb: min/max instructions
      target/riscv: rvb: pack two words into one register
      target/riscv: rvb: logic-with-negate
      target/riscv: rvb: count bits set
      target/riscv: rvb: count leading/trailing zeros
      target/riscv: reformat @sh format encoding for B-extension
      target/riscv: Pass the same value to oprsz and maxsz.
      target/riscv/pmp: Add assert for ePMP operations
      target/riscv: Dump CSR mscratch/sscratch/satp
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",a4716fd8d7
0,"commit d2c1a177b138be35cb96216baa870c3564b123e4
Author: Frank Chang <frank.chang@sifive.com>
Date:   Thu May 6 00:06:18 2021 +0800

    target/riscv: rvb: add b-ext version cpu option
    
    Default b-ext version is v0.93.
    
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210505160620.15723-18-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",d2c1a177b1
0,"commit d52e94081e626b6b4b181dc7a6fc8f0b98e7d403
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:17 2021 +0800

    target/riscv: rvb: support and turn on B-extension from command line
    
    B-extension is default off, use cpu rv32 or rv64 with x-b=true to
    enable B-extension.
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210505160620.15723-17-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",d52e94081e
0,"commit 3a4a43e4e213a18d1ee4ed97090a5e86401c85bc
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:16 2021 +0800

    target/riscv: rvb: add/shift with prefix zero-extend
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210505160620.15723-16-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",3a4a43e4e2
0,"commit 920a1f9955c528f2be3ff9c9e1cbf40ddad1b192
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:15 2021 +0800

    target/riscv: rvb: address calculation
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210505160620.15723-15-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",920a1f9955
0,"commit c24f0422fbc0924389c1345ee30d8f87730ae633
Author: Frank Chang <frank.chang@sifive.com>
Date:   Thu May 6 00:06:14 2021 +0800

    target/riscv: rvb: generalized or-combine
    
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210505160620.15723-14-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",c24f0422fb
0,"commit 831ec7f3d1ede387eca225ccaccb2845cbbca85e
Author: Frank Chang <frank.chang@sifive.com>
Date:   Thu May 6 00:06:13 2021 +0800

    target/riscv: rvb: generalized reverse
    
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210505160620.15723-13-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",831ec7f3d1
0,"commit e58529a8d03ab8e9127f3e7cdf757ff84af75698
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:12 2021 +0800

    target/riscv: rvb: rotate (left/right)
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210505160620.15723-12-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",e58529a8d0
0,"commit 91d8fc676819eff4ffcb7a8038e6de7d1dd381d3
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:11 2021 +0800

    target/riscv: rvb: shift ones
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210505160620.15723-11-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",91d8fc6768
0,"commit 23cd17773bdc559877cc81b7129c4dd41ae53e4f
Author: Frank Chang <frank.chang@sifive.com>
Date:   Thu May 6 00:06:10 2021 +0800

    target/riscv: rvb: single-bit instructions
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210505160620.15723-10-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",23cd17773b
0,"commit 981d3568dfa8b5180de1719fa590db558e9720b7
Author: Frank Chang <frank.chang@sifive.com>
Date:   Thu May 6 00:06:09 2021 +0800

    target/riscv: add gen_shifti() and gen_shiftiw() helper functions
    
    Add gen_shifti() and gen_shiftiw() helper functions to reuse the same
    interfaces for immediate shift instructions.
    
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210505160620.15723-9-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",981d3568df
0,"commit 2a81973829d0e77bbfdcf9ca217de8fde5cff88f
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:08 2021 +0800

    target/riscv: rvb: sign-extend instructions
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Message-id: 20210505160620.15723-8-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",2a81973829
0,"commit 82655d8115f022a0132a74e0229dc7fa9b623b87
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:07 2021 +0800

    target/riscv: rvb: min/max instructions
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Message-id: 20210505160620.15723-7-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",82655d8115
0,"commit 6ef5843182382f6a84995590ad91047b0f2bc1fa
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:06 2021 +0800

    target/riscv: rvb: pack two words into one register
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210505160620.15723-6-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",6ef5843182
0,"commit 0bcdb686e586d8f5bfa2b2f9261d75a76b15e3cb
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:05 2021 +0800

    target/riscv: rvb: logic-with-negate
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210505160620.15723-5-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",0bcdb686e5
0,"commit 1e16310ca1bd368f20eb93683cc37389d5db185d
Author: Frank Chang <frank.chang@sifive.com>
Date:   Thu May 6 00:06:04 2021 +0800

    target/riscv: rvb: count bits set
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Message-id: 20210505160620.15723-4-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",1e16310ca1
0,"commit 438240185a9456747b19a29290018316271a3762
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:03 2021 +0800

    target/riscv: rvb: count leading/trailing zeros
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210505160620.15723-3-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",438240185a
0,"commit 00718208c127315d82f1f1f8383ef29bc478628e
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu May 6 00:06:02 2021 +0800

    target/riscv: reformat @sh format encoding for B-extension
    
    Signed-off-by: Kito Cheng <kito.cheng@sifive.com>
    Signed-off-by: Frank Chang <frank.chang@sifive.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210505160620.15723-2-frank.chang@sifive.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",00718208c1
0,"commit eee2d61e202b5bd49a5eb211e347e02c86287ef4
Author: LIU Zhiwei <zhiwei_liu@c-sky.com>
Date:   Fri May 21 13:48:16 2021 +0800

    target/riscv: Pass the same value to oprsz and maxsz.
    
    Since commit e2e7168a214b0ed98dc357bba96816486a289762, if oprsz
    is still zero(as we don't use this field), simd_desc will trigger an
    assert.
    
    Besides, tcg_gen_gvec_*_ptr calls simd_desc in it's implementation.
    Here we pass the value to maxsz and oprsz to bypass the assert.
    
    Signed-off-by: LIU Zhiwei <zhiwei_liu@c-sky.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210521054816.1784297-1-zhiwei_liu@c-sky.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",eee2d61e20
0,"commit 787a4baf91fa2ff36b901c0b31ea73f3f0739415
Author: Alistair Francis <alistair.francis@wdc.com>
Date:   Fri May 21 06:55:53 2021 +0800

    target/riscv/pmp: Add assert for ePMP operations
    
    Although we construct epmp_operation in such a way that it can only be
    between 0 and 15 Coverity complains that we don't handle the other
    possible cases. To fix Coverity and make it easier for humans to read
    add a default case to the switch statement that calls
    g_assert_not_reached().
    
    Fixes: CID 1453108
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Reviewed-by: LIU Zhiwei <zhiwei_liu@c-sky.com>
    Message-id: ec5f225928eec448278c82fcb1f6805ee61dde82.1621550996.git.alistair.francis@wdc.com",787a4baf91
0,"commit a722701dd364b82dc115e94a29d767949f796000
Author: Changbin Du <changbin.du@gmail.com>
Date:   Wed May 19 23:57:38 2021 +0800

    target/riscv: Dump CSR mscratch/sscratch/satp
    
    This dumps the CSR mscratch/sscratch/satp and meanwhile aligns
    the output of CSR mtval/stval.
    
    Signed-off-by: Changbin Du <changbin.du@gmail.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-id: 20210519155738.20486-1-changbin.du@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",a722701dd3
0,"commit 9a575d33fba497db48cda36273bde8710651888e
Author: Bin Meng <bmeng.cn@gmail.com>
Date:   Fri May 14 13:24:35 2021 +0800

    target/riscv: Remove unnecessary riscv_*_names[] declaration
    
    riscv_excp_names[] and riscv_intr_names[] are only referenced by
    target/riscv/cpu.c locally.
    
    Signed-off-by: Bin Meng <bmeng.cn@gmail.com>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210514052435.2203156-1-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",9a575d33fb
0,"commit bbf3d1b48fe170c0220a2267117d8a1ea9c2c2a3
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sun May 16 22:53:33 2021 +0200

    target/riscv: Do not include 'pmp.h' in user emulation
    
    Physical Memory Protection is a system feature.
    Avoid polluting the user-mode emulation by its definitions.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-id: 20210516205333.696094-1-f4bug@amsat.org
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",bbf3d1b48f
0,"commit 6debd840c8fedee6a378b05800d3382864e3564d
Author: Alistair Francis <alistair.francis@wdc.com>
Date:   Tue May 4 08:34:32 2021 +1000

    docs/system: Move the RISC-V -bios information to removed
    
    QEMU 5.1 changed the behaviour of the default boot for the RISC-V virt
    and sifive_u machines. This patch moves that change from the
    deprecated.rst file to the removed-features.rst file and the
    target-riscv.rst.
    
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-id: 4f1c261e7f69045ab8bb8926d85fe1d35e48ea5b.1620081256.git.alistair.francis@wdc.com",6debd840c8
0,"commit 719f0f603c2289f438b8d6ef4358d9407b4c2905
Author: Jose Martins <josemartins90@gmail.com>
Date:   Tue Apr 20 22:36:56 2021 +0100

    target/riscv: fix wfi exception behavior
    
    The wfi exception trigger behavior should take into account user mode,
    hstatus.vtw, and the fact the an wfi might raise different types of
    exceptions depending on various factors:
    
    If supervisor mode is not present:
    
    - an illegal instruction exception should be generated if user mode
    executes and wfi instruction and mstatus.tw = 1.
    
    If supervisor mode is present:
    
    - when a wfi instruction is executed, an illegal exception should be triggered
    if either the current mode is user or the mode is supervisor and mstatus.tw is
    set.
    
    Plus, if the hypervisor extensions are enabled:
    
    - a virtual instruction exception should be raised when a wfi is executed from
    virtual-user or virtual-supervisor and hstatus.vtw is set.
    
    Signed-off-by: Jose Martins <josemartins90@gmail.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210420213656.85148-1-josemartins90@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",719f0f603c
0,"commit 143897b50140cfd7540f867edca5d658e76aa9bf
Author: Bin Meng <bin.meng@windriver.com>
Date:   Fri Apr 30 15:13:02 2021 +0800

    hw/riscv: microchip_pfsoc: Support direct kernel boot
    
    At present the Microchip Icicle Kit machine only supports using
    '-bios' to load the HSS, and does not support '-kernel' for direct
    kernel booting just like other RISC-V machines do. One has to use
    U-Boot which is chain-loaded by HSS, to load a kernel for testing.
    This is not so convenient.
    
    Adding '-kernel' support together with the existing '-bios', we
    follow the following table to select which payload we execute:
    
      -bios |    -kernel | payload
      ------+------------+--------
          N |          N | HSS
          Y | don't care | HSS
          N |          Y | kernel
    
    This ensures backwards compatibility with how we used to expose
    '-bios' to users. When '-kernel' is used for direct boot, '-dtb'
    must be present to provide a valid device tree for the board,
    as we don't generate device tree.
    
    When direct kernel boot is used, the OpenSBI fw_dynamic BIOS image
    is used to boot a payload like U-Boot or OS kernel directly.
    
    Documentation is updated to describe the direct kernel boot. Note
    as of today there is still no PolarFire SoC support in the upstream
    Linux kernel hence the document does not include instructions for
    that. It will be updated in the future.
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210430071302.1489082-8-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",143897b501
0,"commit a0acd0a175891afe554c907c4ecc941abbd98602
Author: Bin Meng <bin.meng@windriver.com>
Date:   Fri Apr 30 15:13:01 2021 +0800

    hw/riscv: Use macros for BIOS image names
    
    The OpenSBI BIOS image names are used by many RISC-V machines.
    Let's define macros for them.
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210430071302.1489082-7-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",a0acd0a175
0,"commit 0147af69abb17a1ab5780821659c2e71d081c1e2
Author: Bin Meng <bin.meng@windriver.com>
Date:   Fri Apr 30 15:13:00 2021 +0800

    docs/system/riscv: sifive_u: Document '-dtb' usage
    
    Update the 'sifive_u' machine documentation to mention the '-dtb'
    option that can be used to pass a custom DTB to QEMU.
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210430071302.1489082-6-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",0147af69ab
0,"commit 3ede8967c8a586c226da21d04283c72e24a2385e
Author: Bin Meng <bin.meng@windriver.com>
Date:   Fri Apr 30 15:12:59 2021 +0800

    docs/system/riscv: Correct the indentation level of supported devices
    
    The supported device bullet list has an additional space before each
    entry, which makes a wrong indentation level. Correct it.
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210430071302.1489082-5-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",3ede8967c8
0,"commit 60bb5407f02b9d7cf7078ff339cbae961b7e98cc
Author: Bin Meng <bin.meng@windriver.com>
Date:   Fri Apr 30 15:12:58 2021 +0800

    hw/riscv: Support the official PLIC DT bindings
    
    The official DT bindings of PLIC uses ""sifive,plic-1.0.0"" as the
    compatible string in the upstream Linux kernel. ""riscv,plic0"" is
    now legacy and has to be kept for backward compatibility of legacy
    systems.
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210430071302.1489082-4-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",60bb5407f0
0,"commit 7cfbb17f023dc014d366b2f30af852aa62a5c3b1
Author: Bin Meng <bin.meng@windriver.com>
Date:   Fri Apr 30 15:12:57 2021 +0800

    hw/riscv: Support the official CLINT DT bindings
    
    Linux kernel commit a2770b57d083 (""dt-bindings: timer: Add CLINT bindings"")
    adds the official DT bindings for CLINT, which uses ""sifive,clint0""
    as the compatible string. ""riscv,clint0"" is now legacy and has to
    be kept for backward compatibility of legacy systems.
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210430071302.1489082-3-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",7cfbb17f02
0,"commit 2cc04550ac222237b979b5a45679ff746fc99a46
Author: Bin Meng <bin.meng@windriver.com>
Date:   Fri Apr 30 15:12:56 2021 +0800

    hw/riscv: virt: Switch to use qemu_fdt_setprop_string_array() helper
    
    Since commit 78da6a1bca22 (""device_tree: add qemu_fdt_setprop_string_array helper""),
    we can use the new helper to set the compatible strings for the
    SiFive test device node.
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210430071302.1489082-2-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",2cc04550ac
0,"commit cb53b283b5adf4123273d07eee5e186e2e0a1b5b
Author: Bin Meng <bin.meng@windriver.com>
Date:   Fri Apr 30 15:12:55 2021 +0800

    hw/riscv: sifive_u: Switch to use qemu_fdt_setprop_string_array() helper
    
    Since commit 78da6a1bca22 (""device_tree: add qemu_fdt_setprop_string_array helper""),
    we can use the new helper to set the clock name for the ethernet
    controller node.
    
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-id: 20210430071302.1489082-1-bmeng.cn@gmail.com
    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>",cb53b283b5
0,"commit 33ba8b0adc91482dd4247a0773cfe7def011933f
Merge: a35947f15c df77d45a51
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 7 20:05:29 2021 +0100

    Merge remote-tracking branch 'remotes/vivier2/tags/trivial-branch-for-6.1-pull-request' into staging
    
    Trivial branch pull request 20210607
    
    # gpg: Signature made Mon 07 Jun 2021 19:56:43 BST
    # gpg:                using RSA key CD2F75DDC8E3A4DC2E4F5173F30C38BD3F2FBE3C
    # gpg:                issuer ""laurent@vivier.eu""
    # gpg: Good signature from ""Laurent Vivier <lvivier@redhat.com>"" [full]
    # gpg:                 aka ""Laurent Vivier <laurent@vivier.eu>"" [full]
    # gpg:                 aka ""Laurent Vivier (Red Hat) <lvivier@redhat.com>"" [full]
    # Primary key fingerprint: CD2F 75DD C8E3 A4DC 2E4F  5173 F30C 38BD 3F2F BE3C
    
    * remotes/vivier2/tags/trivial-branch-for-6.1-pull-request:
      vhost-vdpa: Remove redundant declaration of address_space_memory
      scripts/oss-fuzz: Fix typo in documentation
      target/mips: Fix 'Uncoditional' typo
      target/hppa: Remove unused 'memory.h' header
      hw/display/macfb: Classify the ""nubus-macfb"" as display device
      target/nios2: fix page-fit instruction count
      docs: fix broken reference
      linux-user/syscall: Constify bitmask_transtbl fcntl/mmap flags_tlb[]
      misc: Correct relative include path
      i386/kvm: The value passed to strerror should be positive
      target/riscv: Do not include 'pmp.h' in user emulation
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",33ba8b0adc
0,"commit a35947f15c0ee695eba3c55248ec8ac3e4e23cca
Merge: 6f398e533f 72205289a0
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Mon Jun 7 15:45:48 2021 +0100

    Merge remote-tracking branch 'remotes/stsquad/tags/pull-testing-updates-070621-2' into staging
    
    A few testing and configure updates:
    
      - add the multiarch signals stress test
      - fix display of multi-word compiler stanzas in meson
      - fix quoting of multi-word compiler stazas in configure.sh
      - tag some acceptance tests as TCG only
      - make checkpatch test work harder to find clean diffs
      - split gprof/gconv job to avoid timeouts
      - fix centos8 VM build by adding --source-path
      - make checkpatch aware of .h.inc and .c.inc paths
    
    # gpg: Signature made Mon 07 Jun 2021 14:51:12 BST
    # gpg:                using RSA key 6685AE99E75167BCAFC8DF35FBD0DB095A9E2A44
    # gpg: Good signature from ""Alex Bennée (Master Work Key) <alex.bennee@linaro.org>"" [full]
    # Primary key fingerprint: 6685 AE99 E751 67BC AFC8  DF35 FBD0 DB09 5A9E 2A44
    
    * remotes/stsquad/tags/pull-testing-updates-070621-2:
      scripts/checkpatch.pl: process .c.inc and .h.inc files as C source
      tests/vm: expose --source-path to scripts to find extra files
      gitlab-ci: Split gprof-gcov job
      gitlab: work harder to avoid false positives in checkpatch
      tests/acceptance: tag various arm tests as TCG only
      tests/tcg/configure.sh: tweak quoting of target_compiler
      meson.build: fix cosmetics of compiler display
      tests/tcg: add a multiarch signals test to stress test signal delivery
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",a35947f15c
0,"commit 72205289a0799c6d0a73107198098b830dbea2f9
Author: Matheus Ferst <matheus.ferst@eldorado.org.br>
Date:   Thu May 20 16:51:42 2021 -0300

    scripts/checkpatch.pl: process .c.inc and .h.inc files as C source
    
    Change the regex used to determine whether a file should be processed as
    C source to include .c.inc and .h.inc extensions.
    
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Message-Id: <20210520195142.941261-1-matheus.ferst@eldorado.org.br>
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>",72205289a0
0,"commit 7bb17a9263665c7cb0b93e6889e66bb62b9f71c1
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Wed Jun 2 11:35:27 2021 +0100

    tests/vm: expose --source-path to scripts to find extra files
    
    Currently the centos8 image expects to run an in-src build to find the
    kick starter file. Fix this.
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210602103527.32021-1-alex.bennee@linaro.org>",7bb17a9263
0,"commit e2d301780953dea5f0065bcfccf261c2bf3f7e98
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Tue May 25 10:25:53 2021 +0200

    gitlab-ci: Split gprof-gcov job
    
    This job is hitting the 70min limit, so split it in 2 tasks.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210525082556.4011380-7-f4bug@amsat.org>",e2d3017809
0,"commit b114a0b94338ea36be2e3a8efb36a82c7b298cc4
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Wed Jun 2 16:32:47 2021 +0100

    gitlab: work harder to avoid false positives in checkpatch
    
    This copies the behaviour of patchew's configuration to make the diff
    algorithm generate a minimal diff.
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Message-Id: <20210602153247.27651-1-alex.bennee@linaro.org>",b114a0b943
0,"commit e2ff831462d8783d5ba822db971c0d91380cc7c7
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Thu May 27 17:03:19 2021 +0100

    tests/acceptance: tag various arm tests as TCG only
    
    We should never be trying to run most of these models under a KVM
    environment.
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Tested-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210527160319.19834-7-alex.bennee@linaro.org>",e2ff831462
0,"commit 31fa83bd2b3293227c50a646ee74ded6b70b87f4
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Thu May 27 17:03:16 2021 +0100

    tests/tcg/configure.sh: tweak quoting of target_compiler
    
    If you configure the host compiler with a multi-command stanza like:
    
      --cc=""ccache gcc""
    
    then the configure.sh machinery falls over with confusion. Work around
    this by ensuring we correctly quote so where we need a complete
    evaluation we get it. Of course the has() check needs single variable
    so we need to unquote that. This does mean it essentially checks that
    just the ccache command exits but if we got past that step we still
    check the compiler actually does something.
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Cc: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210527160319.19834-4-alex.bennee@linaro.org>",31fa83bd2b
0,"commit 63de93530fe7d56dc0ba8b95f1dc8ba43ec237f3
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Thu May 27 17:03:15 2021 +0100

    meson.build: fix cosmetics of compiler display
    
    If you specify something like --cc=""ccache gcc"" on your configure line
    the summary output misses the rest of the cmd_array. Do some string
    joining to make it complete.
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Tested-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210527160319.19834-3-alex.bennee@linaro.org>",63de93530f
0,"commit 81c4edc39e550efd639f7730dd94029e04cf7b96
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Thu May 27 17:03:14 2021 +0100

    tests/tcg: add a multiarch signals test to stress test signal delivery
    
    This adds a simple signal test that combines the POSIX timer_create
    with signal delivery across multiple threads. The aim is to provide a
    bit more of a stress test to flush out signal handling issues for
    easily than the occasional random crash we sometimes see in linux-test
    or threadcount.
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210527160319.19834-2-alex.bennee@linaro.org>",81c4edc39e
0,"commit df77d45a51412ca84abd7f1490b48c1bccf07057
Author: Xie Yongji <xieyongji@bytedance.com>
Date:   Mon May 17 20:32:46 2021 +0800

    vhost-vdpa: Remove redundant declaration of address_space_memory
    
    The symbol address_space_memory are already declared in
    include/exec/address-spaces.h. So let's add this header file
    and remove the redundant declaration in include/hw/virtio/vhost-vdpa.h.
    
    Signed-off-by: Xie Yongji <xieyongji@bytedance.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Message-Id: <20210517123246.999-1-xieyongji@bytedance.com>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",df77d45a51
0,"commit eeae5466c47ef06e8cc59e2cb114e094e722e389
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed Jun 2 19:07:59 2021 +0200

    scripts/oss-fuzz: Fix typo in documentation
    
    While we only use stdin, the chardev is named 'stdio'.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alexander Bulekov <alxndr@bu.edu>
    Message-Id: <20210602170759.2500248-4-f4bug@amsat.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",eeae5466c4
0,"commit 639785601963af82eefa656ca41360e7266e73d6
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed Jun 2 19:07:58 2021 +0200

    target/mips: Fix 'Uncoditional' typo
    
    Fix Uncoditional -> Unconditional typo.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Message-Id: <20210602170759.2500248-3-f4bug@amsat.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",6397856019
0,"commit 8daec64be9a5346da17ddba47aadb33617755478
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:15:58 2021 +0200

    target/hppa: Remove unused 'memory.h' header
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517101558.1040191-1-f4bug@amsat.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",8daec64be9
0,"commit 69b66e49779bb87edb6c6bb5bac2b3527f7dbb71
Author: Thomas Huth <thuth@redhat.com>
Date:   Mon May 31 09:32:55 2021 +0200

    hw/display/macfb: Classify the ""nubus-macfb"" as display device
    
    The ""nubus-macfb"" currently shows up as uncategorized device in
    the output of ""-device help"". Put it into the display category
    to fix this ugliness.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-Id: <20210531073255.46286-1-thuth@redhat.com>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",69b66e4977
0,"commit dd6921894905c8ce0664a77f9dac78408bc3b52d
Author: Pavel Dovgalyuk <pavel.dovgalyuk@ispras.ru>
Date:   Tue May 11 11:40:10 2021 +0300

    target/nios2: fix page-fit instruction count
    
    This patch fixes calculation of number of the instructions
    that fit the current page. It prevents creation of the translation
    blocks that cross the page boundaries. It is required for deterministic
    exception generation in icount mode.
    
    Signed-off-by: Pavel Dovgalyuk <Pavel.Dovgalyuk@ispras.ru>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <162072241046.823357.10485774346114851009.stgit@pasha-ThinkPad-X280>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",dd69218949
0,"commit d7878875ae09e9c59aa2bd52e6f289cb845e944e
Author: John Snow <jsnow@redhat.com>
Date:   Tue May 11 15:29:50 2021 -0400

    docs: fix broken reference
    
    Long story short, we need a space here for the reference to work
    correctly.
    
    Longer story:
    
    Without the space, kerneldoc generates a line like this:
    
    one of :c:type:`MemoryListener.region_add\(\) <MemoryListener>`,:c:type:`MemoryListener.region_del\(\)
    
    Sphinx does not process the role information correctly, so we get this
    (my pseudo-notation) construct:
    
    <text>,:c:type:</text>
    <reference target=""MemoryListener"">MemoryListener.region_del()</reference>
    
    which does not reference the desired entity, and leaves some extra junk
    in the rendered output. See
    https://qemu-project.gitlab.io/qemu/devel/memory.html#c.MemoryListener
    member log_start for an example of the broken output as it looks today.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Message-Id: <20210511192950.2061326-1-jsnow@redhat.com>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",d7878875ae
0,"commit 180d4ef3ad08f2f5073184e1fa763c230fe4750f
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 07:52:43 2021 +0200

    linux-user/syscall: Constify bitmask_transtbl fcntl/mmap flags_tlb[]
    
    Keep bitmask_transtbl in .rodata by marking the arrays const.
    
    Reviewed-by: Laurent Vivier <laurent@vivier.eu>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-Id: <20210517055243.830491-1-f4bug@amsat.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",180d4ef3ad
0,"commit 585190902a3baae3a1609c30a9e485ec072dd72f
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sun May 16 22:50:34 2021 +0200

    misc: Correct relative include path
    
    Headers should be included from the 'include/' directory,
    not from the root directory.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-Id: <20210516205034.694788-1-f4bug@amsat.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",585190902a
0,"commit d84451d38e9a36ff08af9b1424ecca51ba45e3ac
Author: Dmitry Voronetskiy <vda1999@yandex.ru>
Date:   Wed May 19 14:35:28 2021 +0300

    i386/kvm: The value passed to strerror should be positive
    
    Signed-off-by: Dmitry Voronetskiy <vda1999@yandex.ru>
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Message-Id: <20210519113528.12474-1-davoronetskiy@gmail.com>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",d84451d38e
0,"commit 0d42cd5c1d370701c9f17367115244fbaedd2ea1
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sun May 16 22:53:33 2021 +0200

    target/riscv: Do not include 'pmp.h' in user emulation
    
    Physical Memory Protection is a system feature.
    Avoid polluting the user-mode emulation by its definitions.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
    Message-Id: <20210516205333.696094-1-f4bug@amsat.org>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",0d42cd5c1d
0,"commit 6f398e533f5e259b4f937f4aa9de970f7201d166
Merge: 908a87706e 0006039e29
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Sat Jun 5 11:25:52 2021 +0100

    Merge remote-tracking branch 'remotes/rth-gitlab/tags/pull-tcg-20210604' into staging
    
    Host vector support for arm neon.
    
    # gpg: Signature made Fri 04 Jun 2021 19:56:59 BST
    # gpg:                using RSA key 7A481E78868B4DB6A85A05C064DF38E8AF7E215F
    # gpg:                issuer ""richard.henderson@linaro.org""
    # gpg: Good signature from ""Richard Henderson <richard.henderson@linaro.org>"" [full]
    # Primary key fingerprint: 7A48 1E78 868B 4DB6 A85A  05C0 64DF 38E8 AF7E 215F
    
    * remotes/rth-gitlab/tags/pull-tcg-20210604:
      tcg/arm: Implement TCG_TARGET_HAS_rotv_vec
      tcg/arm: Implement TCG_TARGET_HAS_roti_vec
      tcg/arm: Implement TCG_TARGET_HAS_shv_vec
      tcg/arm: Implement TCG_TARGET_HAS_bitsel_vec
      tcg/arm: Implement TCG_TARGET_HAS_minmax_vec
      tcg/arm: Implement TCG_TARGET_HAS_sat_vec
      tcg/arm: Implement TCG_TARGET_HAS_mul_vec
      tcg/arm: Implement TCG_TARGET_HAS_shi_vec
      tcg/arm: Implement andc, orc, abs, neg, not vector operations
      tcg/arm: Implement minimal vector operations
      tcg/arm: Implement tcg_out_dup*_vec
      tcg/arm: Implement tcg_out_mov for vector types
      tcg/arm: Implement tcg_out_ld/st for vector types
      tcg/arm: Add host vector framework
      tcg: Change parameters for tcg_target_const_match
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",6f398e533f
0,"commit 0006039e29b9e6118beab300146f7c4931f7a217
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 14:20:57 2020 -0700

    tcg/arm: Implement TCG_TARGET_HAS_rotv_vec
    
    Implement via expansion, so don't actually set TCG_TARGET_HAS_rotv_vec.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",0006039e29
0,"commit 5047ae648b7f25d3cdb6ce4995c62aa7806abd7f
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 13:26:48 2020 -0700

    tcg/arm: Implement TCG_TARGET_HAS_roti_vec
    
    Implement via expansion, so don't actually set TCG_TARGET_HAS_roti_vec.
    For NEON, this is shift-right followed by shift-left-and-insert.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",5047ae648b
0,"commit 31d366390cc4316e55362d40cfc52542d6eea5ab
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 13:13:10 2020 -0700

    tcg/arm: Implement TCG_TARGET_HAS_shv_vec
    
    The three vector shift by vector operations are all implemented via
    expansion.  Therefore do not actually set TCG_TARGET_HAS_shv_vec,
    as none of shlv_vec, shrv_vec, sarv_vec may actually appear in the
    instruction stream, and therefore also do not appear in tcg_target_op_def.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",31d366390c
0,"commit f2b46c7162f86b05bbc05f1728b1d2a0e6a9e457
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 12:54:37 2020 -0700

    tcg/arm: Implement TCG_TARGET_HAS_bitsel_vec
    
    NEON has 3 instructions implementing this 4 argument operation,
    with each insn overlapping a different logical input onto the
    destination register.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",f2b46c7162
0,"commit dbbeff77645242241fe2296b88a7b1d3b3614ffe
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 12:44:06 2020 -0700

    tcg/arm: Implement TCG_TARGET_HAS_minmax_vec
    
    This is minimum and maximum, signed and unsigned.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",dbbeff7764
0,"commit 4fcd301707ccc656f27e3dc324cdbe20122a9740
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 12:37:36 2020 -0700

    tcg/arm: Implement TCG_TARGET_HAS_sat_vec
    
    This is saturating add and subtract, signed and unsigned.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",4fcd301707
0,"commit 752b17693e7af43ba77cee59eb9a1ec6966b3ded
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 12:30:17 2020 -0700

    tcg/arm: Implement TCG_TARGET_HAS_mul_vec
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",752b17693e
0,"commit d4c4e9c51b91d413cf3020ce80ba4914186bfbb4
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 12:24:28 2020 -0700

    tcg/arm: Implement TCG_TARGET_HAS_shi_vec
    
    This consists of the three immediate shifts: shli, shri, sari.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",d4c4e9c51b
0,"commit 7df44cf6e9e5726c5f9c56a398fc606566673007
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 11:58:47 2020 -0700

    tcg/arm: Implement andc, orc, abs, neg, not vector operations
    
    These logical and arithmetic operations are optional, but are
    trivial to accomplish with the existing infrastructure.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",7df44cf6e9
0,"commit d74b86ed4ad452eb5069ca0c168c731a5c429127
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 15:54:33 2020 -0700

    tcg/arm: Implement minimal vector operations
    
    Implementing dup2, add, sub, and, or, xor as the minimal set.
    This allows us to actually enable neon in the header file.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",d74b86ed4a
0,"commit 213e8d84735f56e16d4485509ef48ccb6488d4a9
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Sep 5 00:03:27 2020 -0700

    tcg/arm: Implement tcg_out_dup*_vec
    
    Most of dupi is copied from tcg/aarch64, which has the same
    encoding for AdvSimdExpandImm.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",213e8d8473
0,"commit 2df2a8cf77e76370698164e3d361e07075d2a699
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon May 3 16:48:07 2021 -0700

    tcg/arm: Implement tcg_out_mov for vector types
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",2df2a8cf77
0,"commit 6e49fad23f56f2618ddcbca78f0d4e1fc692ae9d
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon May 3 16:48:03 2021 -0700

    tcg/arm: Implement tcg_out_ld/st for vector types
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",6e49fad23f
0,"commit 000cf4777aadda69d14a6994ca0d195a36733cbd
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon May 3 16:47:52 2021 -0700

    tcg/arm: Add host vector framework
    
    Add registers and function stubs.  The functionality
    is disabled via use_neon_instructions defined to 0.
    
    We must still include results for the mandatory opcodes in
    tcg_target_op_def, as all opcodes are checked during tcg init.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",000cf4777a
0,"commit a4fbbd779a29b912299bc2830f0157513080ddb7
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Mon May 3 16:47:37 2021 -0700

    tcg: Change parameters for tcg_target_const_match
    
    Change the return value to bool, because that's what is should
    have been from the start.  Pass the ct mask instead of the whole
    TCGArgConstraint, as that's the only part that's relevant.
    
    Change the value argument to int64_t.  We will need the extra
    width for 32-bit hosts wanting to match vector constants.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",a4fbbd779a
0,"commit 908a87706ec6214d4a72245c8a0c9d327baf436b
Merge: 1cbd2d9149 49e987695a
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 4 17:27:29 2021 +0100

    Merge remote-tracking branch 'remotes/bonzini-gitlab/tags/for-upstream' into staging
    
    * OpenBSD cleanup (Brad)
    * fixes for the i386 accel/cpu refactoring (Claudio)
    * unmap test for emulated SCSI (Kit)
    * fix for iscsi module (myself)
    * fix for -readconfig of objects (myself)
    * fixes for x86 16-bit task switching (myself)
    * fix for x86 MOV from/to CR8 (Richard)
    
    # gpg: Signature made Fri 04 Jun 2021 12:53:32 BST
    # gpg:                using RSA key F13338574B662389866C7682BFFBD25F78C7AE83
    # gpg:                issuer ""pbonzini@redhat.com""
    # gpg: Good signature from ""Paolo Bonzini <bonzini@gnu.org>"" [full]
    # gpg:                 aka ""Paolo Bonzini <pbonzini@redhat.com>"" [full]
    # Primary key fingerprint: 46F5 9FBD 57D6 12E7 BFD4  E2F7 7E15 100C CD36 69B1
    #      Subkey fingerprint: F133 3857 4B66 2389 866C  7682 BFFB D25F 78C7 AE83
    
    * remotes/bonzini-gitlab/tags/for-upstream:
      vl: plug -object back into -readconfig
      vl: plumb keyval-based options into -readconfig
      qemu-config: parse configuration files to a QDict
      i386: run accel_cpu_instance_init as post_init
      i386: reorder call to cpu_exec_realizefn
      tests/qtest/virtio-scsi-test: add unmap large LBA with 4k blocks test
      target/i386: Fix decode of cr8
      target/i386: tcg: fix switching from 16-bit to 32-bit tasks or vice versa
      target/i386: tcg: fix loading of registers from 16-bit TSS
      target/i386: tcg: fix segment register offsets for 16-bit TSS
      oslib-posix: Remove OpenBSD workaround for fcntl(""/dev/null"", F_SETFL, O_NONBLOCK) failure
      iscsi: link libm into the module
      meson: allow optional dependencies for block modules
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",908a87706e
0,"commit 1cbd2d914939ee6028e9688d4ba859a528c28405
Merge: 5a95f5ce3c 90322e646e
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 4 13:38:48 2021 +0100

    Merge remote-tracking branch 'remotes/jasowang/tags/net-pull-request' into staging
    
    # gpg: Signature made Fri 04 Jun 2021 08:26:16 BST
    # gpg:                using RSA key EF04965B398D6211
    # gpg: Good signature from ""Jason Wang (Jason Wang on RedHat) <jasowang@redhat.com>"" [marginal]
    # gpg: WARNING: This key is not certified with sufficiently trusted signatures!
    # gpg:          It is not certain that the signature belongs to the owner.
    # Primary key fingerprint: 215D 46F4 8246 689E C77F  3562 EF04 965B 398D 6211
    
    * remotes/jasowang/tags/net-pull-request:
      MAINTAINERS: Added eBPF maintainers information.
      docs: Added eBPF documentation.
      virtio-net: Added eBPF RSS to virtio-net.
      ebpf: Added eBPF RSS loader.
      ebpf: Added eBPF RSS program.
      net: Added SetSteeringEBPF method for NetClientState.
      net/tap: Added TUNSETSTEERINGEBPF code.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",1cbd2d9149
0,"commit 49e987695a1873a769a823604f9065aa88e00c55
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 24 06:57:52 2021 -0400

    vl: plug -object back into -readconfig
    
    Commit bc2f4fcb1d (""qom: move user_creatable_add_opts logic to vl.c
    and QAPIfy it"", 2021-03-19) switched the creation of objects from
    qemu_opts_foreach to a bespoke QTAILQ in preparation for supporting JSON
    syntax in -object.
    
    Unfortunately in doing so it lost support for [object] stanzas in
    configuration files and also for ""-set object.ID.KEY=VAL"".  The latter
    is hard to re-establish and probably best solved by deprecating -set.
    This patch uses the infrastructure introduced by the previous two
    patches in order to parse QOM objects correctly from configuration
    files.
    
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: qemu-stable@nongnu.org
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210524105752.3318299-4-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",49e987695a
0,"commit c0d4aa82f895af67cbf7772324e05605e22b4162
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 24 06:57:51 2021 -0400

    vl: plumb keyval-based options into -readconfig
    
    Let -readconfig support parsing command line options into QDict or
    QemuOpts.  This will be used to add back support for objects in
    -readconfig.
    
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: qemu-stable@nongnu.org
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210524105752.3318299-3-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",c0d4aa82f8
0,"commit 37701411397c7b7d709ae92abd347cc593940ee5
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 24 06:57:50 2021 -0400

    qemu-config: parse configuration files to a QDict
    
    Change the parser to put the values into a QDict and pass them
    to a callback.  qemu_config_parse's QemuOpts creation is
    itself turned into a callback function.
    
    This is useful for -readconfig to support keyval-based options;
    getting a QDict from the parser removes a roundtrip from
    QDict to QemuOpts and then back to QDict.
    
    Unfortunately there is a disadvantage in that semantic errors will
    point to the last line of the group, because the entries of the QDict
    do not have a location attached.
    
    Cc: Kevin Wolf <kwolf@redhat.com>
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20210524105752.3318299-2-pbonzini@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",3770141139
0,"commit 4db4385a7ab6512e9af08305f5725b26c8a980ee
Author: Claudio Fontana <cfontana@suse.de>
Date:   Thu Jun 3 14:30:01 2021 +0200

    i386: run accel_cpu_instance_init as post_init
    
    This fixes host and max cpu initialization, by running the accel cpu
    initialization only after all instance init functions are called for all
    X86 cpu subclasses.
    
    The bug this is fixing is related to the ""max"" and ""host"" i386 cpu
    subclasses, which set cpu->max_features, which is then used at cpu
    realization time.
    
    In order to properly split the accel-specific max features code that
    needs to be executed at cpu instance initialization time,
    
    we cannot call the accel cpu initialization at the end of the x86 base
    class initialization, or we will have no way to specialize
    ""max features"" cpu behavior, overriding the ""max"" cpu class defaults,
    and checking for the ""max features"" flag itself.
    
    This patch moves the accel-specific cpu instance initialization to after
    all x86 cpu instance code has been executed, including subclasses,
    
    so that proper initialization of cpu ""host"" and ""max"" can be restored.
    
    Fixes: f5cc5a5c (""i386: split cpu accelerators from cpu.c,""...)
    Cc: Eduardo Habkost <ehabkost@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Claudio Fontana <cfontana@suse.de>
    Message-Id: <20210603123001.17843-3-cfontana@suse.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",4db4385a7a
0,"commit 662175b91ff2c0d56f709345b0bf9534ec2a218d
Author: Claudio Fontana <cfontana@suse.de>
Date:   Thu Jun 3 14:30:00 2021 +0200

    i386: reorder call to cpu_exec_realizefn
    
    i386 realizefn code is sensitive to ordering, and recent commits
    aimed at refactoring it, splitting accelerator-specific code,
    broke assumptions which need to be fixed.
    
    We need to:
    
    * process hyper-v enlightements first, as they assume features
      not to be expanded
    
    * only then, expand features
    
    * after expanding features, attempt to check them and modify them in the
      accel-specific realizefn code called by cpu_exec_realizefn().
    
    * after the framework has been called via cpu_exec_realizefn,
      the code can check for what has or hasn't been set by accel-specific
      code, or extend its results, ie:
    
      - check and evenually set code_urev default
      - modify cpu->mwait after potentially being set from host CPUID.
      - finally check for phys_bits assuming all user and accel-specific
        adjustments have already been taken into account.
    
    Fixes: f5cc5a5c (""i386: split cpu accelerators from cpu.c""...)
    Fixes: 30565f10 (""cpu: call AccelCPUClass::cpu_realizefn in""...)
    Cc: Eduardo Habkost <ehabkost@redhat.com>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Claudio Fontana <cfontana@suse.de>
    Message-Id: <20210603123001.17843-2-cfontana@suse.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",662175b91f
0,"commit 6b731a96aa743a4d384197acb4a6038efbb492b4
Author: Kit Westneat <kit.westneat@gmail.com>
Date:   Thu Jun 3 14:20:22 2021 +0000

    tests/qtest/virtio-scsi-test: add unmap large LBA with 4k blocks test
    
    Add test for issue #345
    
    Signed-off-by: Kit Westneat <kit.westneat@gmail.com>
    Message-Id: <20210603142022.676395-1-kit.westneat@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",6b731a96aa
0,"commit e18a6ec8c4516f2c2b973f452207e74c1b608414
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 20:55:11 2021 -0700

    target/i386: Fix decode of cr8
    
    A recent cleanup did not recognize that there are two ways
    to encode cr8: one via the LOCK and the other via REX.
    
    Fixes: 7eff2e7c
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/380
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210602035511.96834-1-richard.henderson@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",e18a6ec8c4
0,"commit 1b627f389f9da48aa8f28808770a731c1e09c338
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Jun 1 15:36:00 2021 +0200

    target/i386: tcg: fix switching from 16-bit to 32-bit tasks or vice versa
    
    The format of the task state segment is governed by bit 3 in the
    descriptor type field.  On a task switch, the format for saving
    is given by the current value of TR's type field, while the
    format for loading is given by the new descriptor.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",1b627f389f
0,"commit a5505f6b5b6f72eb21be7567fc1ef3ae2d5b3281
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Jun 1 15:34:26 2021 +0200

    target/i386: tcg: fix loading of registers from 16-bit TSS
    
    According to the manual, the high 16-bit of the registers are preserved
    when switching to a 16-bit task.  Implement this in switch_tss_ra.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",a5505f6b5b
0,"commit 28f6aa1178581c3647819e1abc4905899d97d3a2
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Jun 1 15:31:38 2021 +0200

    target/i386: tcg: fix segment register offsets for 16-bit TSS
    
    The TSS offsets in the manuals have only 2-byte slots for the
    segment registers.  QEMU incorrectly uses 4-byte slots, so
    that SS overlaps the LDT selector.
    
    Resolves: #382
    Reported-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",28f6aa1178
0,"commit 29c3d213f4ad69688638330728cff1a8769d7415
Author: Brad Smith <brad@comstyle.com>
Date:   Thu Apr 1 13:34:00 2021 -0400

    oslib-posix: Remove OpenBSD workaround for fcntl(""/dev/null"", F_SETFL, O_NONBLOCK) failure
    
    OpenBSD prior to 6.3 required a workaround to utilize fcntl(F_SETFL) on memory
    devices.
    
    Since modern verions of OpenBSD that are only officialy supported and buildable
    on do not have this issue I am garbage collecting this workaround.
    
    Signed-off-by: Brad Smith <brad@comstyle.com>
    
    Message-Id: <YGYECGXQhdamEJgC@humpty.home.comstyle.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",29c3d213f4
0,"commit 7fa1c63553242ad557c26dafd01e828ff1507c64
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Jun 1 10:00:48 2021 +0200

    iscsi: link libm into the module
    
    Depending on the configuration of QEMU, some binaries might not need libm
    at all.  In that case libiscsi, which uses exp(), will fail to load.
    Link it in the module explicitly.
    
    Reported-by: Yi Sun <yisun@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",7fa1c63553
0,"commit 96acfb1f2552c24af6b3ed886daabe2bd3ceff2d
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Jun 1 09:54:10 2021 +0200

    meson: allow optional dependencies for block modules
    
    Right now all dependencies for block modules are passed to
    module_ss.add(when: ...), so they are mandatory.  In the next patch we
    will need to add a libm dependency to a module, but libm does not exist
    on all systems.  So, modify the creation of module_ss and modsrc so that
    dependencies can also be passed to module_ss.add(if_true: ...).
    
    While touching the array, remove the useless dependency of the curl
    module on glib.  glib is always linked in QEMU and in fact all other
    block modules also need it, but they don't have to specify it.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",96acfb1f25
0,"commit 5a95f5ce3cd5842cc8f61a91ecd4fb4e8d10104f
Merge: 453d9c61dd 5d0204b82a
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri Jun 4 10:04:11 2021 +0100

    Merge remote-tracking branch 'remotes/rth-gitlab/tags/pull-fpu-20210603' into staging
    
    Finish conversion of float128 and floatx80 to FloatParts.
    Implement float128_muladd and float128_{min,max}*.
    Optimize int-to-float conversion with hard-float.
    
    # gpg: Signature made Thu 03 Jun 2021 22:13:10 BST
    # gpg:                using RSA key 7A481E78868B4DB6A85A05C064DF38E8AF7E215F
    # gpg:                issuer ""richard.henderson@linaro.org""
    # gpg: Good signature from ""Richard Henderson <richard.henderson@linaro.org>"" [full]
    # Primary key fingerprint: 7A48 1E78 868B 4DB6 A85A  05C0 64DF 38E8 AF7E 215F
    
    * remotes/rth-gitlab/tags/pull-fpu-20210603: (29 commits)
      softfloat: Use hard-float for {u}int64_to_float{32,64}
      tests/fp: Enable more tests
      softfloat: Convert modrem operations to FloatParts
      softfloat: Move floatN_log2 to softfloat-parts.c.inc
      softfloat: Convert float32_exp2 to FloatParts
      softfloat: Convert floatx80 compare to FloatParts
      softfloat: Convert floatx80_scalbn to FloatParts
      softfloat: Convert floatx80 to integer to FloatParts
      softfloat: Convert floatx80 float conversions to FloatParts
      softfloat: Convert integer to floatx80 to FloatParts
      softfloat: Convert floatx80_round_to_int to FloatParts
      softfloat: Convert floatx80_round to FloatParts
      softfloat: Convert floatx80_sqrt to FloatParts
      softfloat: Convert floatx80_div to FloatParts
      softfloat: Convert floatx80_mul to FloatParts
      softfloat: Convert floatx80_add/sub to FloatParts
      tests/fp/fp-test: Reverse order of floatx80 precision tests
      softfloat: Adjust parts_uncanon_normal for floatx80
      softfloat: Introduce Floatx80RoundPrec
      softfloat: Reduce FloatFmt
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",5a95f5ce3c
0,"commit 90322e646e87c1440661cb3ddbc0cc94309d8a4f
Author: Andrew Melnychenko <andrew@daynix.com>
Date:   Fri May 14 14:48:35 2021 +0300

    MAINTAINERS: Added eBPF maintainers information.
    
    Signed-off-by: Yuri Benditovich <yuri.benditovich@daynix.com>
    Signed-off-by: Andrew Melnychenko <andrew@daynix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",90322e646e
0,"commit 946456200e4f32a5a6cb4ae851dc5a9345ec68cf
Author: Andrew Melnychenko <andrew@daynix.com>
Date:   Fri May 14 14:48:34 2021 +0300

    docs: Added eBPF documentation.
    
    Signed-off-by: Yuri Benditovich <yuri.benditovich@daynix.com>
    Signed-off-by: Andrew Melnychenko <andrew@daynix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",946456200e
0,"commit 0145c3934895e2cb2b8bd679ca274bc5f7e76de7
Author: Andrew Melnychenko <andrew@daynix.com>
Date:   Fri May 14 14:48:33 2021 +0300

    virtio-net: Added eBPF RSS to virtio-net.
    
    When RSS is enabled the device tries to load the eBPF program
    to select RX virtqueue in the TUN. If eBPF can be loaded
    the RSS will function also with vhost (works with kernel 5.8 and later).
    Software RSS is used as a fallback with vhost=off when eBPF can't be loaded
    or when hash population requested by the guest.
    
    Signed-off-by: Yuri Benditovich <yuri.benditovich@daynix.com>
    Signed-off-by: Andrew Melnychenko <andrew@daynix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",0145c39348
0,"commit 46627f41b6b781885c64a2b12814060a7ca8da36
Author: Andrew Melnychenko <andrew@daynix.com>
Date:   Fri May 14 14:48:32 2021 +0300

    ebpf: Added eBPF RSS loader.
    
    Added function that loads RSS eBPF program.
    Added stub functions for RSS eBPF loader.
    Added meson and configuration options.
    
    By default, eBPF feature enabled if libbpf is present in the build system.
    libbpf checked in configuration shell script and meson script.
    
    Signed-off-by: Yuri Benditovich <yuri.benditovich@daynix.com>
    Signed-off-by: Andrew Melnychenko <andrew@daynix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",46627f41b6
0,"commit f3fa412de28ae3cb31d38811d30a77e4e20456cc
Author: Andrew Melnychenko <andrew@daynix.com>
Date:   Fri May 14 14:48:31 2021 +0300

    ebpf: Added eBPF RSS program.
    
    RSS program and Makefile to build it.
    The bpftool used to generate '.h' file.
    The data in that file may be loaded by libbpf.
    EBPF compilation is not required for building qemu.
    You can use Makefile if you need to regenerate rss.bpf.skeleton.h.
    
    Signed-off-by: Yuri Benditovich <yuri.benditovich@daynix.com>
    Signed-off-by: Andrew Melnychenko <andrew@daynix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",f3fa412de2
0,"commit 8f364e344c3e71d4cc4e683d21241f6c36d62a5e
Author: Andrew Melnychenko <andrew@daynix.com>
Date:   Fri May 14 14:48:30 2021 +0300

    net: Added SetSteeringEBPF method for NetClientState.
    
    For now, that method supported only by Linux TAP.
    Linux TAP uses TUNSETSTEERINGEBPF ioctl.
    
    Signed-off-by: Andrew Melnychenko <andrew@daynix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",8f364e344c
0,"commit 78258debe03c6034365884cbfb05679d6938aaac
Author: Andrew Melnychenko <andrew@daynix.com>
Date:   Fri May 14 14:48:29 2021 +0300

    net/tap: Added TUNSETSTEERINGEBPF code.
    
    Additional code that will be used for eBPF setting steering routine.
    
    Signed-off-by: Andrew Melnychenko <andrew@daynix.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",78258debe0
0,"commit 5d0204b82ade0ea0630d6add894954135ee54ab1
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sun May 16 09:52:52 2021 -0500

    softfloat: Use hard-float for {u}int64_to_float{32,64}
    
    For the normal case of no additional scaling, this reduces the
    profile contribution of int64_to_float64 to the testcase in the
    linked issue from 0.81% to 0.04%.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/134
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",5d0204b82a
0,"commit 90d004524e31a3efd3352bd1e6a3a312d266cfb0
Author: Alex Bennée <alex.bennee@linaro.org>
Date:   Tue May 11 19:47:49 2021 -0500

    tests/fp: Enable more tests
    
    Fix the trivial typo in extF80_lt_quiet, and re-enable
    all of the floatx80 tests that are now fixed.
    
    Signed-off-by: Alex Bennée <alex.bennee@linaro.org>
    Message-ID: <87bl9iyahr.fsf@linaro.org>
    [rth: Squash the fix for lt_quiet, and enable that too.]
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",90d004524e
0,"commit feaf2e9c063001a5f9afac0cc1af4ed9dc2af9bc
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri May 7 18:40:28 2021 -0700

    softfloat: Convert modrem operations to FloatParts
    
    Rename to parts$N_modrem.  This was the last use of a lot
    of the legacy infrastructure, so remove it as required.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",feaf2e9c06
0,"commit 2fa3546c8f55c4548240489518784b1da4f182b5
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sun Nov 22 10:42:22 2020 -0800

    softfloat: Move floatN_log2 to softfloat-parts.c.inc
    
    Rename to parts$N_log2.  Though this is partly a ruse, since I do not
    believe the code will succeed for float128 without work.  Which is ok
    for now, because we do not need this for more than float32 and float64.
    
    Since berkeley-testfloat-3 doesn't support log2, compare float64_log2
    vs the system log2.  Fix the errors for inputs near 1.0:
    
    test: 3ff00000000000b0  +0x1.00000000000b0p+0
      sf: 3d2fa00000000000  +0x1.fa00000000000p-45
    libm: 3d2fbd422b1bd36f  +0x1.fbd422b1bd36fp-45
    Error in fraction: 32170028290927 ulp
    
    test: 3feec24f6770b100  +0x1.ec24f6770b100p-1
      sf: bfad3740d13c9ec0  -0x1.d3740d13c9ec0p-5
    libm: bfad3740d13c9e98  -0x1.d3740d13c9e98p-5
    Error in fraction: 40 ulp
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",2fa3546c8f
0,"commit 572c4d862ff2b5f1525044639aa60ec5854c813d
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 19:20:23 2020 -0800

    softfloat: Convert float32_exp2 to FloatParts
    
    Keep the intermediate results in FloatParts instead of
    converting back and forth between float64.  Use muladd
    instead of separate mul+add.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",572c4d862f
0,"commit 1b96b006d23badf42c3fb3378413dcab1d3d2da2
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 18:34:39 2020 -0800

    softfloat: Convert floatx80 compare to FloatParts
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",1b96b006d2
0,"commit 872e6991f01986ff6c7189cdf86f8fd719ff5f5c
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 18:32:06 2020 -0800

    softfloat: Convert floatx80_scalbn to FloatParts
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",872e6991f0
0,"commit a1fc527bfbba1e715f3f32f18c993f20e37c10f0
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 18:13:10 2020 -0800

    softfloat: Convert floatx80 to integer to FloatParts
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",a1fc527bfb
0,"commit 8ae5719cd4d315dba688efbfa092dd063be6f81c
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 18:02:23 2020 -0800

    softfloat: Convert floatx80 float conversions to FloatParts
    
    This is the last use of commonNaNT and all of the routines
    that use it, so remove all of them for Werror.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",8ae5719cd4
0,"commit 5f9529006ea37560c97b05661a84472431d25b91
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 17:40:25 2020 -0800

    softfloat: Convert integer to floatx80 to FloatParts
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",5f9529006e
0,"commit f9a95a78001a558a251fdd0701e24af303be5450
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 13:06:18 2020 -0800

    softfloat: Convert floatx80_round_to_int to FloatParts
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",f9a95a7800
0,"commit 45a76b71abadedb2ff77ea1cc4d03a13cf6f9f8b
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 12:51:14 2020 -0800

    softfloat: Convert floatx80_round to FloatParts
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",45a76b71ab
0,"commit aa5e19ccbdc0ded5403504820e381eac30db9345
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 18:27:24 2020 -0800

    softfloat: Convert floatx80_sqrt to FloatParts
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",aa5e19ccbd
0,"commit 38db99e2820e42b9eef90773a0a6bdb53b3d4dd1
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 12:44:47 2020 -0800

    softfloat: Convert floatx80_div to FloatParts
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",38db99e282
0,"commit 153f664a74dbda82ed0896ce46a4648818a55e37
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 12:42:02 2020 -0800

    softfloat: Convert floatx80_mul to FloatParts
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",153f664a74
0,"commit c1b6299be12d744f3baeb53f84ab5e018ec642b8
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 16:40:57 2020 -0800

    softfloat: Convert floatx80_add/sub to FloatParts
    
    Since this is the first such, this includes all of the
    packing and unpacking routines as well.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c1b6299be1
0,"commit 7ccae4ce7e4bb7c2f873986b6b6b0fc680e0a8bd
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 17:32:01 2020 -0800

    tests/fp/fp-test: Reverse order of floatx80 precision tests
    
    Many qemu softfloat will check floatx80_rounding_precision
    even when berkeley testfloat will not.  So begin with
    floatx80_precision_x, so that's the one we use
    when !FUNC_EFF_ROUNDINGPRECISION.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",7ccae4ce7e
0,"commit 98b3cff7537ad2a9ce0faa6ad0af4191bd066916
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 16:35:54 2020 -0800

    softfloat: Adjust parts_uncanon_normal for floatx80
    
    With floatx80_precision_x, the rounding happens across
    the break between words.  Notice this case with
    
      frac_lsb = round_mask + 1 -> 0
    
    and check the bits in frac_hi as needed.
    
    In addition, since frac_shift == 0, we won't implicitly clear
    round_mask via the right-shift, so explicitly clear those bits.
    This fixes rounding for floatx80_precision_[sd].
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",98b3cff753
0,"commit 8da5f1dbb0d7b97686d54584c70b55cb05f89007
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 21 09:33:36 2020 -0800

    softfloat: Introduce Floatx80RoundPrec
    
    Use an enumeration instead of raw 32/64/80 values.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",8da5f1dbb0
0,"commit d6e1f0cd59a59a27a2b109600653e57917cc9594
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Nov 20 18:28:31 2020 -0800

    softfloat: Reduce FloatFmt
    
    Remove frac_lsb, frac_lsbm1, roundeven_mask.  Compute
    these from round_mask in parts$N_uncanon_normal.
    
    With floatx80, round_mask will not be tied to frac_shift.
    Everything else is easily computable.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",d6e1f0cd59
0,"commit 25fdedf0d33e01ad4c950b7e4d58da498649aa29
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Fri Nov 20 12:11:08 2020 -0800

    softfloat: Split out parts_uncanon_normal
    
    We will need to treat the non-normal cases of floatx80 specially,
    so split out the normal case that we can reuse.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",25fdedf0d3
0,"commit 9261b245f061cb80410fdae7be8460eaa21a5d7d
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Wed Nov 18 12:14:37 2020 -0800

    softfloat: Move sqrt_float to softfloat-parts.c.inc
    
    Rename to parts$N_sqrt.
    Reimplement float128_sqrt with FloatParts128.
    
    Reimplement with the inverse sqrt newton-raphson algorithm from musl.
    This is significantly faster than even the berkeley sqrt n-r algorithm,
    because it does not use division instructions, only multiplication.
    
    Ordinarily, changing algorithms at the same time as migrating code is
    a bad idea, but this is the only way I found that didn't break one of
    the routines at the same time.
    
    Tested-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",9261b245f0
0,"commit 39626b0ce830e6cd99459a8168b35c6a57be21bc
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 14 20:28:02 2020 -0800

    softfloat: Move scalbn_decomposed to softfloat-parts.c.inc
    
    Rename to parts$N_scalbn.
    Reimplement float128_scalbn with FloatParts128.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",39626b0ce8
0,"commit 6eb169b89a509321c985346cea278d758108ada5
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 14 19:20:36 2020 -0800

    softfloat: Move compare_floats to softfloat-parts.c.inc
    
    Rename to parts$N_compare.  Rename all of the intermediate
    functions to ftype_do_compare.  Rename the hard-float functions
    to ftype_hs_compare.  Convert float128 to FloatParts128.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",6eb169b89a
0,"commit ceebc129e51ea3aa8dc81321046ed42432c49511
Author: David Hildenbrand <david@redhat.com>
Date:   Mon May 17 16:27:36 2021 +0200

    softfloat: Implement float128_(min|minnum|minnummag|max|maxnum|maxnummag)
    
    The float128 implementation is straight-forward.
    Unfortuantely, we don't have any tests we can simply adjust/unlock.
    
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Message-Id: <20210517142739.38597-24-david@redhat.com>
    [rth: Update for changed parts_minmax return value]
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",ceebc129e5
0,"commit e1c4667a9b91b1500e47f4cbb4e43a36136e6d29
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 14 16:52:38 2020 -0800

    softfloat: Move minmax_flags to softfloat-parts.c.inc
    
    Rename to parts$N_minmax.  Combine 3 bool arguments to a bitmask.
    Introduce ftype_minmax functions as a common optimization point.
    Fold bfloat16 expansions into the same macro as the other types.
    
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",e1c4667a9b
0,"commit 37c954a1b96a65d836705a6e530eeab58cc9d964
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 14 14:48:31 2020 -0800

    softfloat: Move uint_to_float to softfloat-parts.c.inc
    
    Rename to parts$N_uint_to_float.
    Reimplement uint64_to_float128 with FloatParts128.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",37c954a1b9
0,"commit e368951998ca6ffb0a1812af9beef916125dd769
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 14 14:40:27 2020 -0800

    softfloat: Move int_to_float to softfloat-parts.c.inc
    
    Rename to parts$N_sint_to_float.
    Reimplement int{32,64}_to_float128 with FloatParts128.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",e368951998
0,"commit 4ab4aef01830ad733a2552307630a1699d8caf72
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Nov 14 14:21:16 2020 -0800

    softfloat: Move round_to_uint_and_pack to softfloat-parts.c.inc
    
    Rename to parts$N_float_to_uint.  Reimplement
    float128_to_uint{32,64}{_round_to_zero} with FloatParts128.
    
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",4ab4aef018
0,"commit 453d9c61dd5681159051c6e4d07e7b2633de2e70
Merge: a97978bcc2 1c86188589
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 3 16:59:46 2021 +0100

    Merge remote-tracking branch 'remotes/pmaydell/tags/pull-target-arm-20210603' into staging
    
    target-arm queue:
     * Some not-yet-enabled preliminaries for M-profile MVE support
     * Consistently use ""Cortex-Axx"", not ""Cortex Axx"" in docs, comments
     * docs: Fix installation of man pages with Sphinx 4.x
     * Mark LDS{MIN,MAX} as signed operations
     * Fix missing syndrome value for DAIF and PAC check exceptions
     * Implement BFloat16 extensions
     * Refactoring of hvf accelerator code in preparation for aarch64 support
     * Fix some coverity nits in test code
    
    # gpg: Signature made Thu 03 Jun 2021 16:58:02 BST
    # gpg:                using RSA key E1A5C593CD419DE28E8315CF3C2525ED14360CDE
    # gpg:                issuer ""peter.maydell@linaro.org""
    # gpg: Good signature from ""Peter Maydell <peter.maydell@linaro.org>"" [ultimate]
    # gpg:                 aka ""Peter Maydell <pmaydell@gmail.com>"" [ultimate]
    # gpg:                 aka ""Peter Maydell <pmaydell@chiark.greenend.org.uk>"" [ultimate]
    # Primary key fingerprint: E1A5 C593 CD41 9DE2 8E83  15CF 3C25 25ED 1436 0CDE
    
    * remotes/pmaydell/tags/pull-target-arm-20210603: (45 commits)
      tests/unit/test-vmstate: Assert that dup() and mkstemp() succeed
      tests/qtest/tpm-tests: Remove unnecessary NULL checks
      tests/qtest/pflash-cfi02-test: Avoid potential integer overflow
      tests/qtest/hd-geo-test: Fix checks on mkstemp() return value
      tests/qtest/e1000e-test: Check qemu_recv() succeeded
      tests/qtest/bios-tables-test: Check for dup2() failure
      hvf: Simplify post reset/init/loadvm hooks
      hvf: Introduce hvf vcpu struct
      hvf: Remove hvf-accel-ops.h
      hvf: Make synchronize functions static
      hvf: Use cpu_synchronize_state()
      hvf: Split out common code on vcpu init and destroy
      hvf: Remove use of hv_uvaddr_t and hv_gpaddr_t
      hvf: Make hvf_set_phys_mem() static
      hvf: Move hvf internal definitions into common header
      hvf: Move cpu functions into common directory
      hvf: Move vcpu thread functions into common directory
      hvf: Move assert_hvf_ok() into common directory
      target/arm: Enable BFloat16 extensions
      linux-user/aarch64: Enable hwcap bits for bfloat16
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",453d9c61dd
0,"commit 1c861885894d840235954060050d240259f5340b
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue May 25 14:44:58 2021 +0100

    tests/unit/test-vmstate: Assert that dup() and mkstemp() succeed
    
    Coverity complains that we don't check for failures from dup()
    and mkstemp(); add asserts that these syscalls succeeded.
    
    Fixes: Coverity CID 1432516, 1432574
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210525134458.6675-7-peter.maydell@linaro.org",1c86188589
0,"commit d2304612b525e6a0d9df93717c0d1e5321b6b845
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue May 25 14:44:57 2021 +0100

    tests/qtest/tpm-tests: Remove unnecessary NULL checks
    
    Coverity points out that in tpm_test_swtpm_migration_test() we
    assume that src_tpm_addr and dst_tpm_addr are non-NULL (we
    pass them to tpm_util_migration_start_qemu() which will
    unconditionally dereference them) but then later explicitly
    check them for NULL. Remove the pointless checks.
    
    Fixes: Coverity CID 1432367, 1432359
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Message-id: 20210525134458.6675-6-peter.maydell@linaro.org",d2304612b5
0,"commit 909e4a0826cde069555d90a9797590c5988d9b7e
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue May 25 14:44:56 2021 +0100

    tests/qtest/pflash-cfi02-test: Avoid potential integer overflow
    
    Coverity points out that we calculate a 64-bit value using 32-bit
    arithmetic; add the cast to force the multiply to be done as 64-bits.
    (The overflow will never happen with the current test data.)
    
    Fixes: Coverity CID 1432320
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Message-id: 20210525134458.6675-5-peter.maydell@linaro.org",909e4a0826
0,"commit 2c398ee5e3a4b8db995ec4b211f28a1119bf10ca
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue May 25 14:44:55 2021 +0100

    tests/qtest/hd-geo-test: Fix checks on mkstemp() return value
    
    Coverity notices that the checks against mkstemp() failing in
    create_qcow2_with_mbr() are wrong: mkstemp returns -1 on failure but
    the check is just ""g_assert(fd)"".  Fix to use ""g_assert(fd >= 0)"",
    matching the correct check in create_test_img().
    
    Fixes: Coverity CID 1432274
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Message-id: 20210525134458.6675-4-peter.maydell@linaro.org",2c398ee5e3
0,"commit 380822edb3252962001a47c02facb7c7e977dc7d
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue May 25 14:44:54 2021 +0100

    tests/qtest/e1000e-test: Check qemu_recv() succeeded
    
    The e1000e_send_verify() test calls qemu_recv() but doesn't
    check that the call succeeded, which annoys Coverity. Add
    an explicit test check for the length of the data.
    
    (This is a test check, not a ""we assume this syscall always
    succeeds"", so we use g_assert_cmpint() rather than g_assert().)
    
    Fixes: Coverity CID 1432324
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Message-id: 20210525134458.6675-3-peter.maydell@linaro.org",380822edb3
0,"commit 3c65e439b2724cc70af31a87447a0c7292babac5
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue May 25 14:44:53 2021 +0100

    tests/qtest/bios-tables-test: Check for dup2() failure
    
    Coverity notes that we don't check for dup2() failing.  Add some
    assertions so that if it does ever happen we get some indication.
    (This is similar to how we handle other ""don't expect this syscall to
    fail"" checks in this test code.)
    
    Fixes: Coverity CID 1432346
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Message-id: 20210525134458.6675-2-peter.maydell@linaro.org",3c65e439b2
0,"commit bac969ef30e8a8b73acbeb6d68abff6f68b2056c
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:42:41 2021 +0100

    hvf: Simplify post reset/init/loadvm hooks
    
    The hooks we have that call us after reset, init and loadvm really all
    just want to say ""The reference of all register state is in the QEMU
    vcpu struct, please push it"".
    
    We already have a working pushing mechanism though called cpu->vcpu_dirty,
    so we can just reuse that for all of the above, syncing state properly the
    next time we actually execute a vCPU.
    
    This fixes PSCI resets on ARM, as they modify CPU state even after the
    post init call has completed, but before we execute the vCPU again.
    
    To also make the scheme work for x86, we have to make sure we don't
    move stale eflags into our env when the vcpu state is dirty.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Tested-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-13-agraf@csgraf.de
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",bac969ef30
0,"commit b533450e74500dd67f0aa49775809ea33bc465b7
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:34 2021 +0100

    hvf: Introduce hvf vcpu struct
    
    We will need more than a single field for hvf going forward. To keep
    the global vcpu struct uncluttered, let's allocate a special hvf vcpu
    struct, similar to how hax does it.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Tested-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-12-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",b533450e74
0,"commit d662ede2b1eb033883b7c96866e84e8b54524ccb
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:33 2021 +0100

    hvf: Remove hvf-accel-ops.h
    
    We can move the definition of hvf_vcpu_exec() into our internal
    hvf header, obsoleting the need for hvf-accel-ops.h.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-11-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",d662ede2b1
0,"commit 36464fafcb34c1599b6cd22e409a3de600974944
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:33 2021 +0100

    hvf: Make synchronize functions static
    
    The hvf accel synchronize functions are only used as input for local
    callback functions, so we can make them static.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-10-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",36464fafcb
0,"commit 65c725b5204f22987950b4368ab7db67bcc87f54
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:33 2021 +0100

    hvf: Use cpu_synchronize_state()
    
    There is no reason to call the hvf specific hvf_cpu_synchronize_state()
    when we can just use the generic cpu_synchronize_state() instead. This
    allows us to have less dependency on internal function definitions and
    allows us to make hvf_cpu_synchronize_state() static.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-9-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",65c725b520
0,"commit cfe58455f3b79810375cb4ef560071c1ecff6dea
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:32 2021 +0100

    hvf: Split out common code on vcpu init and destroy
    
    Until now, Hypervisor.framework has only been available on x86_64 systems.
    With Apple Silicon shipping now, it extends its reach to aarch64. To
    prepare for support for multiple architectures, let's start moving common
    code out into its own accel directory.
    
    This patch splits the vcpu init and destroy functions into a generic and
    an architecture specific portion. This also allows us to move the generic
    functions into the generic hvf code, removing exported functions.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-8-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",cfe58455f3
0,"commit 6e19f86a80746270ab2ab6fe4828c680d982fa72
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:32 2021 +0100

    hvf: Remove use of hv_uvaddr_t and hv_gpaddr_t
    
    The ARM version of Hypervisor.framework no longer defines these two
    types, so let's just revert to standard ones.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-7-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",6e19f86a80
0,"commit 3f965ef4e013d37391f5bb94c243d4a4b1825b1f
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:32 2021 +0100

    hvf: Make hvf_set_phys_mem() static
    
    The hvf_set_phys_mem() function is only called within the same file.
    Make it static.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-6-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",3f965ef4e0
0,"commit 861457ce73bc9e0e56d866b5c06e2c745fe53448
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:31 2021 +0100

    hvf: Move hvf internal definitions into common header
    
    Until now, Hypervisor.framework has only been available on x86_64 systems.
    With Apple Silicon shipping now, it extends its reach to aarch64. To
    prepare for support for multiple architectures, let's start moving common
    code out into its own accel directory.
    
    This patch moves a few internal struct and constant defines over.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-5-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",861457ce73
0,"commit 358e7505b2795d3df505661da7be9dc81eaa91d9
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:31 2021 +0100

    hvf: Move cpu functions into common directory
    
    Until now, Hypervisor.framework has only been available on x86_64 systems.
    With Apple Silicon shipping now, it extends its reach to aarch64. To
    prepare for support for multiple architectures, let's start moving common
    code out into its own accel directory.
    
    This patch moves CPU and memory operations over. While at it, make sure
    the code is consumable on non-i386 systems.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-4-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",358e7505b2
0,"commit 39a3445012e44b01f6a7e7b29cf7477ef2a656eb
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:31 2021 +0100

    hvf: Move vcpu thread functions into common directory
    
    Until now, Hypervisor.framework has only been available on x86_64 systems.
    With Apple Silicon shipping now, it extends its reach to aarch64. To
    prepare for support for multiple architectures, let's start moving common
    code out into its own accel directory.
    
    This patch moves the vCPU thread loop over.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-3-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",39a3445012
0,"commit d57bc3c1098f1614db1c5763f3672fe01d768972
Author: Alexander Graf <agraf@csgraf.de>
Date:   Thu Jun 3 14:09:30 2021 +0100

    hvf: Move assert_hvf_ok() into common directory
    
    Until now, Hypervisor.framework has only been available on x86_64 systems.
    With Apple Silicon shipping now, it extends its reach to aarch64. To
    prepare for support for multiple architectures, let's start moving common
    code out into its own accel directory.
    
    This patch moves assert_hvf_ok() and introduces generic build infrastructure.
    
    Signed-off-by: Alexander Graf <agraf@csgraf.de>
    Reviewed-by: Sergio Lopez <slp@redhat.com>
    Message-id: 20210519202253.76782-2-agraf@csgraf.de
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",d57bc3c109
0,"commit 3c93dfa42c394fdd55684f2fbf24cf2f39b97d47
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:17 2021 -0700

    target/arm: Enable BFloat16 extensions
    
    Disable BF16 again for !have_neon and !have_vfp during realize.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-13-richard.henderson@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",3c93dfa42c
0,"commit 6c47a9053cc2255ec444e0f964abd496fdce6433
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:16 2021 -0700

    linux-user/aarch64: Enable hwcap bits for bfloat16
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-12-richard.henderson@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",6c47a9053c
0,"commit 458d0ab6830f9bcd76af9df4d1d4db8ab646fcef
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:15 2021 -0700

    target/arm: Implement bfloat widening fma (indexed)
    
    This is BFMLAL{B,T} for both AArch64 AdvSIMD and SVE,
    and VFMA{B,T}.BF16 for AArch32 NEON.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-11-richard.henderson@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",458d0ab683
0,"commit 5693887f2e97335362d945c778f2bbddd4e9d1bb
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:14 2021 -0700

    target/arm: Implement bfloat widening fma (vector)
    
    This is BFMLAL{B,T} for both AArch64 AdvSIMD and SVE,
    and VFMA{B,T}.BF16 for AArch32 NEON.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-10-richard.henderson@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",5693887f2e
0,"commit 81266a1f58bf557280c6f7ce3cad1ba8ed8a56f1
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:13 2021 -0700

    target/arm: Implement bfloat16 matrix multiply accumulate
    
    This is BFMMLA for both AArch64 AdvSIMD and SVE,
    and VMMLA.BF16 for AArch32 NEON.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-9-richard.henderson@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",81266a1f58
0,"commit 839144784b613998edf7a7277ed2ed2015b0b4d7
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:12 2021 -0700

    target/arm: Implement bfloat16 dot product (indexed)
    
    This is BFDOT for both AArch64 AdvSIMD and SVE,
    and VDOT.BF16 for AArch32 NEON.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-8-richard.henderson@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",839144784b
0,"commit cb8657f7f9fcc2ebe8dfb1cbc9e572670d2af568
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:11 2021 -0700

    target/arm: Implement bfloat16 dot product (vector)
    
    This is BFDOT for both AArch64 AdvSIMD and SVE,
    and VDOT.BF16 for AArch32 NEON.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-7-richard.henderson@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",cb8657f7f9
0,"commit 60c8f7265d7eb51dfb38ea6701d10cbe2d7c7a64
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:10 2021 -0700

    softfpu: Add float_round_to_odd_inf
    
    For Arm BFDOT and BFMMLA, we need a version of round-to-odd
    that overflows to infinity, instead of the max normal number.
    
    Cc: Alex Bennée <alex.bennee@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-6-richard.henderson@linaro.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",60c8f7265d
0,"commit d29b17ca3eac79ab77c76ec8285698b0c57d04b2
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:09 2021 -0700

    target/arm: Implement vector float32 to bfloat16 conversion
    
    This is BFCVT{N,T} for both AArch64 AdvSIMD and SVE,
    and VCVT.BF16.F32 for AArch32 NEON.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-5-richard.henderson@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",d29b17ca3e
0,"commit 3a98ac40fa9fca85bb37f4281e872b7519e733c5
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:08 2021 -0700

    target/arm: Implement scalar float32 to bfloat16 conversion
    
    This is the 64-bit BFCVT and the 32-bit VCVT{B,T}.BF16.F32.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-4-richard.henderson@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",3a98ac40fa
0,"commit fc5200ee4583cb9110ee7bda71a65890d787882e
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:07 2021 -0700

    target/arm: Unify unallocated path in disas_fp_1src
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-3-richard.henderson@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",fc5200ee45
0,"commit c0b9e8a48906f25acce17c9b60447bb7fd9d5cd2
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue May 25 15:58:06 2021 -0700

    target/arm: Add isar_feature_{aa32, aa64, aa64_sve}_bf16
    
    Note that the SVE BFLOAT16 support does not require SVE2,
    it is an independent extension.
    
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210525225817.400336-2-richard.henderson@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",c0b9e8a489
0,"commit 9d75d45c0b88c87ac25ee4c65e724447834c1d3b
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Wed May 26 13:18:47 2021 +0100

    target/arm: use raise_exception_ra for stack limit exception
    
    The sequence cpu_restore_state() + raise_exception() is equivalent to
    raise_exception_ra(), so use that instead.  (In this case we never
    cared about the syndrome value, because M-profile doesn't use the
    syndrome; the old code was just written unnecessarily awkwardly.)
    
    Cc: Richard Henderson <richard.henderson@linaro.org>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    [PMM: Retain edited version of comment; rewrite commit message]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",9d75d45c0b
0,"commit 5bf100c3200bc74b5d7b4e430c3b23e60caf1605
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Wed May 26 13:18:46 2021 +0100

    target/arm: use raise_exception_ra for MTE check failure
    
    Now that raise_exception_ra restores the state before raising the
    exception we can use restore_exception_ra to perform the state restore +
    exception raising without clobbering the syndrome.
    
    Cc: Richard Henderson <richard.henderson@linaro.org>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    [PMM: Keep the one line of the comment that is still relevant]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",5bf100c320
0,"commit 154acaba0ea9675f175118787b9ca44cbbbc23b7
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Wed May 26 13:18:45 2021 +0100

    target/arm: fold do_raise_exception into raise_exception
    
    Now that there are no other users of do_raise_exception, fold it into
    raise_exception.
    
    Cc: Richard Henderson <richard.henderson@linaro.org>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",154acaba0e
0,"commit 6e0c60a2be30c333b06d3558a62b0f177199cbfb
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Wed May 26 13:18:44 2021 +0100

    target/arm: fix missing exception class
    
    The DAIF and PAC checks used raise_exception_ra to raise an exception
    and unwind CPU state but raise_exception_ra is currently designed for
    handling data aborts as the syndrome is partially precomputed and
    encoded in the TB and then merged in merge_syn_data_abort when handling
    the data abort.  Using raise_exception_ra for DAIF and PAC checks
    results in an empty syndrome being retrieved from data[2] in
    restore_state_to_opc and setting ESR to 0.  This manifested as:
    
      kvm [571]: Unknown exception class: esr: 0x000000 –
      Unknown/Uncategorized
    
    when launching a KVM guest when the host qemu used a CPU supporting
    EL2+pointer authentication and enabling pointer authentication in the
    guest.
    
    Rework raise_exception_ra such that the state is restored before raising
    the exception so that the exception is not clobbered by
    restore_state_to_opc.
    
    Fixes: 0d43e1a2d29a (""target/arm: Add PAuth helpers"")
    Cc: Richard Henderson <richard.henderson@linaro.org>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    [PMM: added comment]
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",6e0c60a2be
0,"commit 0711a634355a68cd83966872e387402a8b4b048a
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 19:07:20 2021 -0700

    target/arm: Mark LDS{MIN,MAX} as signed operations
    
    The operands to tcg_gen_atomic_fetch_s{min,max}_i64 must
    be signed, so that the inputs are properly extended.
    Zero extend the result afterward, as needed.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/364
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 20210602020720.47679-1-richard.henderson@linaro.org
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",0711a63435
0,"commit 269a7e97865cb863c9ca19e5f2e6a40ac9eddf82
Author: Damien Goutte-Gattat <dgouttegattat@incenp.org>
Date:   Mon May 3 17:14:22 2021 +0100

    docs: Fix installation of man pages with Sphinx 4.x
    
    The 4.x branch of Sphinx introduces a breaking change, as generated man
    pages are now written to subdirectories corresponding to the manual
    section they belong to. This results in `make install` erroring out when
    attempting to install the man pages, because they are not where it
    expects to find them.
    
    This patch restores the behavior of Sphinx 3.x regarding man pages.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/256
    Signed-off-by: Damien Goutte-Gattat <dgouttegattat@incenp.org>
    Message-id: 20210503161422.15028-1-dgouttegattat@incenp.org
    Reviewed-by: Peter Maydell <peter.maydell@linaro.org>
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",269a7e9786
0,"commit f548f20176cb5f440693120f9bde911dd3639748
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 27 10:51:52 2021 +0100

    arm: Consistently use ""Cortex-Axx"", not ""Cortex Axx""
    
    The official punctuation for Arm CPU names uses a hyphen, like
    ""Cortex-A9"". We mostly follow this, but in a few places usage
    without the hyphen has crept in. Fix those so we consistently
    use the same way of writing the CPU name.
    
    This commit was created with:
      git grep -z -l 'Cortex ' | xargs -0 sed -i 's/Cortex /Cortex-/'
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-id: 20210527095152.10968-1-peter.maydell@linaro.org",f548f20176
0,"commit 7cda2149521f25b7caedd464f2e35104d9990315
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 20 16:28:40 2021 +0100

    target/arm: Allow board models to specify initial NS VTOR
    
    Currently we allow board models to specify the initial value of the
    Secure VTOR register, using an init-svtor property on the TYPE_ARMV7M
    object which is plumbed through to the CPU.  Allow board models to
    also specify the initial value of the Non-secure VTOR via a similar
    init-nsvtor property.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210520152840.24453-10-peter.maydell@linaro.org",7cda214952
0,"commit b26b5629c0be4a9539833de4189184a224590d14
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 20 16:28:38 2021 +0100

    target/arm: Make FPSCR.LTPSIZE writable for MVE
    
    The M-profile FPSCR has an LTPSIZE field, but if MVE is not
    implemented it is read-only and always reads as 4; this is how QEMU
    currently handles it.
    
    Make the field writable when MVE is implemented.
    
    We can safely add the field to the MVE migration struct because
    currently no CPUs enable MVE and so the migration struct is never
    used.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210520152840.24453-8-peter.maydell@linaro.org",b26b5629c0
0,"commit 7c3d47dab908ac1770726e68cf72e47bb5a9cbcb
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 20 16:28:37 2021 +0100

    target/arm: Implement M-profile VPR register
    
    If MVE is implemented for an M-profile CPU then it has a VPR
    register, which tracks predication information.
    
    Implement the read and write handling of this register, and
    the migration of its state.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210520152840.24453-7-peter.maydell@linaro.org",7c3d47dab9
0,"commit 300137965dbacec02eb2e26b3c6763b491d1f1b2
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 20 16:28:36 2021 +0100

    target/arm: Fix return values in fp_sysreg_checks()
    
    The fp_sysreg_checks() function is supposed to be returning an
    FPSysRegCheckResult, which is an enum with three possible values.
    However, three places in the function ""return false"" (a hangover from
    a previous iteration of the design where the function just returned a
    bool).  Make these return FPSysRegCheckFailed instead (for no
    functional change, since both false and FPSysRegCheckFailed are
    zero).
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210520152840.24453-6-peter.maydell@linaro.org",300137965d
0,"commit 7e435b9ea645b370aa32364fa22f8e4cd9e7d9ec
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 20 16:28:35 2021 +0100

    target/arm: Add MVE check to VMOV_reg_sp and VMOV_reg_dp
    
    Split out the handling of VMOV_reg_sp and VMOV_reg_dp so that we can
    permit the insns if either FP or MVE are present.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210520152840.24453-5-peter.maydell@linaro.org",7e435b9ea6
0,"commit 70b305d4f0f0e024b6c1adeb0630be8491bbae6a
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 20 16:28:34 2021 +0100

    target/arm: Move fpsp/fpdp isar check into callers of do_vfp_2op_sp/dp
    
    The do_vfp_2op_sp() and do_vfp_2op_dp() functions currently check
    whether floating point is supported via the aa32_fpdp_v2 and
    aa32_fpsp_v2 isar checks.  For v8.1M MVE support, the VMOV_reg trans
    functions (but not any of the others) need to update this to also
    allow the insn if MVE is implemented.  Move the check out of the do_
    function and into its callsites (which are all implemented via the
    DO_VFP_2OP macro), so we have a place to change the check for the
    VMOV insns.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210520152840.24453-4-peter.maydell@linaro.org",70b305d4f0
0,"commit 69049bcf5114f7af379b4f3cccfb0b213b30f88a
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 20 16:28:33 2021 +0100

    target/arm: Update feature checks for insns which are ""MVE or FP""
    
    Some v8M instructions are present if either the floating point
    extension or MVE is implemented.  Update our implementation of them
    to check for MVE as well as for FP.
    
    This is all the insns which use CheckDecodeFaults(ExtType_MveOrFp) or
    CheckDecodeFaults(ExtType_MveOrDpFp) in their pseudocode, which are
    essentially the loads and stores, moves and sysreg accesses, except
    for VMOV_reg_sp and VMOV_reg_dp, which we handle in subsequent
    patches because they need a refactor to provide a place to put the
    new MVE check.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210520152840.24453-3-peter.maydell@linaro.org",69049bcf51
0,"commit 7df6a1ffdbdcaf98fa57747dc79216ac089e6215
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 20 16:28:32 2021 +0100

    target/arm: Add isar feature check functions for MVE
    
    Add the isar feature check functions we will need for v8.1M MVE:
     * a check for MVE present: this corresponds to the pseudocode's
       CheckDecodeFaults(ExtType_Mve)
     * a check for the optional floating-point part of MVE: this
       corresponds to CheckDecodeFaults(ExtType_MveFp)
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-id: 20210520152840.24453-2-peter.maydell@linaro.org",7df6a1ffdb
0,"commit a97978bcc2d1f650c7d411428806e5b03082b8c7
Merge: 8e6dad2028 eba3c766fe
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu Jun 3 10:00:35 2021 +0100

    Merge remote-tracking branch 'remotes/dg-gitlab/tags/ppc-for-6.1-20210603' into staging
    
    ppc patch queue 2021-06-03
    
    Next batch of ppc target patches.  Highlights are:
     * A fix for a regression with single-step mode
     * Start of moving ppc to use decodetree
     * Implementation of some POWER10 64-bit prefixed instructions
     * Several cleanups to softmmu code
     * Continued progress towards allowing --disable-tcg
     * Fix for the POWER PEF implementation
     * Fix for LPCR handling of hotplugged CPUs
     * Assorted other bugfixes and cleanups
    
    This patchset does contain a couple of changes to code outside my
    normal scope of maintainership, related to the removal of cpu_dump and
    cpu_statistics hooks.  ppc was the last target arch implementing these
    at all, and they didn't really do anything there either.  The patches
    should have relevant acks.
    
    # gpg: Signature made Thu 03 Jun 2021 09:20:59 BST
    # gpg:                using RSA key 75F46586AE61A66CC44E87DC6C38CACA20D9B392
    # gpg: Good signature from ""David Gibson <david@gibson.dropbear.id.au>"" [full]
    # gpg:                 aka ""David Gibson (Red Hat) <dgibson@redhat.com>"" [full]
    # gpg:                 aka ""David Gibson (ozlabs.org) <dgibson@ozlabs.org>"" [full]
    # gpg:                 aka ""David Gibson (kernel.org) <dwg@kernel.org>"" [unknown]
    # Primary key fingerprint: 75F4 6586 AE61 A66C C44E  87DC 6C38 CACA 20D9 B392
    
    * remotes/dg-gitlab/tags/ppc-for-6.1-20210603: (42 commits)
      target/ppc: fix single-step exception regression
      target/ppc: Move cmp/cmpi/cmpl/cmpli to decodetree
      target/ppc: Move addpcis to decodetree
      target/ppc: Implement vcfuged instruction
      target/ppc: Implement cfuged instruction
      target/ppc: Implement setbc/setbcr/stnbc/setnbcr instructions
      target/ppc: Implement prefixed integer store instructions
      target/ppc: Move D/DS/X-form integer stores to decodetree
      target/ppc: Implement prefixed integer load instructions
      target/ppc: Move D/DS/X-form integer loads to decodetree
      target/ppc: Implement PNOP
      target/ppc: Move ADDI, ADDIS to decodetree, implement PADDI
      target/ppc: Add infrastructure for prefixed insns
      target/ppc: Move page crossing check to ppc_tr_translate_insn
      target/ppc: Introduce macros to check isa extensions
      target/ppc: powerpc_excp: Consolidade TLB miss code
      target/ppc: powerpc_excp: Remove dump_syscall_vectored
      target/ppc: powerpc_excp: Move lpes code to where it is used
      target/ppc: overhauled and moved logic of storing fpscr
      target/ppc: removed all mentions to PPC_DUMP_CPU
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",a97978bcc2
0,"commit eba3c766fe355a4e593c1ee6944770f80b68acad
Author: Luis Pires <luis.pires@eldorado.org.br>
Date:   Wed Jun 2 09:51:03 2021 -0300

    target/ppc: fix single-step exception regression
    
    Commit 6086c75 (target/ppc: Replace POWERPC_EXCP_BRANCH with
    DISAS_NORETURN) broke the generation of exceptions when
    CPU_SINGLE_STEP or CPU_BRANCH_STEP were set, due to nip always being
    reset to the address of the current instruction.
    This fix leaves nip untouched when generating the exception.
    
    Signed-off-by: Luis Pires <luis.pires@eldorado.org.br>
    Reported-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210602125103.332793-1-luis.pires@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",eba3c766fe
0,"commit 8f0a4b6a9b40e18116a2bb6bbcc00feb8119c792
Author: Matheus Ferst <matheus.ferst@eldorado.org.br>
Date:   Tue Jun 1 16:35:28 2021 -0300

    target/ppc: Move cmp/cmpi/cmpl/cmpli to decodetree
    
    Additionally, REQUIRE_64BIT when L=1 to match what is specified in The
    Programming Environments Manual:
    
    ""For 32-bit implementations, the L field must be cleared, otherwise the
    instruction form is invalid.""
    
    Some CPUs are known to deviate from this specification by ignoring the
    L bit [1]. The stricter behavior, however, can help users that test
    software with qemu, making it more likely to detect bugs that would
    otherwise be silent.
    
    If deemed necessary, a future patch can adapt this behavior based on
    the specific CPU model.
    
    [1] The 601 manual is the only one I've found that explicitly states
    that the L bit is ignored, but we also observe this behavior in a 7447A
    v1.2.
    
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-15-matheus.ferst@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    [dwg: Corrected whitespace error]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",8f0a4b6a9b
0,"commit e7a5d578f7c39d54efe1cf1695f85c57354b0191
Author: Matheus Ferst <matheus.ferst@eldorado.org.br>
Date:   Tue Jun 1 16:35:27 2021 -0300

    target/ppc: Move addpcis to decodetree
    
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-14-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",e7a5d578f7
0,"commit a5f56954c798f81a58f7f68e82143d13bb73509b
Author: Matheus Ferst <matheus.ferst@eldorado.org.br>
Date:   Tue Jun 1 16:35:26 2021 -0300

    target/ppc: Implement vcfuged instruction
    
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-13-matheus.ferst@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",a5f56954c7
0,"commit 89ccd7dc3fbce4a46679f282b47789e34fc3528a
Author: Matheus Ferst <matheus.ferst@eldorado.org.br>
Date:   Tue Jun 1 16:35:25 2021 -0300

    target/ppc: Implement cfuged instruction
    
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-12-matheus.ferst@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",89ccd7dc3f
0,"commit 9a14365eeb0d8b0e9d69692c34cdce76b9505189
Author: Matheus Ferst <matheus.ferst@eldorado.org.br>
Date:   Tue Jun 1 16:35:24 2021 -0300

    target/ppc: Implement setbc/setbcr/stnbc/setnbcr instructions
    
    Implements the following PowerISA v3.1 instructions:
    setbc: Set Boolean Condition
    setbcr: Set Boolean Condition Reverse
    setnbc: Set Negative Boolean Condition
    setnbcr: Set Negative Boolean Condition Reverse
    
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-11-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",9a14365eeb
0,"commit b0f7bebc6db09eac280f7458cc9e0de9ea7fc7cc
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 16:35:23 2021 -0300

    target/ppc: Implement prefixed integer store instructions
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-10-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",b0f7bebc6d
0,"commit e8f4c8d6aa8634f6b71483ec5f6002dafbc8d092
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 16:35:22 2021 -0300

    target/ppc: Move D/DS/X-form integer stores to decodetree
    
    These are all connected by macros in the legacy decoding.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-9-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",e8f4c8d6aa
0,"commit 00e032654144f03c25c95a5a9bd20bf00a933050
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 16:35:21 2021 -0300

    target/ppc: Implement prefixed integer load instructions
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-8-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",00e0326541
0,"commit f2aabda8ac9889db9449ddc0ca31627922e5a572
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 16:35:20 2021 -0300

    target/ppc: Move D/DS/X-form integer loads to decodetree
    
    These are all connected by macros in the legacy decoding.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-7-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",f2aabda8ac
0,"commit 0a11bb7a35075379dffafb75698dd503eb6f9b9c
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 16:35:19 2021 -0300

    target/ppc: Implement PNOP
    
    The illegal suffix behavior matches what was observed in a
    POWER10 DD2.0 machine.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-6-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",0a11bb7a35
0,"commit 5e560864234e78461879c632c414e4fe97a9a506
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 16:35:18 2021 -0300

    target/ppc: Move ADDI, ADDIS to decodetree, implement PADDI
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-5-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",5e56086423
0,"commit 99082815f17f40d3527b281c7e3e6e5556fad8f1
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 16:35:17 2021 -0300

    target/ppc: Add infrastructure for prefixed insns
    
    Signed-off-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-4-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",99082815f1
0,"commit 64a0f6448c6b4454c35e5a73e8be7dee0f852ba5
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 16:35:16 2021 -0300

    target/ppc: Move page crossing check to ppc_tr_translate_insn
    
    With prefixed instructions, the number of instructions
    remaining until the page crossing is no longer constant.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-3-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",64a0f6448c
0,"commit c9826ae97e4df418eb44290a9c68983f723a21af
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jun 1 16:35:15 2021 -0300

    target/ppc: Introduce macros to check isa extensions
    
    These will be used by the decodetree trans_* functions
    to early-exit when the instruction set is not enabled.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Matheus Ferst <matheus.ferst@eldorado.org.br>
    Message-Id: <20210601193528.2533031-2-matheus.ferst@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",c9826ae97e
0,"commit 51b385db586dafa4cd1f23413f0cbbf5ec2a256c
Author: Fabiano Rosas <farosas@linux.ibm.com>
Date:   Tue Jun 1 18:46:47 2021 -0300

    target/ppc: powerpc_excp: Consolidade TLB miss code
    
    The only difference in the code for Instruction fetch, Data load and
    Data store TLB miss errors is that when called from an unsupported
    processor (i.e. not one of 602, 603, 603e, G2, 7x5 or 74xx), they
    abort with a message specific to the operation type (insn fetch, data
    load/store).
    
    If a processor does not support those interrupts we should not be
    registering them in init_excp_<proc> to begin with, so that error
    message would never be used.
    
    I'm leaving the message in for completeness, but making it generic and
    consolidating the three interrupts into the same case statement body.
    
    Signed-off-by: Fabiano Rosas <farosas@linux.ibm.com>
    Message-Id: <20210601214649.785647-4-farosas@linux.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",51b385db58
0,"commit 0c87018c7c171a8fe0ed44b9aa931b364eec85f7
Author: Fabiano Rosas <farosas@linux.ibm.com>
Date:   Tue Jun 1 18:46:46 2021 -0300

    target/ppc: powerpc_excp: Remove dump_syscall_vectored
    
    This function is identical to dump_syscall, so use the latter for
    system call vectored as well.
    
    Signed-off-by: Fabiano Rosas <farosas@linux.ibm.com>
    Message-Id: <20210601214649.785647-3-farosas@linux.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",0c87018c7c
0,"commit bbc443cf65e3bf580df9dd8d2cd3f27154309add
Author: Fabiano Rosas <farosas@linux.ibm.com>
Date:   Tue Jun 1 18:46:45 2021 -0300

    target/ppc: powerpc_excp: Move lpes code to where it is used
    
    Signed-off-by: Fabiano Rosas <farosas@linux.ibm.com>
    Message-Id: <20210601214649.785647-2-farosas@linux.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",bbc443cf65
0,"commit fe43ba9721f36e47e09779682c3525659c6818f0
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Thu May 27 13:35:22 2021 -0300

    target/ppc: overhauled and moved logic of storing fpscr
    
    Followed the suggested overhaul to store_fpscr logic, and moved it to
    cpu.c where it can be accessed in !TCG builds.
    
    The overhaul was suggested because storing a value to fpscr should
    never raise an exception, so we could remove all the mess that happened
    with POWERPC_EXCP_FP.
    
    We also moved fpscr_set_rounding_mode into cpu.c as it could now be moved
    there, and it is needed when a value for the fpscr is being stored
    directly.
    
    Suggested-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210527163522.23019-1-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",fe43ba9721
0,"commit 1a1c9a00f390e236eab910fdf0ab08df0be08890
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Mon May 31 11:56:29 2021 -0300

    target/ppc: removed all mentions to PPC_DUMP_CPU
    
    This feature will no longer be useful as ppc moves to using decodetree
    for TCG. And building with it enabled is no longer possible, due to
    changes in opc_handler_t. Since the last commit that mentions it
    happened in 2014, I think it is safe to remove it.
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210531145629.21300-5-bruno.larsen@eldorado.org.br>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",1a1c9a00f3
0,"commit 0c5d547625989685742da9765608c0bb1abd7877
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Mon May 31 11:56:28 2021 -0300

    target/ppc: removed GEN_OPCODE decision tree
    
    since both, PPC_DO_STATISTICS and PPC_DUMP_CPU, are obsoleted as
    target/ppc moves to decodetree, we can remove this ifdef based decision
    tree, and only have what is now the standard option for the macro.
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210531145629.21300-4-bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",0c5d547625
0,"commit ca24b0b9334cd8838527edfc8b9b183326f81714
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Mon May 31 11:56:27 2021 -0300

    HMP: added info cpustats to removed_features.rst
    
    Documented the removal of the HMP command info cpustats
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210531145629.21300-3-bruno.larsen@eldorado.org.br>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Reviewed-by: Lucas Mateus <lucas.araujo@eldorado.org.br>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    [dwg: Fix a Sphinx formatting error]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",ca24b0b933
0,"commit 78d6c4c33d872c6790f8115b2bf5b0a00d710c22
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Mon May 31 11:56:26 2021 -0300

    hw/core/cpu: removed cpu_dump_statistics function
    
    No more architectures set the pointer to dump_statistics, so there's no
    point in keeping it, or the related cpu_dump_statistics function.
    
    Suggested-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210526202104.127910-6-bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20210531145629.21300-2-bruno.larsen@eldorado.org.br>
    Acked-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",78d6c4c33d
0,"commit b873ed83311d96644b544b10f6869a430660585a
Author: Daniel Henrique Barboza <danielhb413@gmail.com>
Date:   Fri May 28 17:16:19 2021 -0300

    ppc/pef.c: initialize cgs->ready in kvmppc_svm_init()
    
    QEMU is failing to launch a CGS pSeries guest in a host that has PEF
    support:
    
    qemu-system-ppc64: ../softmmu/vl.c:2585: qemu_machine_creation_done: Assertion `machine->cgs->ready' failed.
    Aborted
    
    This is happening because we're not setting the cgs->ready flag that is
    asserted in qemu_machine_creation_done() during machine start.
    
    cgs->ready is set in s390_pv_kvm_init() and sev_kvm_init(). Let's set it
    in kvmppc_svm_init() as well.
    
    Reported-by: Ram Pai <linuxram@us.ibm.com>
    Signed-off-by: Daniel Henrique Barboza <danielhb413@gmail.com>
    Message-Id: <20210528201619.52363-1-danielhb413@gmail.com>
    Acked-by: Ram Pai <linuxram@us.ibm.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",b873ed8331
0,"commit de3036acb4f2cbb80ef8d827ce2b7ec9104a0b14
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Wed May 26 17:21:03 2021 -0300

    monitor: removed cpustats command
    
    Since ppc was the last architecture to collect these statistics and
    it is currently phasing this collection out, the command that would query
    this information is being removed.
    
    Suggested-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210526202104.127910-5-bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Acked-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",de3036acb4
0,"commit 169989a416668c819c67dfc683062185d9eeddd5
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Wed May 26 17:21:02 2021 -0300

    target/ppc: removed mentions to DO_PPC_STATISTICS
    
    Removed the commented out definition and all ifdefs relating to
    PPC_DUMP_STATISTICS, as it's hardly ever used.
    
    Suggested-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210526202104.127910-4-bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",169989a416
0,"commit 4fe011d3c188559d8781996a2d91a02f5a957a42
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Wed May 26 17:21:01 2021 -0300

    target/ppc: remove ppc_cpu_dump_statistics
    
    This function requires surce code modification to be useful, which means
    it probably is not used often, and the move to using decodetree means
    the statistics won't even be collected anymore.
    
    Also removed setting dump_statistics in ppc_cpu_realize, since it was
    only useful when in conjunction with ppc_cpu_dump_statistics.
    
    Suggested-by: Richard Henderson<richard.henderson@linaro.org>
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210526202104.127910-3-bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Luis Pires <luis.pires@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",4fe011d3c1
0,"commit c274358279b80d7ff382a8f20f12add6ce49625f
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Tue May 25 08:53:55 2021 -0300

    target/ppc: updated meson.build to support disable-tcg
    
    updated build file to not compile some sources that are unnecessary if
    TCG is disabled on the system.
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210525115355.8254-5-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",c274358279
0,"commit 8033fb3fbf1165569cfcdeac7fab257bb72740f5
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Tue May 25 08:53:54 2021 -0300

    target/ppc: created tcg-stub.c file
    
    Created a file with stubs needed to compile disabling TCG. *_ppc_opcodes
    were created to make cpu_init.c have a few less ifdefs, since they are
    not needed. softmmu_resize_hpt_* have to be created because the compiler
    can't automatically know they aren't used, but they should never be
    reached.
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210525115355.8254-4-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",8033fb3fbf
0,"commit 2b44e21949352ffa045399c56a6ddde86eeb2ec6
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Tue May 25 08:53:53 2021 -0300

    target/ppc: added ifdefs around TCG-only code
    
    excp_helper.c, mmu-hash64.c and mmu_helper.c have some function
    declarations that are TCG-only, and couldn't be easily moved to a
    TCG only file, so ifdefs were added around them.
    
    We also needed ifdefs around some header files because helper-proto.h
    includes trace/generated-helpers.h, which is never created when building
    without TCG, and cpu_ldst.h includes tcg/tcg.h, whose containing folder
    is not included as a -iquote. As future cleanup, we could change the
    part of the configuration script to add those.
    
    cpu_init.c also had a callback definition that is TCG only and could be
    removed as part of a future cleanup (all the dump_statistics part is
    almost never used and will become obsolete as we transition to using
    decodetree).
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210525115355.8254-3-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",2b44e21949
0,"commit 52e9612ee94b58a1bc57242427b4dbe6c766d8f3
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Tue May 25 08:53:52 2021 -0300

    target/ppc: used ternary operator when registering MAS
    
    The write calback decision when registering the MAS SPR has been turned
    into a ternary operation, rather than an if-then-else block.
    
    This was done because when building without TCG, even though the
    compiler will optimize away the pointers to spr_write_generic*, it
    doesn't optimize away the decision and assignment to the local pointer,
    creating compiler errors. This cleanup looked better than using ifdefs,
    so  we decided to with it.
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210525115355.8254-2-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",52e9612ee9
0,"commit ac559ecbea2649819e7b3fdd09f4e0243e0128db
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Wed May 26 19:16:25 2021 +1000

    spapr: Set LPCR to current AIL mode when starting a new CPU
    
    TCG does not keep track of AIL mode in a central place, it's based on
    the current LPCR[AIL] bits. Synchronize the new CPU's LPCR to the
    current LPCR in rtas_start_cpu(), similarly to the way the ILE bit is
    synchronized.
    
    Open-code the ILE setting as well now that the caller's LPCR is
    available directly, there is no need for the indirection.
    
    Without this, under both TCG and KVM, adding a POWER8/9/10 class CPU
    with a new core ID after a modern Linux has booted results in the new
    CPU's LPCR missing the LPCR[AIL]=0b11 setting that the other CPUs have.
    This can cause crashes and unexpected behaviour.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Message-Id: <20210526091626.3388262-3-npiggin@gmail.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",ac559ecbea
0,"commit 7be3bf6c8429969f97728bb712d9a99997835607
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Wed May 26 19:16:24 2021 +1000

    spapr: Remove stale comment about power-saving LPCR bits
    
    Commit 47a9b551547 (""spapr: Clean up handling of LPCR power-saving exit
    bits"") moved this logic but did not remove the comment from the
    previous location.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Message-Id: <20210526091626.3388262-2-npiggin@gmail.com>
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Greg Kurz <groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",7be3bf6c84
0,"commit 22adb61ff6277637ae49b8dab667143f11bb53ff
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Wed May 26 11:35:16 2021 -0300

    target/ppc: fold ppc_store_ptcr into it's only caller
    
    ppc_store_ptcr, defined in mmu_helper.c, was only used by
    helper_store_ptcr, in misc_helper.c. To avoid possible confusion,
    the function was folded into the helper.
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Message-Id: <20210526143516.125582-1-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",22adb61ff6
0,"commit 9f9f82dacebbb816c62d730658f14a615c3ea003
Author: Shivaprasad G Bhat <sbhat@linux.ibm.com>
Date:   Wed May 26 11:27:15 2021 -0400

    spapr: nvdimm: Fix the persistent-memory root node name in device tree
    
    The FDT code is adding the pmem root node by name ""persistent-memory""
    which should have been ""ibm,persistent-memory"".
    
    The linux fetches the device tree nodes by type and it has been working
    correctly as the type is correct. If someone searches by its intended
    name it would fail, so fix that.
    
    Reported-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Shivaprasad G Bhat <sbhat@linux.ibm.com>
    Message-Id: <162204278956.219.9061511386011411578.stgit@cc493db1e665>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",9f9f82dace
0,"commit f93c8f148c0f6c2e20c29c54276862ee79a53d02
Author: Shivaprasad G Bhat <sbhat@linux.ibm.com>
Date:   Tue May 18 08:03:17 2021 -0400

    spapr: nvdimm: Forward declare and move the definitions
    
    The subsequent patches add definitions which tend to get
    the compilation to cyclic dependency. So, prepare with
    forward declarations, move the definitions and clean up.
    
    Signed-off-by: Shivaprasad G Bhat <sbhat@linux.ibm.com>
    Message-Id: <162133925415.610.11584121797866216417.stgit@4f1e6f2bd33e>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",f93c8f148c
0,"commit ac9ef668321ebb6eb871a0c4dd380fa7d7891b4e
Author: Mahesh Salgaonkar <mahesh@linux.ibm.com>
Date:   Fri May 21 13:35:51 2021 +0530

    spapr: Fix EEH capability issue on KVM guest for PCI passthru
    
    With upstream kernel, especially after commit 98ba956f6a389
    (""powerpc/pseries/eeh: Rework device EEH PE determination"") we see that KVM
    guest isn't able to enable EEH option for PCI pass-through devices anymore.
    
    [root@atest-guest ~]# dmesg | grep EEH
    [    0.032337] EEH: pSeries platform initialized
    [    0.298207] EEH: No capable adapters found: recovery disabled.
    [root@atest-guest ~]#
    
    So far the linux kernel was assuming pe_config_addr equal to device's
    config_addr and using it to enable EEH on the PE through ibm,set-eeh-option
    RTAS call. Which wasn't the correct way as per PAPR. The linux kernel
    commit 98ba956f6a389 fixed this flow. With that fixed, linux now uses PE
    config address returned by ibm,get-config-addr-info2 RTAS call to enable
    EEH option per-PE basis instead of per-device basis. However this has
    uncovered a bug in qemu where ibm,set-eeh-option is treating PE config
    address as per-device config address.
    
    Hence in qemu guest with recent kernel the ibm,set-eeh-option RTAS call
    fails with -3 return value indicating that there is no PCI device exist for
    the specified PE config address. The rtas_ibm_set_eeh_option call uses
    pci_find_device() to get the PC device that matches specific bus and devfn
    extracted from PE config address passed as argument. Thus it tries to map
    the PE config address to a single specific PCI device 'bus->devices[devfn]'
    which always results into checking device on slot 0 'bus->devices[0]'.
    This succeeds when there is a pass-through device (vfio-pci) present on
    slot 0. But in cases where there is no pass-through device present in slot
    0, but present in non-zero slots, ibm,set-eeh-option call fails to enable
    the EEH capability.
    
    hw/ppc/spapr_pci_vfio.c: spapr_phb_vfio_eeh_set_option()
       case RTAS_EEH_ENABLE: {
            PCIHostState *phb;
            PCIDevice *pdev;
    
            /*
             * The EEH functionality is enabled on basis of PCI device,
             * instead of PE. We need check the validity of the PCI
             * device address.
             */
            phb = PCI_HOST_BRIDGE(sphb);
            pdev = pci_find_device(phb->bus,
                                   (addr >> 16) & 0xFF, (addr >> 8) & 0xFF);
            if (!pdev || !object_dynamic_cast(OBJECT(pdev), ""vfio-pci"")) {
                return RTAS_OUT_PARAM_ERROR;
            }
    
    hw/pci/pci.c:pci_find_device()
    
    PCIDevice *pci_find_device(PCIBus *bus, int bus_num, uint8_t devfn)
    {
        bus = pci_find_bus_nr(bus, bus_num);
    
        if (!bus)
            return NULL;
    
        return bus->devices[devfn];
    }
    
    This patch fixes ibm,set-eeh-option to check for presence of any PCI device
    (vfio-pci) under specified bus and enable the EEH if found. The current
    code already makes sure that all the devices on that bus are from same
    iommu group (within same PE) and fail very early if it does not.
    
    After this fix guest is able to find EEH capable devices and enable EEH
    recovery on it.
    
    [root@atest-guest ~]# dmesg | grep EEH
    [    0.048139] EEH: pSeries platform initialized
    [    0.405115] EEH: Capable adapter found: recovery enabled.
    [root@atest-guest ~]#
    
    Reviewed-by: Daniel Henrique Barboza <danielhb413@gmail.com>
    Signed-off-by: Mahesh Salgaonkar <mahesh@linux.ibm.com>
    Message-Id: <162158429107.145117.5843504911924013125.stgit@jupiter>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",ac9ef66832
0,"commit 3bf0844f3be77b24cc8f56fc8df9ff199f8324cb
Author: Greg Kurz <groug@kaod.org>
Date:   Fri May 21 18:07:35 2021 +0200

    spapr: Don't hijack current_machine->boot_order
    
    QEMU 6.0 moved all the -boot variables to the machine. Especially, the
    removal of the boot_order static changed the handling of '-boot once'
    from:
    
        if (boot_once) {
            qemu_boot_set(boot_once, &error_fatal);
            qemu_register_reset(restore_boot_order, g_strdup(boot_order));
        }
    
    to
    
        if (current_machine->boot_once) {
            qemu_boot_set(current_machine->boot_once, &error_fatal);
            qemu_register_reset(restore_boot_order,
                                g_strdup(current_machine->boot_order));
        }
    
    This means that we now register as subsequent boot order a copy
    of current_machine->boot_once that was just set with the previous
    call to qemu_boot_set(), i.e. we never transition away from the
    once boot order.
    
    It is certainly fragile^Wwrong for the spapr code to hijack a
    field of the base machine type object like that. The boot order
    rework simply turned this software boundary violation into an
    actual bug.
    
    Have the spapr code to handle that with its own field in
    SpaprMachineState. Also kfree() the initial boot device
    string when ""once"" was used.
    
    Fixes: 4b7acd2ac821 (""vl: clean up -boot variables"")
    Resolves: https://bugzilla.redhat.com/show_bug.cgi?id=1960119
    Cc: pbonzini@redhat.com
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Message-Id: <20210521160735.1901914-1-groug@kaod.org>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",3bf0844f3b
0,"commit f2fac71d81de902b43d55060541b7ba9c9eacda4
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Fri May 21 17:17:55 2021 -0300

    target/ppc: removed unnecessary inclusion of helper-proto.h
    
    These files included helper-proto.h, but didn't use or declare any
    helpers, so the #include has been removed
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210521201759.85475-6-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",f2fac71d81
0,"commit 63d06e90e65d5f119039044e986a81007954a466
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Fri May 21 17:17:53 2021 -0300

    target/ppc: reduce usage of fpscr_set_rounding_mode
    
    It is preferable to store the current rounding mode and retore from that
    than recalculating from fpscr, so we changed the behavior of do_fri and
    VSX_ROUND to do it like that.
    
    Suggested-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210521201759.85475-4-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",63d06e90e6
0,"commit a3f5c315396b86468487f303a044b26801015090
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Fri May 21 17:17:52 2021 -0300

    target/ppc: moved ppc_store_lpcr and ppc_store_msr to cpu.c
    
    These functions are used in hw/ppc logic, during machine startup, which
    means it must be compiled when --disable-tcg is selected, and so it has
    been moved into a common code file
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Message-Id: <20210521201759.85475-3-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",a3f5c31539
0,"commit dbf2e70a3029890f4c7c426f4eb724bac78d8c54
Author: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
Date:   Fri May 21 17:17:51 2021 -0300

    target/ppc: cleaned error_report from ppc_store_sdr1
    
    Changed how the function ppc_store_sdr1, from error_report(...) to
    qemu_log_mask(LOG_GUEST_ERROR, ...).
    
    Signed-off-by: Bruno Larsen (billionai) <bruno.larsen@eldorado.org.br>
    Suggested-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210521201759.85475-2-bruno.larsen@eldorado.org.br>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>",dbf2e70a30
0,"commit 8e6dad2028d01b7f9ec76cf3b83457fab57fa1eb
Merge: 8c345b3e6a b317006a3f
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Wed Jun 2 19:34:03 2021 +0100

    Merge remote-tracking branch 'remotes/kevin/tags/for-upstream' into staging
    
    Block layer patches
    
    - NBD server: Fix crashes related to switching between AioContexts
    - file-posix: Workaround for discard/write_zeroes on buggy filesystems
    - Follow-up fixes for the reopen vs. permission changes
    - quorum: Fix error handling for flush
    - block-copy: Refactor copy_range handling
    - docs: Describe how to use 'null-co' block driver
    
    # gpg: Signature made Wed 02 Jun 2021 14:44:15 BST
    # gpg:                using RSA key DC3DEB159A9AF95D3D7456FE7F09B272C88F2FD6
    # gpg:                issuer ""kwolf@redhat.com""
    # gpg: Good signature from ""Kevin Wolf <kwolf@redhat.com>"" [full]
    # Primary key fingerprint: DC3D EB15 9A9A F95D 3D74  56FE 7F09 B272 C88F 2FD6
    
    * remotes/kevin/tags/for-upstream:
      docs/secure-coding-practices: Describe how to use 'null-co' block driver
      block-copy: refactor copy_range handling
      block-copy: fix block_copy_task_entry() progress update
      nbd/server: Use drained block ops to quiesce the server
      block-backend: add drained_poll
      block: improve permission conflict error message
      block: simplify bdrv_child_user_desc()
      block/vvfat: inherit child_vvfat_qcow from child_of_bds
      block: improve bdrv_child_get_parent_desc()
      block-backend: improve blk_root_get_parent_desc()
      block: document child argument of bdrv_attach_child_common()
      block/file-posix: Try other fallbacks after invalid FALLOC_FL_ZERO_RANGE
      block/file-posix: Fix problem with fallocate(PUNCH_HOLE) on GPFS
      block: drop BlockBackendRootState::read_only
      block: drop BlockDriverState::read_only
      block: consistently use bdrv_is_read_only()
      block/vvfat: fix vvfat_child_perm crash
      block/vvfat: child_vvfat_qcow: add .get_parent_aio_context, fix crash
      qemu-io-cmds: assert that we don't have .perm requested in no-blk case
      block/quorum: Provide .bdrv_co_flush instead of .bdrv_co_flush_to_disk
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",8e6dad2028
0,"commit 8c345b3e6a736d4985b2bca6f7f24b985900de63
Merge: 49ba51adec 2a85a08c99
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Wed Jun 2 17:08:11 2021 +0100

    Merge remote-tracking branch 'remotes/thuth-gitlab/tags/pull-request-2021-06-02' into staging
    
    * Update the references to some doc files (use *.rst instead of *.txt)
    * Bump minimum versions of some requirements after removing CentOS 7 support
    
    # gpg: Signature made Wed 02 Jun 2021 08:12:18 BST
    # gpg:                using RSA key 27B88847EEE0250118F3EAB92ED9D774FE702DB5
    # gpg:                issuer ""thuth@redhat.com""
    # gpg: Good signature from ""Thomas Huth <th.huth@gmx.de>"" [full]
    # gpg:                 aka ""Thomas Huth <thuth@redhat.com>"" [full]
    # gpg:                 aka ""Thomas Huth <huth@tuxfamily.org>"" [full]
    # gpg:                 aka ""Thomas Huth <th.huth@posteo.de>"" [unknown]
    # Primary key fingerprint: 27B8 8847 EEE0 2501 18F3  EAB9 2ED9 D774 FE70 2DB5
    
    * remotes/thuth-gitlab/tags/pull-request-2021-06-02:
      configure: bump min required CLang to 6.0 / XCode 10.0
      configure: bump min required GCC to 7.5.0
      configure: bump min required glib version to 2.56
      tests/docker: drop CentOS 7 container
      tests/vm: convert centos VM recipe to CentOS 8
      crypto: drop used conditional check
      crypto: bump min gnutls to 3.5.18, dropping RHEL-7 support
      crypto: bump min gcrypt to 1.8.0, dropping RHEL-7 support
      crypto: drop back compatibility typedefs for nettle
      crypto: bump min nettle to 3.4, dropping RHEL-7 support
      patchew: move quick build job from CentOS 7 to CentOS 8 container
      block/ssh: Bump minimum libssh version to 0.8.7
      docs: fix references to docs/devel/s390-dasd-ipl.rst
      docs: fix references to docs/specs/tpm.rst
      docs: fix references to docs/devel/build-system.rst
      docs: fix references to docs/devel/atomics.rst
      docs: fix references to docs/devel/tracing.rst
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",8c345b3e6a
0,"commit b317006a3f1f04191a7981cef83417cb2477213b
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue Jun 1 18:25:48 2021 +0200

    docs/secure-coding-practices: Describe how to use 'null-co' block driver
    
    Document that security reports must use 'null-co,read-zeroes=on'
    because otherwise the memory is left uninitialized (which is an
    on-purpose performance feature).
    
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210601162548.2076631-1-philmd@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",b317006a3f
0,"commit bed9523471c13a44cdc15ed9ba0fb78cadf8c142
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Fri May 28 17:16:28 2021 +0300

    block-copy: refactor copy_range handling
    
    Currently we update s->use_copy_range and s->copy_size in
    block_copy_do_copy().
    
    It's not very good:
    
    1. block_copy_do_copy() is intended to be a simple function, that wraps
    bdrv_co_<io> functions for need of block copy. That's why we don't pass
    BlockCopyTask into it. So, block_copy_do_copy() is bad place for
    manipulation with generic state of block-copy process
    
    2. We are going to make block-copy thread-safe. So, it's good to move
    manipulation with state of block-copy to the places where we'll need
    critical sections anyway, to not introduce extra synchronization
    primitives in block_copy_do_copy().
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210528141628.44287-3-vsementsov@virtuozzo.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",bed9523471
0,"commit 8146b357d0cb3a3f5d500a1536f9f0e1ff3302cc
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Fri May 28 17:16:27 2021 +0300

    block-copy: fix block_copy_task_entry() progress update
    
    Don't report successful progress on failure, when call_state->ret is
    set.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210528141628.44287-2-vsementsov@virtuozzo.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",8146b357d0
0,"commit fd6afc501a019682d1b8468b562355a2887087bd
Author: Sergio Lopez <slp@redhat.com>
Date:   Wed Jun 2 08:05:52 2021 +0200

    nbd/server: Use drained block ops to quiesce the server
    
    Before switching between AioContexts we need to make sure that we're
    fully quiesced (""nb_requests == 0"" for every client) when entering the
    drained section.
    
    To do this, we set ""quiescing = true"" for every client on
    "".drained_begin"" to prevent new coroutines from being created, and
    check if ""nb_requests == 0"" on "".drained_poll"". Finally, once we're
    exiting the drained section, on "".drained_end"" we set ""quiescing =
    false"" and call ""nbd_client_receive_next_request()"" to resume the
    processing of new requests.
    
    With these changes, ""blk_aio_attach()"" and ""blk_aio_detach()"" can be
    reverted to be as simple as they were before f148ae7d36.
    
    RHBZ: https://bugzilla.redhat.com/show_bug.cgi?id=1960137
    Suggested-by: Kevin Wolf <kwolf@redhat.com>
    Signed-off-by: Sergio Lopez <slp@redhat.com>
    Message-Id: <20210602060552.17433-3-slp@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",fd6afc501a
0,"commit 095cc4d0f62513d75e9bc1da37f08d9e97f267c4
Author: Sergio Lopez <slp@redhat.com>
Date:   Wed Jun 2 08:05:51 2021 +0200

    block-backend: add drained_poll
    
    Allow block backends to poll their devices/users to check if they have
    been quiesced when entering a drained section.
    
    This will be used in the next patch to wait for the NBD server to be
    completely quiesced.
    
    Suggested-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Eric Blake <eblake@redhat.com>
    Signed-off-by: Sergio Lopez <slp@redhat.com>
    Message-Id: <20210602060552.17433-2-slp@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",095cc4d0f6
0,"commit 30ebb9aa9203b5051c5c4f4e2421803b94e5f2cc
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Tue Jun 1 10:52:18 2021 +0300

    block: improve permission conflict error message
    
    Now permissions are updated as follows:
     1. do graph modifications ignoring permissions
     2. do permission update
    
     (of course, we rollback [1] if [2] fails)
    
    So, on stage [2] we can't say which users are ""old"" and which are
    ""new"" and exist only since [1]. And current error message is a bit
    outdated. Let's improve it, to make everything clean.
    
    While being here, add also a comment and some good assertions.
    
    iotests 283, 307, qsd-jobs outputs are updated.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210601075218.79249-7-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",30ebb9aa92
0,"commit da261b69aee9acb46ac1b0ebfe0ccb7b74450a88
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Tue Jun 1 10:52:17 2021 +0300

    block: simplify bdrv_child_user_desc()
    
    All child classes have this callback. So, drop unreachable code.
    
    Still add an assertion to bdrv_attach_child_common(), to early detect
    bad classes.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210601075218.79249-6-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",da261b69ae
0,"commit 8081f064e404dd524b3c43248b2084dee9d32d7c
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Tue Jun 1 10:52:16 2021 +0300

    block/vvfat: inherit child_vvfat_qcow from child_of_bds
    
    Recently we've fixed a crash by adding .get_parent_aio_context handler
    to child_vvfat_qcow. Now we want it to support .get_parent_desc as
    well. child_vvfat_qcow wants to implement own .inherit_options, it's
    not bad. But omitting all other handlers is a bad idea. Let's inherit
    the class from child_of_bds instead, similar to chain_child_class and
    detach_by_driver_cb_class in test-bdrv-drain.c.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210601075218.79249-5-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",8081f064e4
0,"commit 2c0a3acb9570a9e1ffae3c73ef94bc826dc9dd1d
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Tue Jun 1 10:52:15 2021 +0300

    block: improve bdrv_child_get_parent_desc()
    
    We have different types of parents: block nodes, block backends and
    jobs. So, it makes sense to specify type together with name.
    
    Next, this handler us used to compose an error message about permission
    conflict. And permission conflict occurs in a specific place of block
    graph. We shouldn't report name of parent device (as it refers another
    place in block graph), but exactly and only the name of the node. So,
    use bdrv_get_node_name() directly.
    
    iotest 283 output is updated.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Message-Id: <20210601075218.79249-4-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",2c0a3acb95
0,"commit fd240a184b0e8a9889097216d182def6aece30cb
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Tue Jun 1 10:52:14 2021 +0300

    block-backend: improve blk_root_get_parent_desc()
    
    We have different types of parents: block nodes, block backends and
    jobs. So, it makes sense to specify type together with name.
    
    While being here also use g_autofree.
    
    iotest 307 output is updated.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Alberto Garcia <berto@igalia.com>
    Message-Id: <20210601075218.79249-3-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",fd240a184b
0,"commit f8d2ad7881cde73508f9adeb28c7e033b0903ca8
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Tue Jun 1 10:52:13 2021 +0300

    block: document child argument of bdrv_attach_child_common()
    
    The logic around **child is not obvious: this reference is used not
    only to return resulting child, but also to rollback NULL value on
    transaction abort.
    
    So, let's add documentation and some assertions.
    
    While being here, drop extra declaration of bdrv_attach_child_noperm().
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210601075218.79249-2-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",f8d2ad7881
0,"commit fa95e9fbab2c19fc07ba82988b1690f8a6ff171b
Author: Thomas Huth <thuth@redhat.com>
Date:   Thu May 27 19:20:20 2021 +0200

    block/file-posix: Try other fallbacks after invalid FALLOC_FL_ZERO_RANGE
    
    If fallocate(... FALLOC_FL_ZERO_RANGE ...) returns EINVAL, it's likely
    an indication that the file system is buggy and does not implement
    unaligned accesses right. We still might be lucky with the other
    fallback fallocate() calls later in this function, though, so we should
    not return immediately and try the others first.
    Since FALLOC_FL_ZERO_RANGE could also return EINVAL if the file descriptor
    is not a regular file, we ignore this filesystem bug silently, without
    printing an error message for the user.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210527172020.847617-3-thuth@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",fa95e9fbab
0,"commit 73ebf29729d1a40feaa9f8ab8951b6ee6dbfbede
Author: Thomas Huth <thuth@redhat.com>
Date:   Thu May 27 19:20:19 2021 +0200

    block/file-posix: Fix problem with fallocate(PUNCH_HOLE) on GPFS
    
    A customer reported that running
    
     qemu-img convert -t none -O qcow2 -f qcow2 input.qcow2 output.qcow2
    
    fails for them with the following error message when the images are
    stored on a GPFS file system :
    
     qemu-img: error while writing sector 0: Invalid argument
    
    After analyzing the strace output, it seems like the problem is in
    handle_aiocb_write_zeroes(): The call to fallocate(FALLOC_FL_PUNCH_HOLE)
    returns EINVAL, which can apparently happen if the file system has
    a different idea of the granularity of the operation. It's arguably
    a bug in GPFS, since the PUNCH_HOLE mode should not result in EINVAL
    according to the man-page of fallocate(), but the file system is out
    there in production and so we have to deal with it. In commit 294682cc3a
    (""block: workaround for unaligned byte range in fallocate()"") we also
    already applied the a work-around for the same problem to the earlier
    fallocate(FALLOC_FL_ZERO_RANGE) call, so do it now similar with the
    PUNCH_HOLE call. But instead of silently catching and returning
    -ENOTSUP (which causes the caller to fall back to writing zeroes),
    let's rather inform the user once about the buggy file system and
    try the other fallback instead.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210527172020.847617-2-thuth@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",73ebf29729
0,"commit 260242a833d0cdfba5d9988169f2dc89946809a2
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu May 27 18:40:56 2021 +0300

    block: drop BlockBackendRootState::read_only
    
    Instead of keeping additional boolean field, let's store the
    information in BDRV_O_RDWR bit of BlockBackendRootState::open_flags.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210527154056.70294-4-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",260242a833
0,"commit 975da073748ecb271d8ba2a7711ff46a8c6d8366
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu May 27 18:40:55 2021 +0300

    block: drop BlockDriverState::read_only
    
    This variable is just a cache for !(bs->open_flags & BDRV_O_RDWR),
    which we have to synchronize everywhere. Let's just drop it and
    consistently use bdrv_is_read_only().
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210527154056.70294-3-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",975da07374
0,"commit 307261b243df2edde538f3ed5c9d80e168529355
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Thu May 27 18:40:54 2021 +0300

    block: consistently use bdrv_is_read_only()
    
    It's better to use accessor function instead of bs->read_only directly.
    In some places use bdrv_is_writable() instead of
    checking both BDRV_O_RDWR set and BDRV_O_INACTIVE not set.
    
    In bdrv_open_common() it's a bit strange to add one more variable, but
    we are going to drop bs->read_only in the next patch, so new ro local
    variable substitutes it here.
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210527154056.70294-2-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",307261b243
0,"commit 39df2c6d57b9eaa30d37a34b5a20cbc0474725c0
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Mon May 24 13:12:57 2021 +0300

    block/vvfat: fix vvfat_child_perm crash
    
    It's wrong to rely on s->qcow in vvfat_child_perm, as on permission
    update during bdrv_open_child() call this field is not set yet.
    
    Still prior to aa5a04c7db27eea6b36de32f241b155f0d9ce34d, it didn't
    crash, as bdrv_open_child passed NULL as child to bdrv_child_perm(),
    and NULL was equal to NULL in assertion (still, it was bad guarantee
    for child being s->qcow, not backing :).
    
    Since aa5a04c7db27eea6b36de32f241b155f0d9ce34d
    ""add bdrv_attach_child_noperm"" bdrv_refresh_perms called on parent node
    when attaching child, and new correct child pointer is passed to
    .bdrv_child_perm. Still, s->qcow is NULL at the moment. Let's rely only
    on role instead.
    
    Without that fix,
    ./build/qemu-system-x86_64 -usb -device usb-storage,drive=fat16 \
        -drive \
        file=fat:rw:fat-type=16:""<path of a host folder>"",id=fat16,format=raw,if=none
    
    crashes:
    (gdb) bt
    0  raise () at /lib64/libc.so.6
    1  abort () at /lib64/libc.so.6
    2  _nl_load_domain.cold () at /lib64/libc.so.6
    3  annobin_assert.c_end () at /lib64/libc.so.6
    4  vvfat_child_perm (bs=0x559186f3d690, c=0x559186f1ed20, role=3,
                         reopen_queue=0x0, perm=0, shared=31,
                         nperm=0x7ffe56f28298, nshared=0x7ffe56f282a0) at
        ../block/vvfat.c:3214
    5  bdrv_child_perm (bs=0x559186f3d690, child_bs=0x559186f60190,
                        c=0x559186f1ed20, role=3, reopen_queue=0x0,
                        parent_perm=0, parent_shared=31,
                        nperm=0x7ffe56f28298, nshared=0x7ffe56f282a0)
        at ../block.c:2094
    6  bdrv_node_refresh_perm (bs=0x559186f3d690, q=0x0,
                               tran=0x559186f65850, errp=0x7ffe56f28530) at
        ../block.c:2336
    7  bdrv_list_refresh_perms (list=0x559186db5b90 = {...}, q=0x0,
                                tran=0x559186f65850, errp=0x7ffe56f28530)
        at ../block.c:2358
    8  bdrv_refresh_perms (bs=0x559186f3d690, errp=0x7ffe56f28530) at
        ../block.c:2419
    9  bdrv_attach_child
        (parent_bs=0x559186f3d690, child_bs=0x559186f60190,
         child_name=0x559184d83e3d ""write-target"",
         child_class=0x5591852f3b00 <child_vvfat_qcow>, child_role=3,
         errp=0x7ffe56f28530) at ../block.c:2959
    10 bdrv_open_child
        (filename=0x559186f5cb80 ""/var/tmp/vl.7WYmFU"",
         options=0x559186f66c20, bdref_key=0x559184d83e3d ""write-target"",
         parent=0x559186f3d690, child_class=0x5591852f3b00
         <child_vvfat_qcow>, child_role=3, allow_none=false,
         errp=0x7ffe56f28530) at ../block.c:3351
    11 enable_write_target (bs=0x559186f3d690, errp=0x7ffe56f28530) at
        ../block/vvfat.c:3177
    12 vvfat_open (bs=0x559186f3d690, options=0x559186f42db0, flags=155650,
                   errp=0x7ffe56f28530) at ../block/vvfat.c:1236
    13 bdrv_open_driver (bs=0x559186f3d690, drv=0x5591853d97e0
                         <bdrv_vvfat>, node_name=0x0,
                         options=0x559186f42db0, open_flags=155650,
                         errp=0x7ffe56f28640) at ../block.c:1557
    14 bdrv_open_common (bs=0x559186f3d690, file=0x0,
                         options=0x559186f42db0, errp=0x7ffe56f28640) at
        ../block.c:1833
    ...
    
    (gdb) fr 4
     #4  vvfat_child_perm (bs=0x559186f3d690, c=0x559186f1ed20, role=3,
                          reopen_queue=0x0, perm=0, shared=31,
                          nperm=0x7ffe56f28298, nshared=0x7ffe56f282a0) at
        ../block/vvfat.c:3214
    3214        assert(c == s->qcow || (role & BDRV_CHILD_COW));
    (gdb) p role
     $1 = 3   # BDRV_CHILD_DATA | BDRV_CHILD_METADATA
    (gdb) p *c
     $2 = {bs = 0x559186f60190, name = 0x559186f669d0 ""write-target"", klass
         = 0x5591852f3b00 <child_vvfat_qcow>, role = 3, opaque =
             0x559186f3d690, perm = 3, shared_perm = 4, frozen = false,
             parent_quiesce_counter = 0, next = {le_next = 0x0, le_prev =
                 0x559186f41818}, next_parent = {le_next = 0x0, le_prev =
                     0x559186f64320}}
    (gdb) p s->qcow
     $3 = (BdrvChild *) 0x0
    
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210524101257.119377-3-vsementsov@virtuozzo.com>
    Tested-by: John Arbuckle <programmingkidx@gmail.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",39df2c6d57
0,"commit fb62b5889695825ea22f29d4eadb9ac1b8935a71
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Mon May 24 13:12:56 2021 +0300

    block/vvfat: child_vvfat_qcow: add .get_parent_aio_context, fix crash
    
    Commit 3ca1f3225727419ba573673b744edac10904276f
    ""block: BdrvChildClass: add .get_parent_aio_context handler"" introduced
    new handler and commit 228ca37e12f97788e05bd0c92f89b3e5e4019607
    ""block: drop ctx argument from bdrv_root_attach_child"" made a generic
    use of it. But 3ca1f3225727419ba573673b744edac10904276f didn't update
    child_vvfat_qcow. Fix that.
    
    Before that fix the command
    
    ./build/qemu-system-x86_64 -usb -device usb-storage,drive=fat16 \
      -drive file=fat:rw:fat-type=16:""<path of a host folder>"",id=fat16,format=raw,if=none
    
    crashes:
    
    1  bdrv_child_get_parent_aio_context (c=0x559d62426d20)
        at ../block.c:1440
    2  bdrv_attach_child_common
        (child_bs=0x559d62468190, child_name=0x559d606f9e3d ""write-target"",
         child_class=0x559d60c58d20 <child_vvfat_qcow>, child_role=3,
         perm=3, shared_perm=4, opaque=0x559d62445690,
         child=0x7ffc74c2acc8, tran=0x559d6246ddd0, errp=0x7ffc74c2ae60)
        at ../block.c:2795
    3  bdrv_attach_child_noperm
        (parent_bs=0x559d62445690, child_bs=0x559d62468190,
         child_name=0x559d606f9e3d ""write-target"",
         child_class=0x559d60c58d20 <child_vvfat_qcow>, child_role=3,
         child=0x7ffc74c2acc8, tran=0x559d6246ddd0, errp=0x7ffc74c2ae60) at
        ../block.c:2855
    4  bdrv_attach_child
        (parent_bs=0x559d62445690, child_bs=0x559d62468190,
         child_name=0x559d606f9e3d ""write-target"",
         child_class=0x559d60c58d20 <child_vvfat_qcow>, child_role=3,
         errp=0x7ffc74c2ae60) at ../block.c:2953
    5  bdrv_open_child
        (filename=0x559d62464b80 ""/var/tmp/vl.h3TIS4"",
         options=0x559d6246ec20, bdref_key=0x559d606f9e3d ""write-target"",
         parent=0x559d62445690, child_class=0x559d60c58d20
         <child_vvfat_qcow>, child_role=3, allow_none=false,
         errp=0x7ffc74c2ae60) at ../block.c:3351
    6  enable_write_target (bs=0x559d62445690, errp=0x7ffc74c2ae60) at
       ../block/vvfat.c:3176
    7  vvfat_open (bs=0x559d62445690, options=0x559d6244adb0, flags=155650,
                   errp=0x7ffc74c2ae60) at ../block/vvfat.c:1236
    8  bdrv_open_driver (bs=0x559d62445690, drv=0x559d60d4f7e0
                         <bdrv_vvfat>, node_name=0x0,
                         options=0x559d6244adb0, open_flags=155650,
                         errp=0x7ffc74c2af70) at ../block.c:1557
    9  bdrv_open_common (bs=0x559d62445690, file=0x0,
                         options=0x559d6244adb0, errp=0x7ffc74c2af70) at
    ...
    
    (gdb) fr 1
     #1  0x0000559d603ea3bf in bdrv_child_get_parent_aio_context
         (c=0x559d62426d20) at ../block.c:1440
    1440        return c->klass->get_parent_aio_context(c);
     (gdb) p c->klass
    $1 = (const BdrvChildClass *) 0x559d60c58d20 <child_vvfat_qcow>
     (gdb) p c->klass->get_parent_aio_context
    $2 = (AioContext *(*)(BdrvChild *)) 0x0
    
    Fixes: 3ca1f3225727419ba573673b744edac10904276f
    Fixes: 228ca37e12f97788e05bd0c92f89b3e5e4019607
    Reported-by: John Arbuckle <programmingkidx@gmail.com>
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210524101257.119377-2-vsementsov@virtuozzo.com>
    Tested-by: John Arbuckle <programmingkidx@gmail.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",fb62b58896
0,"commit 8eaf10187a2fd25aa27cb81b602815b07f9a7f89
Author: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
Date:   Wed May 19 12:05:32 2021 +0300

    qemu-io-cmds: assert that we don't have .perm requested in no-blk case
    
    Coverity thinks blk may be NULL. It's a false-positive, as described in
    a new comment.
    
    Fixes: Coverity CID 1453194
    Signed-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Message-Id: <20210519090532.3753-1-vsementsov@virtuozzo.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",8eaf10187a
0,"commit 5529b02da2dcd1ef6bc6cd42d4fbfb537fe2276f
Author: Lukas Straub <lukasstraub2@web.de>
Date:   Tue May 18 13:42:14 2021 +0200

    block/quorum: Provide .bdrv_co_flush instead of .bdrv_co_flush_to_disk
    
    The quorum block driver uses a custom flush callback to handle the
    case when some children return io errors. In that case it still
    returns success if enough children are healthy.
    However, it provides it as the .bdrv_co_flush_to_disk callback, not
    as .bdrv_co_flush. This causes the block layer to do it's own
    generic flushing for the children instead, which doesn't handle
    errors properly.
    
    Fix this by providing .bdrv_co_flush instead of
    .bdrv_co_flush_to_disk so the block layer uses the custom flush
    callback.
    
    Signed-off-by: Lukas Straub <lukasstraub2@web.de>
    Reported-by: Minghao Yuan <meeho@qq.com>
    Message-Id: <20210518134214.11ccf05f@gecko.fritz.box>
    Tested-by: Zhang Chen <chen.zhang@intel.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>",5529b02da2
0,"commit 49ba51adec7928fe7cf3cb43acbf0b953e5c637e
Merge: dd2db39d78 6b9c277797
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Wed Jun 2 11:42:22 2021 +0100

    Merge remote-tracking branch 'remotes/jsnow-gitlab/tags/python-pull-request' into staging
    
    Pull request
    
    V2:
     - Squashed in fixup for
       'Python: add utility function for retrieving port redirection'
     - Rebased on today's upstream
    
    CI here:
    https://gitlab.com/jsnow/qemu/-/pipelines/313202814
    
    # gpg: Signature made Wed 02 Jun 2021 00:29:55 BST
    # gpg:                using RSA key F9B7ABDBBCACDF95BE76CBD07DEF8106AAFC390E
    # gpg: Good signature from ""John Snow (John Huston) <jsnow@redhat.com>"" [full]
    # Primary key fingerprint: FAEB 9711 A12C F475 812F  18F2 88A9 064D 1835 61EB
    #      Subkey fingerprint: F9B7 ABDB BCAC DF95 BE76  CBD0 7DEF 8106 AAFC 390E
    
    * remotes/jsnow-gitlab/tags/python-pull-request: (44 commits)
      gitlab: add python linters to CI
      python: add tox support
      python: add .gitignore
      python: add Makefile for some common tasks
      python: add avocado-framework and tests
      python: add devel package requirements to setuptools
      python/qemu: add qemu package itself to pipenv
      python/qemu: add isort to pipenv
      python: move .isort.cfg into setup.cfg
      python: add mypy to pipenv
      python: move mypy.ini into setup.cfg
      python: Add flake8 to pipenv
      python: add excluded dirs to flake8 config
      python: move flake8 config to setup.cfg
      python: add pylint to pipenv
      python: move pylintrc into setup.cfg
      python: add pylint import exceptions
      python: Add pipenv support
      python: add MANIFEST.in
      python: add directory structure README.rst files
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",49ba51adec
0,"commit 2a85a08c998e418a46a308095893f223642f6fc9
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:15 2021 +0100

    configure: bump min required CLang to 6.0 / XCode 10.0
    
    Several distros have been dropped since the last time we bumped the
    minimum required CLang version.
    
    Per repology, currently shipping versions are:
    
                 RHEL-8: 10.0.1
          Debian Buster: 7.0.1
     openSUSE Leap 15.2: 9.0.1
       Ubuntu LTS 18.04: 6.0.0
       Ubuntu LTS 20.04: 10.0.0
             FreeBSD 12: 8.0.1
              Fedora 33: 11.0.0
              Fedora 34: 11.1.0
    
    With this list Ubuntu LTS 18.04 is the constraint at 6.0.0
    
    An LLVM version of 6.0.0 corresponds to macOS XCode version of 10.0
    which dates from Sept 2018.
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-13-berrange@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",2a85a08c99
0,"commit 56208a0d473c6db263cc333c787ca48b502d72ab
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:14 2021 +0100

    configure: bump min required GCC to 7.5.0
    
    Several distros have been dropped since the last time we bumped the
    minimum required GCC version.
    
    Per repology, currently shipping versions are:
    
                 RHEL-8: 8.3.1
          Debian Buster: 8.3.0
     openSUSE Leap 15.2: 7.5.0
       Ubuntu LTS 18.04: 7.5.0
       Ubuntu LTS 20.04: 9.3.0
                FreeBSD: 10.3.0
              Fedora 33: 9.2.0
              Fedora 34: 11.0.1
                OpenBSD: 8.4.0
         macOS HomeBrew: 11.1.0
    
    With this list Ubuntu LTS 18.04 / openSUSE Leap 15.2 are the
    constraint at 7.5.0
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-12-berrange@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",56208a0d47
0,"commit b4c6036faa995a0ec00d45901aa722ab2dd14341
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:13 2021 +0100

    configure: bump min required glib version to 2.56
    
    The glib version was not previously constrained by RHEL-7 since it
    rebases fairly often. Instead SLES 12 and Ubuntu 16.04 were the
    constraints in 00f2cfbbec63fb6f5a7789797a62ccedd22466ea. Both of
    these are old enough that they are outside our platform support
    matrix now.
    
    Per repology, current shipping versions are:
    
                 RHEL-8: 2.56.4
          Debian Buster: 2.58.3
     openSUSE Leap 15.2: 2.62.6
       Ubuntu LTS 18.04: 2.56.4
       Ubuntu LTS 20.04: 2.64.6
                FreeBSD: 2.66.7
              Fedora 33: 2.66.8
              Fedora 34: 2.68.1
                OpenBSD: 2.68.1
         macOS HomeBrew: 2.68.1
    
    Thus Ubuntu LTS 18.04 / RHEL-8 are the constraint for GLib version
    at 2.56
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-11-berrange@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",b4c6036faa
0,"commit 6f0748a048b9a5e2284e4d0f832322f9c832ad5e
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:12 2021 +0100

    tests/docker: drop CentOS 7 container
    
    It has been over two years since RHEL-8 was released, and thus per the
    platform build policy, we no longer need to support RHEL-7 as a build
    target.
    
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Acked-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-10-berrange@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",6f0748a048
0,"commit fb1fa97c69ca2299158229c78fea68c4036e6c1b
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:11 2021 +0100

    tests/vm: convert centos VM recipe to CentOS 8
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-9-berrange@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",fb1fa97c69
0,"commit fd4eddc3a8237987c73fe1981ce9e3a4bd9fee29
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:10 2021 +0100

    crypto: drop used conditional check
    
    The condition being tested has never been set since the day the code was
    first introduced.
    
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-8-berrange@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",fd4eddc3a8
0,"commit d4c7ee330cd0ca05cc0c026f845af6711e37b0f7
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:09 2021 +0100

    crypto: bump min gnutls to 3.5.18, dropping RHEL-7 support
    
    It has been over two years since RHEL-8 was released, and thus per the
    platform build policy, we no longer need to support RHEL-7 as a build
    target. This lets us increment the minimum required gnutls version
    
    Per repology, current shipping versions are:
    
                 RHEL-8: 3.6.14
          Debian Buster: 3.6.7
     openSUSE Leap 15.2: 3.6.7
       Ubuntu LTS 18.04: 3.5.18
       Ubuntu LTS 20.04: 3.6.13
                FreeBSD: 3.6.15
              Fedora 33: 3.6.16
              Fedora 34: 3.7.1
                OpenBSD: 3.6.15
         macOS HomeBrew: 3.6.15
    
    Ubuntu LTS 18.04 has the oldest version and so 3.5.18 is the new minimum.
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-7-berrange@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    [thuth: rebased to use .gitlab-ci.d/buildtest.yml]
    Signed-off-by: Thomas Huth <thuth@redhat.com>",d4c7ee330c
0,"commit b33a84632a3759c00320fd80923aa963c11207fc
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:08 2021 +0100

    crypto: bump min gcrypt to 1.8.0, dropping RHEL-7 support
    
    It has been over two years since RHEL-8 was released, and thus per the
    platform build policy, we no longer need to support RHEL-7 as a build
    target. This lets us increment the minimum required gcrypt version and
    assume that HMAC is always supported
    
    Per repology, current shipping versions are:
    
                 RHEL-8: 1.8.5
          Debian Buster: 1.8.4
     openSUSE Leap 15.2: 1.8.2
       Ubuntu LTS 18.04: 1.8.1
       Ubuntu LTS 20.04: 1.8.5
                FreeBSD: 1.9.2
              Fedora 33: 1.8.6
              Fedora 34: 1.9.3
                OpenBSD: 1.9.3
         macOS HomeBrew: 1.9.3
    
    Ubuntu LTS 18.04 has the oldest version and so 1.8.0 is the new minimum.
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-6-berrange@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    [thuth: rebased to use .gitlab-ci.d/buildtest.yml]
    Signed-off-by: Thomas Huth <thuth@redhat.com>",b33a84632a
0,"commit 115e4b70037ddf6014efa4ffcd01e7fa3497a741
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:07 2021 +0100

    crypto: drop back compatibility typedefs for nettle
    
    Now that we only support modern nettle, we don't need to have local
    typedefs to mask the real nettle types.
    
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-5-berrange@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",115e4b7003
0,"commit 20ba7a4a34bc96fb53ce1fb837d280339c6f5671
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:06 2021 +0100

    crypto: bump min nettle to 3.4, dropping RHEL-7 support
    
    It has been over two years since RHEL-8 was released, and thus per the
    platform build policy, we no longer need to support RHEL-7 as a build
    target. This lets us increment the minimum required nettle version and
    drop a lot of backwards compatibility code for 2.x series of nettle.
    
    Per repology, current shipping versions are:
    
                 RHEL-8: 3.4.1
          Debian Buster: 3.4.1
     openSUSE Leap 15.2: 3.4.1
       Ubuntu LTS 18.04: 3.4
       Ubuntu LTS 20.04: 3.5.1
                FreeBSD: 3.7.2
              Fedora 33: 3.5.1
              Fedora 34: 3.7.2
                OpenBSD: 3.7.2
         macOS HomeBrew: 3.7.2
    
    Ubuntu LTS 18.04 has the oldest version and so 3.4 is the new minimum.
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-4-berrange@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    [thuth: rebased to use .gitlab-ci.d/buildtest.yml]
    Signed-off-by: Thomas Huth <thuth@redhat.com>",20ba7a4a34
0,"commit f4d4be8212b946abfd438c046378240499bb8358
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:05 2021 +0100

    patchew: move quick build job from CentOS 7 to CentOS 8 container
    
    It has been over two years since RHEL-8 was released, and thus per the
    platform build policy, we no longer need to support RHEL-7 as a build
    target.
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210514120415.1368922-3-berrange@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",f4d4be8212
0,"commit b4c10fc6fe452c080004a484554275794160d379
Author: Thomas Huth <thuth@redhat.com>
Date:   Wed May 19 17:58:59 2021 +0200

    block/ssh: Bump minimum libssh version to 0.8.7
    
    It has been over two years since RHEL-8 was released, and thus per the
    platform build policy, we no longer need to support RHEL-7 as a build
    target. So from the RHEL-7 perspective, we do not have to support
    libssh v0.7 anymore now.
    
    Let's look at the versions from other distributions and operating
    systems - according to repology.org, current shipping versions are:
    
                 RHEL-8: 0.9.4
          Debian Buster: 0.8.7
     openSUSE Leap 15.2: 0.8.7
       Ubuntu LTS 18.04: 0.8.0 *
       Ubuntu LTS 20.04: 0.9.3
                FreeBSD: 0.9.5
              Fedora 33: 0.9.5
              Fedora 34: 0.9.5
                OpenBSD: 0.9.5
         macOS HomeBrew: 0.9.5
             HaikuPorts: 0.9.5
    
    * The version of libssh in Ubuntu 18.04 claims to be 0.8.0 from the
    name of the package, but in reality it is a 0.7 patched up as a
    Frankenstein monster with patches from the 0.8 development branch.
    This gave us some headaches in the past already and so it never worked
    with QEMU. All attempts to get it supported have failed in the past,
    patches for QEMU have never been merged and a request to Ubuntu to
    fix it in their 18.04 distro has been ignored:
    
     https://bugs.launchpad.net/ubuntu/+source/libssh/+bug/1847514
    
    Thus we really should ignore the libssh in Ubuntu 18.04 in QEMU, too.
    
    Fix it by bumping the minimum libssh version to something that is
    greater than 0.8.0 now. Debian Buster and openSUSE Leap have the
    oldest version and so 0.8.7 is the new minimum.
    
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Tested-by: Richard W.M. Jones <rjones@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Acked-by: Richard W.M. Jones <rjones@redhat.com>
    Message-Id: <20210519155859.344569-1-thuth@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",b4c10fc6fe
0,"commit 13cb12f61923bd8c24af8b6e6326c911e970ecf8
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Mon May 17 17:17:02 2021 +0200

    docs: fix references to docs/devel/s390-dasd-ipl.rst
    
    Commit cc3d15a5ea (""docs: rstfy s390 dasd ipl documentation"")
    converted docs/devel/s390-dasd-ipl.txt to docs/devel/s390-dasd-ipl.rst.
    
    We still have several references to the old file, so let's fix them
    with the following command:
    
      sed -i s/s390-dasd-ipl.txt/s390-dasd-ipl.rst/ \
          $(git grep -l docs/devel/s390-dasd-ipl.txt)
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Acked-by: Cornelia Huck <cohuck@redhat.com>
    Message-Id: <20210517151702.109066-6-sgarzare@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",13cb12f619
0,"commit 773c1f1e9492a60c0ab98f451e9415e7ad4774fd
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Mon May 17 17:17:01 2021 +0200

    docs: fix references to docs/specs/tpm.rst
    
    Commit 6e8a3ff6ed (""docs/specs/tpm: reST-ify TPM documentation"")
    converted docs/specs/tpm.txt to docs/specs/tpm.rst.
    
    We still have several references to the old file, so let's fix them
    with the following command:
    
      sed -i s/tpm.txt/tpm.rst/ $(git grep -l docs/specs/tpm.txt)
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210517151702.109066-5-sgarzare@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",773c1f1e94
0,"commit 551bdfa079b8b08ee212a36675774a1d22bc9fcf
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Mon May 17 17:17:00 2021 +0200

    docs: fix references to docs/devel/build-system.rst
    
    Commit a14f0bf165 (""docs: convert build system documentation to rST"")
    converted docs/devel/build-system.txt to docs/devel/build-system.rst.
    
    We still have several references to the old file, so let's fix them
    with the following command:
    
      sed -i s/build-system.txt/build-system.rst/ \
          $(git grep -l docs/devel/build-system.txt)
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Message-Id: <20210517151702.109066-4-sgarzare@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",551bdfa079
0,"commit 29f2316761ef2c83581893bcffa43f11fba5b2fe
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Mon May 17 17:16:59 2021 +0200

    docs: fix references to docs/devel/atomics.rst
    
    Commit 15e8699f00 (""atomics: convert to reStructuredText"") converted
    docs/devel/atomics.txt to docs/devel/atomics.rst.
    
    We still have several references to the old file, so let's fix them
    with the following command:
    
      sed -i s/atomics.txt/atomics.rst/ $(git grep -l docs/devel/atomics.txt)
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210517151702.109066-3-sgarzare@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",29f2316761
0,"commit d0fb9657a33dd3d1db1b492c4dcc7c778e40e5c0
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Mon May 17 17:16:58 2021 +0200

    docs: fix references to docs/devel/tracing.rst
    
    Commit e50caf4a5c (""tracing: convert documentation to rST"")
    converted docs/devel/tracing.txt to docs/devel/tracing.rst.
    
    We still have several references to the old file, so let's fix them
    with the following command:
    
      sed -i s/tracing.txt/tracing.rst/ $(git grep -l docs/devel/tracing.txt)
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210517151702.109066-2-sgarzare@redhat.com>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",d0fb9657a3
0,"commit dd2db39d78431ab5a0b78777afaab3d61e94533e
Merge: 52848929b7 d47b85502b
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Tue Jun 1 21:23:26 2021 +0100

    Merge remote-tracking branch 'remotes/ehabkost-gl/tags/x86-next-pull-request' into staging
    
    x86 queue, 2021-06-01
    
    Features:
    * Add CPU model versions supporting 'xsaves' (Vitaly Kuznetsov)
    * Support AVX512 ZMM regs dump (Robert Hoo)
    
    Bug fixes:
    * Use better matching family/model/stepping for generic CPUs
      (Daniel P. Berrangé)
    
    Cleanups:
    * Hyper-V feature initialization cleanup (Vitaly Kuznetsov)
    * SEV firmware error list touchups (Connor Kuehl)
    * Constify CPUCaches and X86CPUDefinition (Philippe Mathieu-Daudé)
    * Document when features can be added to kvm_default_props
      (Eduardo Habkost)
    
    # gpg: Signature made Tue 01 Jun 2021 19:08:33 BST
    # gpg:                using RSA key 5A322FD5ABC4D3DBACCFD1AA2807936F984DC5A6
    # gpg:                issuer ""ehabkost@redhat.com""
    # gpg: Good signature from ""Eduardo Habkost <ehabkost@redhat.com>"" [full]
    # Primary key fingerprint: 5A32 2FD5 ABC4 D3DB ACCF  D1AA 2807 936F 984D C5A6
    
    * remotes/ehabkost-gl/tags/x86-next-pull-request: (24 commits)
      sev: add missing firmware error conditions
      sev: use explicit indices for mapping firmware error codes to strings
      target/i386/sev: add support to query the attestation report
      i386: use global kvm_state in hyperv_enabled() check
      i386: prefer system KVM_GET_SUPPORTED_HV_CPUID ioctl over vCPU's one
      i386: adjust the expected KVM_GET_SUPPORTED_HV_CPUID array size
      i386: switch hyperv_expand_features() to using error_setg()
      i386: move eVMCS enablement to hyperv_init_vcpu()
      i386: split hyperv_handle_properties() into hyperv_expand_features()/hyperv_fill_cpuids()
      i386: introduce hv_cpuid_cache
      i386: drop FEAT_HYPERV feature leaves
      i386: introduce hv_cpuid_get_host()
      i386: introduce hyperv_feature_supported()
      i386: stop using env->features[] for filling Hyper-V CPUIDs
      i386: always fill Hyper-V CPUID feature leaves from X86CPU data
      i386: invert hyperv_spinlock_attempts setting logic with hv_passthrough
      i386: keep hyperv_vendor string up-to-date
      i386: use better matching family/model/stepping for 'max' CPU
      i386: use better matching family/model/stepping for 'qemu64' CPU
      i386/cpu_dump: support AVX512 ZMM regs dump
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",dd2db39d78
0,"commit 6b9c277797879ce41ed20deb6737f4156cc279b3
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:15 2021 -0400

    gitlab: add python linters to CI
    
    Add a Python container that has just enough juice for us to run the
    Python code quality analysis tools. Base this container on Fedora,
    because Fedora has very convenient packaging for testing multiple Python
    versions.
    
    We need python3, pip (for pulling packages), pipenv and virtualenv for
    creating virtual environments, and tox for running tests. make is needed
    for running 'make check-tox' and 'make venv-check' targets. Python3.10
    is needed explicitly because the tox package only pulls in 3.6-3.9, but
    we wish to test the forthcoming release of Python as well to help
    predict any problems. Lastly, we need gcc to compile PyPI packages that
    may not have a binary distribution available.
    
    Add two tests:
    
    check-python-pipenv uses pipenv to test a frozen, very explicit set of
    packages against our minimum supported python version, Python 3.6. This
    test is not allowed to fail. The dependencies this test uses do not
    change unless python/Pipfile.lock is changed.
    
    check-python-tox uses tox to install the latest versions of required
    python dependencies against a wide array of Python versions from 3.6 to
    3.9, even including the yet-to-be-released Python 3.10. This test is
    allowed to fail with a warning.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-32-jsnow@redhat.com
    [Fix rebase conflict over .gitlab-ci.yml --js]
    Signed-off-by: John Snow <jsnow@redhat.com>",6b9c277797
0,"commit 3c8de38c8515a300b7842d95893b9e95caaa0ad6
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:14 2021 -0400

    python: add tox support
    
    This is intended to be a manually run, non-CI script.
    
    Use tox to test the linters against all python versions from 3.6 to
    3.10. This will only work if you actually have those versions installed
    locally, but Fedora makes this easy:
    
    > sudo dnf install python3.6 python3.7 python3.8 python3.9 python3.10
    
    Unlike the pipenv tests (make venv-check), this pulls ""whichever""
    versions of the python packages, so they are unpinned and may break as
    time goes on. In the case that breakages are found, setup.cfg should be
    amended accordingly to avoid the bad dependant versions, or the code
    should be amended to work around the issue.
    
    With confidence that the tests pass on 3.6 through 3.10 inclusive, add
    the appropriate classifiers to setup.cfg to indicate which versions we
    claim to support.
    
    Tox 3.18.0 or above is required to use the 'allowlist_externals' option.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Tested-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-31-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",3c8de38c85
0,"commit f9c0600f0200528921c43ccb8a8a44c81825a343
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:13 2021 -0400

    python: add .gitignore
    
    Ignore *Python* build and package output (build, dist, qemu.egg-info);
    these files are not created as part of a QEMU build. They are created by
    running the commands 'python3 setup.py <sdist|bdist>' when preparing
    tarballs to upload to e.g. PyPI.
    
    Ignore miscellaneous cached python confetti (mypy, pylint, et al)
    
    Ignore .idea (pycharm) .vscode, and .venv (pipenv et al).
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-30-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",f9c0600f02
0,"commit 6560379facf40e66fd8fbf4578f3d28f510167d8
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:12 2021 -0400

    python: add Makefile for some common tasks
    
    Add ""make venv"" to create the pipenv-managed virtual environment that
    contains our explicitly pinned dependencies.
    
    Add ""make check"" to run the python linters [in the host execution
    environment].
    
    Add ""make venv-check"" which combines the above two: create/update the
    venv, then run the linters in that explicitly managed environment.
    
    Add ""make develop"" which canonizes the runes needed to get both the
    linting pre-requisites (the ""[devel]"" part), and the editable
    live-install (the ""-e"" part) of these python libraries.
    
    make clean: delete miscellaneous python packaging output possibly
    created by pipenv, pip, or other python packaging utilities
    
    make distclean: delete the above, the .venv, and the editable ""qemu""
    package forwarder (qemu.egg-info) if there is one.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Tested-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-29-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",6560379fac
0,"commit 31622b2a8ac769b3cef730d3a24ed209e3861cbc
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:11 2021 -0400

    python: add avocado-framework and tests
    
    Try using avocado to manage our various tests; even though right now
    they're only invoking shell scripts and not really running any
    python-native code.
    
    Create tests/, and add shell scripts which call out to mypy, flake8,
    pylint and isort to enforce the standards in this directory.
    
    Add avocado-framework to the setup.cfg development dependencies, and add
    avocado.cfg to store some preferences for how we'd like the test output
    to look.
    
    Finally, add avocado-framework to the Pipfile environment and lock the
    new dependencies. We are using avocado >= 87.0 here to take advantage of
    some features that Cleber has helpfully added to make the test output
    here *very* friendly and easy to read for developers that might chance
    upon the output in Gitlab CI.
    
    [Note: ALL of the dependencies get updated to the most modern versions
    that exist at the time of this writing. No way around it that I have
    seen. Not ideal, but so it goes.]
    
    Provided you have the right development dependencies (mypy, flake8,
    isort, pylint, and now avocado-framework) You should be able to run
    ""avocado --config avocado.cfg run tests/"" from the python folder to run
    all of these linters with the correct arguments.
    
    (A forthcoming commit adds the much easier 'make check'.)
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Tested-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-28-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",31622b2a8a
0,"commit dbe75f55669a4e2295b0dae161b8f796e6dbaded
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:10 2021 -0400

    python: add devel package requirements to setuptools
    
    setuptools doesn't have a formal understanding of development requires,
    but it has an optional feataures section. Fine; add a ""devel"" feature
    and add the requirements to it.
    
    To avoid duplication, we can modify pipenv to install qemu[devel]
    instead. This enables us to run invocations like ""pip install -e
    .[devel]"" and test the package on bleeding-edge packages beyond those
    specified in Pipfile.lock.
    
    Importantly, this also allows us to install the qemu development
    packages in a non-networked mode: `pip3 install --no-index -e .[devel]`
    will now fail if the proper development dependencies are not already
    met. This can be useful for automated build scripts where fetching
    network packages may be undesirable.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-27-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",dbe75f5566
0,"commit a4dd49d40536b7ad70ab9c2e25a7810773ca32bc
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:09 2021 -0400

    python/qemu: add qemu package itself to pipenv
    
    This adds the python qemu packages themselves to the pipenv manifest.
    'pipenv sync' will create a virtual environment sufficient to use the SDK.
    'pipenv sync --dev' will create a virtual environment sufficient to use
    and test the SDK (with pylint, mypy, isort, flake8, etc.)
    
    The qemu packages are installed in 'editable' mode; all changes made to
    the python package inside the git tree will be reflected in the
    installed package without reinstallation. This includes changes made
    via git pull and so on.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Tested-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-26-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",a4dd49d405
0,"commit 22a973cb1d365f6c506e190d26e2261a65066e15
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:08 2021 -0400

    python/qemu: add isort to pipenv
    
    isort 5.0.0 through 5.0.4 has a bug that causes it to misinterpret
    certain ""from ..."" clauses that are not related to imports.
    
    isort < 5.1.1 has a bug where it does not handle comments near import
    statements correctly.
    
    Require 5.1.2 or greater.
    
    isort can be run (in ""check"" mode) with 'isort -c qemu' from the python
    root. isort can also be used to fix/rewrite import order automatically
    by using 'isort qemu'.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-25-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",22a973cb1d
0,"commit 158ac451b9e1029798f8fdc103fef64830e4314e
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:07 2021 -0400

    python: move .isort.cfg into setup.cfg
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-24-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",158ac451b9
0,"commit 0542a4c95767b2370cb6622efe723bb6197aa04c
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:06 2021 -0400

    python: add mypy to pipenv
    
    0.730 appears to be about the oldest version that works with the
    features we want, including nice human readable output (to make sure
    iotest 297 passes), and type-parameterized Popen generics.
    
    0.770, however, supports adding 'strict' to the config file, so require
    at least 0.770.
    
    Now that we are checking a namespace package, we need to tell mypy to
    allow PEP420 namespaces, so modify the mypy config as part of the move.
    
    mypy can now be run from the python root by typing 'mypy -p qemu'.
    
    A note on mypy invocation: Running it as ""mypy qemu/"" changes the import
    path detection mechanisms in mypy slightly, and it will fail. See
    https://github.com/python/mypy/issues/8584 for a decent entry point with
    more breadcrumbs on the various behaviors that contribute to this subtle
    difference.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Tested-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-23-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",0542a4c957
0,"commit e941c844e4446b6200ac102ef285544c406a2fcd
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:05 2021 -0400

    python: move mypy.ini into setup.cfg
    
    mypy supports reading its configuration values from a central project
    configuration file; do so.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-22-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",e941c844e4
0,"commit 6d17d910434568626c1c739b7d3d8433618b19eb
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:04 2021 -0400

    python: Add flake8 to pipenv
    
    flake8 3.5.x does not support the --extend-ignore syntax used in the
    .flake8 file to gracefully extend default ignores, so 3.6.x is our
    minimum requirement. There is no known upper bound.
    
    flake8 can be run from the python/ directory with no arguments.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Tested-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-21-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",6d17d91043
0,"commit 21d0b8667981e386cdfec18ad7d3eb4d9a33b088
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:03 2021 -0400

    python: add excluded dirs to flake8 config
    
    Instruct flake8 to avoid certain well-known directories created by
    python tooling that it ought not check.
    
    Note that at-present, nothing actually creates a "".venv"" directory; but
    it is in such widespread usage as a de-facto location for a developer's
    virtual environment that it should be excluded anyway. A forthcoming
    commit canonizes this with a ""make venv"" command.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-20-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",21d0b86679
0,"commit 81f8c4467c1899ef1ba984c70c328ac0c32af10c
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:02 2021 -0400

    python: move flake8 config to setup.cfg
    
    Update the comment concerning the flake8 exception to match commit
    42c0dd12, whose commit message stated:
    
    A note on the flake8 exception: flake8 will warn on *any* bare except,
    but pylint's is context-aware and will suppress the warning if you
    re-raise the exception.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-19-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",81f8c4467c
0,"commit b4d37d8188dbff34f0bf88279eeb5b6cb6d1ff82
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:01 2021 -0400

    python: add pylint to pipenv
    
    We are specifying >= pylint 2.8.x for several reasons:
    
    1. For setup.cfg support, added in pylint 2.5.x
    2. To specify a version that has incompatibly dropped
       bad-whitespace checks (2.6.x)
    3. 2.7.x fixes ""unsubscriptable"" warnings in Python 3.9
    4. 2.8.x adds a new, incompatible 'consider-using-with'
       warning that must be disabled in some cases.
       These pragmas cause warnings themselves in 2.7.x.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Tested-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-18-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",b4d37d8188
0,"commit ef42440d797a1549dd64fe2a51500ba55fe54c3f
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:17:00 2021 -0400

    python: move pylintrc into setup.cfg
    
    Delete the empty settings now that it's sharing a home with settings for
    other tools.
    
    pylint can now be run from this folder as ""pylint qemu"".
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Tested-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-17-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",ef42440d79
0,"commit d1e0476958cd275419754b8acf31a9f1dc62d3dd
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:59 2021 -0400

    python: add pylint import exceptions
    
    Pylint 2.5.x - 2.7.x have regressions that make import checking
    inconsistent, see:
    
    https://github.com/PyCQA/pylint/issues/3609
    https://github.com/PyCQA/pylint/issues/3624
    https://github.com/PyCQA/pylint/issues/3651
    
    Pinning to 2.4.4 is worse, because it mandates versions of shared
    dependencies that are too old for features we want in isort and mypy.
    Oh well.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-16-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",d1e0476958
0,"commit 41c1d81cf2a9bfdb310576a716f3777e8feb1822
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:58 2021 -0400

    python: Add pipenv support
    
    pipenv is a tool used for managing virtual environments with pinned,
    explicit dependencies. It is used for precisely recreating python
    virtual environments.
    
    pipenv uses two files to do this:
    
    (1) Pipfile, which is similar in purpose and scope to what setup.cfg
    lists. It specifies the requisite minimum to get a functional
    environment for using this package.
    
    (2) Pipfile.lock, which is similar in purpose to `pip freeze >
    requirements.txt`. It specifies a canonical virtual environment used for
    deployment or testing. This ensures that all users have repeatable
    results.
    
    The primary benefit of using this tool is to ensure *rock solid*
    repeatable CI results with a known set of packages. Although I endeavor
    to support as many versions as I can, the fluid nature of the Python
    toolchain often means tailoring code for fairly specific versions.
    
    Note that pipenv is *not* required to install or use this module; this is
    purely for the sake of repeatable testing by CI or developers.
    
    Here, a ""blank"" pipfile is added with no dependencies, but specifies
    Python 3.6 for the virtual environment.
    
    Pipfile will specify our version minimums, while Pipfile.lock specifies
    an exact loadout of packages that were known to operate correctly. This
    latter file provides the real value for easy setup of container images
    and CI environments.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-15-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",41c1d81cf2
0,"commit eae4e442caa087b2ef292a5fb6377236fa8423f2
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:57 2021 -0400

    python: add MANIFEST.in
    
    When creating a source or binary distribution via 'python3 setup.py
    <sdist|bdist>', the VERSION and PACKAGE.rst files aren't bundled by
    default. Create a MANIFEST.in file that instructs the build tools to
    include these so that installation from these files won't fail.
    
    This is required by 'tox', as well as by the tooling needed to upload
    packages to PyPI.
    
    Exclude the 'README.rst' file -- that's intended as a guidebook to our
    source tree, not a file that needs to be distributed.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-14-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",eae4e442ca
0,"commit 93128815af4efcaba03a5581c959bc7f98ee2725
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:56 2021 -0400

    python: add directory structure README.rst files
    
    Add short readmes to python/, python/qemu/, python/qemu/machine,
    python/qemu/qmp, and python/qemu/utils that explain the directory
    hierarchy. These readmes are visible when browsing the source on
    e.g. gitlab/github and are designed to help new developers/users quickly
    make sense of the source tree.
    
    They are not designed for inclusion in a published manual.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-13-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",93128815af
0,"commit 3afc32906f7bffd8e09b7d247d60b55c49665bd3
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:55 2021 -0400

    python: add VERSION file
    
    Python infrastructure as it exists today is not capable reliably of
    single-sourcing a package version from a parent directory. The authors
    of pip are working to correct this, but as of today this is not possible.
    
    The problem is that when using pip to build and install a python
    package, it copies files over to a temporary directory and performs its
    build there. This loses access to any information in the parent
    directory, including git itself.
    
    Further, Python versions have a standard (PEP 440) that may or may not
    follow QEMU's versioning. In general, it does; but naturally QEMU does
    not follow PEP 440. To avoid any automatically-generated conflict, a
    manual version file is preferred.
    
    I am proposing:
    
    - Python tooling follows the QEMU version, indirectly, but with a major
      version of 0 to indicate that the API is not expected to be
      stable. This would mean version 0.5.2.0, 0.5.1.1, 0.5.3.0, etc.
    
    - In the event that a Python package needs to be updated independently
      of the QEMU version, a pre-release alpha version should be preferred,
      but *only* after inclusion to the qemu development or stable branches.
    
      e.g. 0.5.2.0a1, 0.5.2.0a2, and so on should be preferred prior to
      5.2.0's release.
    
    - The Python core tooling makes absolutely no version compatibility
      checks or constraints. It *may* work with releases of QEMU from the
      past or future, but it is not required to.
    
      i.e., ""qemu.machine"" will, for now, remain in lock-step with QEMU.
    
    - We reserve the right to split the qemu package into independently
      versioned subpackages at a later date. This might allow for us to
      begin versioning QMP independently from QEMU at a later date, if
      we so choose.
    
    Implement this versioning scheme by adding a VERSION file and setting it
    to 0.6.0.0a1.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-12-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",3afc32906f
0,"commit ea1213b7ccc7c24a3c704dc88bd855df45203fed
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:54 2021 -0400

    python: add qemu package installer
    
    Add setup.cfg and setup.py, necessary for installing a package via
    pip. Add a ReST document (PACKAGE.rst) explaining the basics of what
    this package is for and who to contact for more information. This
    document will be used as the landing page for the package on PyPI.
    
    List the subpackages we intend to package by name instead of using
    find_namespace because find_namespace will naively also packages tests,
    things it finds in the dist/ folder, etc. I could not figure out how to
    modify this behavior; adding allow/deny lists to setuptools kept
    changing the packaged hierarchy. This works, roll with it.
    
    I am not yet using a pyproject.toml style package manifest, because
    ""editable"" installs are not defined (yet?) by PEP-517/518.
    
    I consider editable installs crucial for development, though they have
    (apparently) always been somewhat poorly defined.
    
    Pip now (19.2 and later) now supports editable installs for projects
    using pyproject.toml manifests, but might require the use of the
    --no-use-pep517 flag, which somewhat defeats the point. Full support for
    setup.py-less editable installs was not introduced until pip 21.1.1:
    https://github.com/pypa/pip/pull/9547/commits/7a95720e796a5e56481c1cc20b6ce6249c50f357
    
    For now, while the dust settles, stick with the de-facto
    setup.py/setup.cfg combination supported by setuptools. It will be worth
    re-evaluating this point again in the future when our supported build
    platforms all ship a fairly modern pip.
    
    Additional reading on this matter:
    
    https://github.com/pypa/packaging-problems/issues/256
    https://github.com/pypa/pip/issues/6334
    https://github.com/pypa/pip/issues/6375
    https://github.com/pypa/pip/issues/6434
    https://github.com/pypa/pip/issues/6438
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-11-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",ea1213b7cc
0,"commit beb6b57b3b1a1fe6ebc208d2edc12b504f69e29f
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:53 2021 -0400

    python: create qemu packages
    
    move python/qemu/*.py to python/qemu/[machine, qmp, utils]/*.py and
    update import directives across the tree.
    
    This is done to create a PEP420 namespace package, in which we may
    create subpackages. To do this, the namespace directory (""qemu"") should
    not have any modules in it. Those files will go into new 'machine',
    'qmp' and 'utils' subpackages instead.
    
    Implement machine/__init__.py making the top-level classes and functions
    from its various modules available directly inside the package. Change
    qmp.py to qmp/__init__.py similarly, such that all of the useful QMP
    library classes are available directly from ""qemu.qmp"" instead of
    ""qemu.qmp.qmp"".
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-10-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",beb6b57b3b
0,"commit 7f0a143b0cd7b2b7c05b55b1b6814747ef612ce3
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:52 2021 -0400

    iotests/297: add --namespace-packages to mypy arguments
    
    mypy is kind of weird about how it handles imports. For legacy reasons,
    it won't load PEP 420 namespaces, because of logic implemented prior to
    that becoming a standard.
    
    So, if you plan on using any, you have to pass
    --namespace-packages. Alright, fine.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-9-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",7f0a143b0c
0,"commit 859aeb67d7372e63bd7bb2c7d063c2a49f2507ab
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:51 2021 -0400

    python/machine: Trim line length to below 80 chars
    
    One more little delinting fix that snuck in.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-8-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",859aeb67d7
0,"commit a0eae17a59fcbcdc96af2ea2a6767d758ff4a916
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:50 2021 -0400

    python/machine: disable warning for Popen in _launch()
    
    We handle this resource rather meticulously in
    shutdown/kill/wait/__exit__ et al, through the laborious mechanisms in
    _do_shutdown().
    
    Quiet this pylint warning here.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-7-jsnow@redhat.com
    Message-id: 20210517184808.3562549-7-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",a0eae17a59
0,"commit 63c33f3c286efe4c6474b53ae97915c9d1a6923a
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:49 2021 -0400

    python/machine: Disable pylint warning for open() in _pre_launch
    
    Shift the open() call later so that the pylint pragma applies *only* to
    that one open() call. Add a note that suggests why this is safe: the
    resource is unconditionally cleaned up in _post_shutdown().
    
    _post_shutdown is called after failed launches (see launch()), and
    unconditionally after every call to shutdown(), and therefore also on
    __exit__.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-6-jsnow@redhat.com
    Message-id: 20210517184808.3562549-6-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",63c33f3c28
0,"commit 8825fed82a1949ed74f103c2ff26c4d71d2e4845
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:48 2021 -0400

    python/console_socket: Add a pylint ignore
    
    We manage cleaning up this resource ourselves. Pylint should shush.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-5-jsnow@redhat.com
    Message-id: 20210517184808.3562549-5-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",8825fed82a
0,"commit 14b41797d5eb20fb9c6d0a1fe809e8422938f230
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:47 2021 -0400

    python/machine: use subprocess.run instead of subprocess.Popen
    
    use run() instead of Popen() -- to assert to pylint that we are not
    forgetting to close a long-running program.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Tested-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-4-jsnow@redhat.com
    Message-id: 20210517184808.3562549-4-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",14b41797d5
0,"commit 07b71233a7ea77c0ec3687c3a3451865b3b899d3
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:46 2021 -0400

    python/machine: use subprocess.DEVNULL instead of open(os.path.devnull)
    
    One less file resource to manage, and it helps quiet some pylint >=
    2.8.0 warnings about not using a with-context manager for the open call.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Message-id: 20210527211715.394144-3-jsnow@redhat.com
    Message-id: 20210517184808.3562549-3-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",07b71233a7
0,"commit ee1a27235b7965bc5514555eec898f4d067fced2
Author: John Snow <jsnow@redhat.com>
Date:   Thu May 27 17:16:45 2021 -0400

    python/console_socket: avoid one-letter variable
    
    Fixes pylint warnings.
    
    Signed-off-by: John Snow <jsnow@redhat.com>
    Reviewed-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-id: 20210527211715.394144-2-jsnow@redhat.com
    Message-id: 20210517184808.3562549-2-jsnow@redhat.com
    Signed-off-by: John Snow <jsnow@redhat.com>",ee1a27235b
0,"commit 41787552de447733debe0616b716a0aa138242c7
Author: Willian Rampazzo <willianr@redhat.com>
Date:   Thu May 20 17:47:47 2021 -0300

    acceptance tests: bump Avocado version to 88.1
    
    Besides some internal changes, new features, and bug fixes, on the QEMU side,
    this version fixes the following message seen when running the acceptance
    tests: ""Error running method ""pre_tests"" of plugin ""fetchasset"": 'bytes'
    object has no attribute 'encode'"".
    
    The release notes are available at
    https://avocado-framework.readthedocs.io/en/latest/releases/88_0.html.
    
    Signed-off-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210520204747.210764-2-willianr@redhat.com>
    Acked-by: Cleber Rosa <crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",41787552de
0,"commit d214740c994f51370112ceda33a9d5546ff21c84
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:44 2021 -0400

    tests/acceptance/virtiofs_submounts.py: fix setup of SSH pubkey
    
    The public key argument should be a path to a file, and not the
    public key data.
    
    Reported-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Message-Id: <20210412044644.55083-12-crosa@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",d214740c99
0,"commit fd1ce58d901bbe982db8c19ca6e1a63b30643150
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:43 2021 -0400

    Acceptance Tests: introduce CPU hotplug test
    
    Even though there are qtest based tests for hotplugging CPUs (from
    which this test took some inspiration from), this one adds checks
    from a Linux guest point of view.
    
    It should also serve as an example for tests that follow a similar
    pattern and need to interact with QEMU (via qmp) and with the Linux
    guest via SSH.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Message-Id: <20210412044644.55083-11-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",fd1ce58d90
0,"commit 1e4e7efa01f021e7abeb0c12ff7bb3758da22134
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:42 2021 -0400

    Acceptance Tests: add basic documentation on LinuxTest base class
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Message-Id: <20210412044644.55083-10-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",1e4e7efa01
0,"commit a273387aec43d2f2cff19b232c8c3e569a669971
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:41 2021 -0400

    tests/acceptance/virtiofs_submounts.py: remove launch_vm()
    
    The LinuxTest class' launch_and_wait() method now behaves the same way
    as this test's custom launch_vm(), so let's just use the upper layer
    (common) method.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210412044644.55083-9-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",a273387aec
0,"commit c6620c443d076bc0c80357e41f8f8d7fcdade6df
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:40 2021 -0400

    Acceptance Tests: set up SSH connection by default after boot for LinuxTest
    
    The LinuxTest specifically targets users that need to interact with Linux
    guests.  So, it makes sense to give a connection by default, and avoid
    requiring it as boiler-plate code.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210412044644.55083-8-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",c6620c443d
0,"commit d8c6a89968906af24ab27acd936013d3f937fc16
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:39 2021 -0400

    Acceptance Tests: make username/password configurable
    
    This makes the username/password used for authentication configurable,
    because some guest operating systems may have restrictions on accounts
    to be used for logins, and it just makes it better documented.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210412044644.55083-7-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",d8c6a89968
0,"commit 54914114aff5008b58d3cf01bf9e2274144875ca
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:38 2021 -0400

    Acceptance Tests: add port redirection for ssh by default
    
    For users of the LinuxTest class, let's set up the VM with the port
    redirection for SSH, instead of requiring each test to set the same
    arguments.
    
    It also sets the network device, by default, to virtio-net.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210412044644.55083-6-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",54914114af
0,"commit 7edee7ad9408696b9b8d40b5842a07a0c4e9b7a2
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:37 2021 -0400

    Acceptance Tests: move useful ssh methods to base class
    
    Both the virtiofs submounts and the linux ssh mips malta tests
    contains useful methods related to ssh that deserve to be made
    available to other tests.  Let's move them to an auxiliary, mix-in
    class that will be used on the base LinuxTest class.
    
    The method that helps with setting up an ssh connection will now
    support both key and password based authentication, defaulting to key
    based.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Message-Id: <20210412044644.55083-5-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",7edee7ad94
0,"commit 976218cbe792c37c1af7840ca5113e37b5a51d95
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:36 2021 -0400

    Python: add utility function for retrieving port redirection
    
    Slightly different versions for the same utility code are currently
    present on different locations.  This unifies them all, giving
    preference to the version from virtiofs_submounts.py, because of the
    last tweaks added to it.
    
    While at it, this adds a ""qemu.utils"" module to host the utility
    function and a test.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210412044644.55083-4-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>
    [Squashed in below fix. --js]
    Signed-off-by: John Snow <jsnow@redhat.com>
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Message-Id: <20210601154546.130870-2-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",976218cbe7
0,"commit c028691e65b9f45e7a8ff8ffbfb9a3818478b572
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:35 2021 -0400

    tests/acceptance/virtiofs_submounts.py: evaluate string not length
    
    If the vmlinuz variable is set to anything that evaluates to True,
    then the respective arguments should be set.  If the variable contains
    an empty string, than it will evaluate to False, and the extra
    arguments will not be set.
    
    This keeps the same logic, but improves readability a bit.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Beraldo Leal <bleal@redhat.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210412044644.55083-3-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",c028691e65
0,"commit f084e148aa401f71c33da4268f73815e0dc2b262
Author: Cleber Rosa <crosa@redhat.com>
Date:   Mon Apr 12 00:46:34 2021 -0400

    tests/acceptance/virtiofs_submounts.py: add missing accel tag
    
    The tag is useful to select tests that depend/use a particular
    feature.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Message-Id: <20210412044644.55083-2-crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",f084e148aa
0,"commit 2ca6e26cea73fa1d270f73392e8b87f3e67e6a2b
Author: Cleber Rosa <crosa@redhat.com>
Date:   Thu Feb 11 17:01:42 2021 -0500

    Python: expose QEMUMachine's temporary directory
    
    Each instance of qemu.machine.QEMUMachine currently has a ""test
    directory"", which may not have any relation to a ""test"", and it's
    really a temporary directory.
    
    Users instantiating the QEMUMachine class will be able to set the
    location of the directory that will *contain* the QEMUMachine unique
    temporary directory, so that parameter name has been changed from
    test_dir to base_temp_dir.
    
    A property has been added to allow users to access it without using
    private attributes, and with that, the directory is created on first
    use of the property.
    
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Message-Id: <20210211220146.2525771-3-crosa@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Signed-off-by: Cleber Rosa <crosa@redhat.com>
    Signed-off-by: John Snow <jsnow@redhat.com>",2ca6e26cea
0,"commit d47b85502b92fe8015d38904cde54eb4d3364326
Author: Connor Kuehl <ckuehl@redhat.com>
Date:   Fri Apr 30 08:48:30 2021 -0500

    sev: add missing firmware error conditions
    
    The SEV userspace header[1] exports a couple of other error conditions that
    aren't listed in QEMU's SEV implementation, so let's just round out the
    list.
    
    [1] linux-headers/linux/psp-sev.h
    
    Signed-off-by: Connor Kuehl <ckuehl@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210430134830.254741-3-ckuehl@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",d47b85502b
0,"commit 5811b936bf4b0340a83fea8b5b574670d8c219c4
Author: Connor Kuehl <ckuehl@redhat.com>
Date:   Fri Apr 30 08:48:29 2021 -0500

    sev: use explicit indices for mapping firmware error codes to strings
    
    This can help lower any margin for error when making future additions to
    the list, especially if they're made out of order.
    
    While doing so, make capitalization of ASID consistent with its usage in
    the SEV firmware spec (Asid -> ASID).
    
    Signed-off-by: Connor Kuehl <ckuehl@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210430134830.254741-2-ckuehl@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",5811b936bf
0,"commit 3ea1a80243d5b5ba23d8c2b7d3a86034ea0ade22
Author: Brijesh Singh <brijesh.singh@amd.com>
Date:   Thu Apr 29 12:07:28 2021 -0500

    target/i386/sev: add support to query the attestation report
    
    The SEV FW >= 0.23 added a new command that can be used to query the
    attestation report containing the SHA-256 digest of the guest memory
    and VMSA encrypted with the LAUNCH_UPDATE and sign it with the PEK.
    
    Note, we already have a command (LAUNCH_MEASURE) that can be used to
    query the SHA-256 digest of the guest memory encrypted through the
    LAUNCH_UPDATE. The main difference between previous and this command
    is that the report is signed with the PEK and unlike the LAUNCH_MEASURE
    command the ATTESATION_REPORT command can be called while the guest
    is running.
    
    Add a QMP interface ""query-sev-attestation-report"" that can be used
    to get the report encoded in base64.
    
    Cc: James Bottomley <jejb@linux.ibm.com>
    Cc: Tom Lendacky <Thomas.Lendacky@amd.com>
    Cc: Eric Blake <eblake@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: kvm@vger.kernel.org
    Reviewed-by: James Bottomley <jejb@linux.ibm.com>
    Tested-by: James Bottomley <jejb@linux.ibm.com>
    Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Message-Id: <20210429170728.24322-1-brijesh.singh@amd.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",3ea1a80243
0,"commit 5aa9ef5e4bb8194e66c4b62d8fe7ef8392786a9f
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:25 2021 +0200

    i386: use global kvm_state in hyperv_enabled() check
    
    There is no need to use vCPU-specific kvm state in hyperv_enabled() check
    and we need to do that when feature expansion happens early, before vCPU
    specific KVM state is created.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-15-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",5aa9ef5e4b
0,"commit 2e905438cf65e8aa4fe720448e90b09eaac75f69
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:24 2021 +0200

    i386: prefer system KVM_GET_SUPPORTED_HV_CPUID ioctl over vCPU's one
    
    KVM_GET_SUPPORTED_HV_CPUID was made a system wide ioctl which can be called
    prior to creating vCPUs and we are going to use that to expand Hyper-V cpu
    features early. Use it when it is supported by KVM.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-14-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",2e905438cf
0,"commit 05c900ce7392ef2f0bc7647863c8680641e137df
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:23 2021 +0200

    i386: adjust the expected KVM_GET_SUPPORTED_HV_CPUID array size
    
    SYNDBG leaves were recently (Linux-5.8) added to KVM but we haven't
    updated the expected size of KVM_GET_SUPPORTED_HV_CPUID output in
    KVM so we now make serveral tries before succeeding. Update the
    default.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-13-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",05c900ce73
0,"commit f4a62495be47b0211359f3609aeaf04a4fd44368
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:22 2021 +0200

    i386: switch hyperv_expand_features() to using error_setg()
    
    Use standard error_setg() mechanism in hyperv_expand_features().
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-12-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",f4a62495be
0,"commit decb4f2013141906913b2c358f043337ab982d3e
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:21 2021 +0200

    i386: move eVMCS enablement to hyperv_init_vcpu()
    
    hyperv_expand_features() will be called before we create vCPU so
    evmcs enablement should go away. hyperv_init_vcpu() looks like the
    right place.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-11-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",decb4f2013
0,"commit f6e01ab5633da17d3c5e346bf07d01af12d39b9b
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:20 2021 +0200

    i386: split hyperv_handle_properties() into hyperv_expand_features()/hyperv_fill_cpuids()
    
    The intention is to call hyperv_expand_features() early, before vCPUs
    are created and use the acquired data later when we set guest visible
    CPUID data.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-10-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",f6e01ab563
0,"commit a8439be6b76e7f1dd631a49662314bc58e6c4ee0
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:19 2021 +0200

    i386: introduce hv_cpuid_cache
    
    Just like with cpuid_cache, it makes no sense to call
    KVM_GET_SUPPORTED_HV_CPUID more than once and instead of (ab)using
    env->features[] and/or trying to keep all the code in one place, it is
    better to introduce persistent hv_cpuid_cache and hv_cpuid_get_host()
    accessor to it.
    
    Note, hv_cpuid_get_fw() is converted to using hv_cpuid_get_host()
    just to be removed later with Hyper-V specific feature words.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-9-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",a8439be6b7
0,"commit 061817a7ccd9e1c028153f308c541c299a009ef8
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:18 2021 +0200

    i386: drop FEAT_HYPERV feature leaves
    
    Hyper-V feature leaves are weird. We have some of them in
    feature_word_info[] array but we don't use feature_word_info
    magic to enable them. Neither do we use feature_dependencies[]
    mechanism to validate the configuration as it doesn't allign
    well with Hyper-V's many-to-many dependency chains. Some of
    the feature leaves hold not only feature bits, but also values.
    E.g. FEAT_HV_NESTED_EAX contains both features and the supported
    Enlightened VMCS range.
    
    Hyper-V features are already represented in 'struct X86CPU' with
    uint64_t hyperv_features so duplicating them in env->features adds
    little (or zero) benefits. THe other half of Hyper-V emulation features
    is also stored with values in hyperv_vendor_id[], hyperv_limits[],...
    so env->features[] is already incomplete.
    
    Remove Hyper-V feature leaves from env->features[] completely.
    kvm_hyperv_properties[] is converted to using raw CPUID func/reg
    pairs for features, this allows us to get rid of hv_cpuid_get_fw()
    conversion.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-8-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",061817a7cc
0,"commit e1a66a1e27eee8b025954713d28b9e74d95a5271
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:17 2021 +0200

    i386: introduce hv_cpuid_get_host()
    
    As a preparation to implementing hv_cpuid_cache intro introduce
    hv_cpuid_get_host(). No functional change intended.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-7-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",e1a66a1e27
0,"commit 7682f857f49fdac2cd3094a634a606f6d6994cc3
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:16 2021 +0200

    i386: introduce hyperv_feature_supported()
    
    Clean up hv_cpuid_check_and_set() by separating hyperv_feature_supported()
    off it. No functional change intended.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-6-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",7682f857f4
0,"commit c830015e85103790dc06c434c246f2e8f5d15046
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:15 2021 +0200

    i386: stop using env->features[] for filling Hyper-V CPUIDs
    
    As a preparatory patch to dropping Hyper-V CPUID leaves from
    feature_word_info[] stop using env->features[] as a temporary
    storage of Hyper-V CPUIDs, just build Hyper-V CPUID leaves directly
    from kvm_hyperv_properties[] data.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-5-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",c830015e85
0,"commit 01e5582136188249e748d9af87397076bf814562
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:14 2021 +0200

    i386: always fill Hyper-V CPUID feature leaves from X86CPU data
    
    We have all the required data in X86CPU already and as we are about to
    split hyperv_handle_properties() into hyperv_expand_features()/
    hyperv_fill_cpuids() we can remove the blind copy. The functional change
    is that QEMU won't pass CPUID leaves it doesn't currently know about
    to the guest but arguably this is a good change.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-4-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",01e5582136
0,"commit 0c321f14b0ef94309b5e94855a8a9bc27ecc3911
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:13 2021 +0200

    i386: invert hyperv_spinlock_attempts setting logic with hv_passthrough
    
    There is no need to have this special case: like all other Hyper-V
    enlightenments we can just use kernel's supplied value in hv_passthrough
    mode.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-3-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",0c321f14b0
0,"commit 4519259a345e60a0b177176117e72be1e310377c
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Apr 22 18:11:12 2021 +0200

    i386: keep hyperv_vendor string up-to-date
    
    When cpu->hyperv_vendor is not set manually we default to ""Microsoft Hv""
    and in 'hv_passthrough' mode we get the information from the host. This
    information is stored in cpu->hyperv_vendor_id[] array but we don't update
    cpu->hyperv_vendor string so e.g. QMP's query-cpu-model-expansion output
    is incorrect.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210422161130.652779-2-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",4519259a34
0,"commit 40b3cc354a47d9017d280cb25efbe6f94d7575bb
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 7 14:36:50 2021 +0100

    i386: use better matching family/model/stepping for 'max' CPU
    
    The 'max' CPU under TCG currently reports a family/model/stepping that
    approximately corresponds to an AMD K7 vintage architecture.
    The K7 series predates the introduction of 64-bit support by AMD
    in the K8 series. This has been reported to lead to LLVM complaints
    about generating 64-bit code for a 32-bit CPU target
    
      LLVM ERROR: 64-bit code requested on a subtarget that doesn't support it!
    
    It appears LLVM looks at the family/model/stepping, despite qemu64
    reporting it is 64-bit capable.
    
    This patch changes 'max' to report a CPUID with the family, model
    and stepping taken from a
    
     AMD Athlon(tm) 64 X2 Dual Core Processor 4000+
    
    which is one of the first 64-bit AMD CPUs.
    
    Closes https://gitlab.com/qemu-project/qemu/-/issues/191
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Message-Id: <20210507133650.645526-3-berrange@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",40b3cc354a
0,"commit b7c290177ce1f035db8cdd8abf97b94a44e27f8c
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 7 14:36:49 2021 +0100

    i386: use better matching family/model/stepping for 'qemu64' CPU
    
    The 'qemu64' CPUID currently reports a family/model/stepping that
    approximately corresponds to an AMD K7 vintage architecture.
    The K7 series predates the introduction of 64-bit support by AMD
    in the K8 series. This has been reported to lead to LLVM complaints
    about generating 64-bit code for a 32-bit CPU target
    
      LLVM ERROR: 64-bit code requested on a subtarget that doesn't support it!
    
    It appears LLVM looks at the family/model/stepping, despite qemu64
    reporting it is 64-bit capable.
    
    This patch changes 'qemu64' to report a CPUID with the family, model
    and stepping taken from a
    
     AMD Athlon(tm) 64 X2 Dual Core Processor 4000+
    
    which is one of the first 64-bit AMD CPUs.
    
    Closes https://gitlab.com/qemu-project/qemu/-/issues/191
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Reviewed-by: Eduardo Habkost <ehabkost@redhat.com>
    Message-Id: <20210507133650.645526-2-berrange@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",b7c290177c
0,"commit f9c0322a5ff5dc28be41290a26d0133e86a6ea4c
Author: Robert Hoo <robert.hu@linux.intel.com>
Date:   Wed Apr 21 14:23:52 2021 +0800

    i386/cpu_dump: support AVX512 ZMM regs dump
    
    Since commit fa4518741e (target-i386: Rename struct XMMReg to ZMMReg),
    CPUX86State.xmm_regs[] has already been extended to 512bit to support
    AVX512.
    Also, other qemu level supports for AVX512 registers are there for
    years.
    But in x86_cpu_dump_state(), still only dump XMM registers no matter
    YMM/ZMM is enabled.
    This patch is to complement this, let it dump XMM/YMM/ZMM accordingly.
    
    Signed-off-by: Robert Hoo <robert.hu@linux.intel.com>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <1618986232-73826-1-git-send-email-robert.hu@linux.intel.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",f9c0322a5f
0,"commit e11fd68996fb27c040552320f01a7d30a15a7cc1
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Mon May 3 19:35:24 2021 +0200

    target/i386/cpu: Constify X86CPUDefinition
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210503173524.833052-3-philmd@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",e11fd68996
0,"commit e845de3851a135dd6537a650c2379ce7a6464ef1
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Mon May 3 19:35:23 2021 +0200

    target/i386/cpu: Constify CPUCaches
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210503173524.833052-2-philmd@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",e845de3851
0,"commit fd1fd38b863abe4763097e2603762e1c067fa6a2
Author: Eduardo Habkost <ehabkost@redhat.com>
Date:   Fri Sep 25 17:10:21 2020 -0400

    i386: Document when features can be added to kvm_default_props
    
    It's very easy to mistakenly extend kvm_default_props to include
    features that require a kernel version that's too recent.  Add a
    comment warning about that, pointing to the documentation file
    where the minimum kernel version for KVM is documented.
    
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Message-Id: <20200925211021.4158567-1-ehabkost@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",fd1fd38b86
0,"commit 7bde6b18575dd79c26ce1616e0c33151e83d9d7e
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Mon Apr 12 09:39:52 2021 +0200

    target/i386: Add CPU model versions supporting 'xsaves'
    
    Hyper-V 2016 refuses to boot on Skylake+ CPU models because they lack
    'xsaves'/'vmx-xsaves' features and this diverges from real hardware. The
    same issue emerges with AMD ""EPYC"" CPU model prior to version 3 which got
    'xsaves' added. EPYC-Rome/EPYC-Milan CPU models have 'xsaves' enabled from
    the very beginning so the comment blaming KVM to explain why other CPUs
    lack 'xsaves' is likely outdated.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210412073952.860944-1-vkuznets@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>",7bde6b1857
0,"commit 52848929b70dcf92a68aedcfd90207be81ba3274
Merge: f9dc72de91 fc967aad40
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Sun May 30 20:10:30 2021 +0100

    Merge remote-tracking branch 'remotes/kraxel/tags/usb-20210528-pull-request' into staging
    
    usb: bugfixes for hid and xhci.
    
    # gpg: Signature made Fri 28 May 2021 15:21:51 BST
    # gpg:                using RSA key A0328CFFB93A17A79901FE7D4CB6D8EED3E87138
    # gpg: Good signature from ""Gerd Hoffmann (work) <kraxel@redhat.com>"" [full]
    # gpg:                 aka ""Gerd Hoffmann <gerd@kraxel.org>"" [full]
    # gpg:                 aka ""Gerd Hoffmann (private) <kraxel@gmail.com>"" [full]
    # Primary key fingerprint: A032 8CFF B93A 17A7 9901  FE7D 4CB6 D8EE D3E8 7138
    
    * remotes/kraxel/tags/usb-20210528-pull-request:
      hw/usb: hcd-xhci-pci: Fix spec violation of IP flag for MSI/MSI-X
      hw/usb: hcd-xhci-pci: Raise MSI/MSI-X interrupts only when told to
      hw/input/hid: Add support for keys of jp106 keyboard.
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",52848929b7
0,"commit f9dc72de91d2915b808e82da34bf613afa5cce43
Merge: a648df3889 bdd53f7392
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Sun May 30 18:33:43 2021 +0100

    Merge remote-tracking branch 'remotes/kraxel/tags/vga-20210527-pull-request' into staging
    
    virtio-gpu: add blob resource support.
    vhost-user-gpu: security fixes.
    
    # gpg: Signature made Thu 27 May 2021 15:23:25 BST
    # gpg:                using RSA key A0328CFFB93A17A79901FE7D4CB6D8EED3E87138
    # gpg: Good signature from ""Gerd Hoffmann (work) <kraxel@redhat.com>"" [full]
    # gpg:                 aka ""Gerd Hoffmann <gerd@kraxel.org>"" [full]
    # gpg:                 aka ""Gerd Hoffmann (private) <kraxel@gmail.com>"" [full]
    # Primary key fingerprint: A032 8CFF B93A 17A7 9901  FE7D 4CB6 D8EE D3E8 7138
    
    * remotes/kraxel/tags/vga-20210527-pull-request: (23 commits)
      virtio-gpu: Update cursor data using blob
      virtio-gpu: Add virtio_gpu_set_scanout_blob
      virtio-gpu: Factor out update scanout
      virtio-gpu: Add helpers to create and destroy dmabuf objects
      ui/pixman: Add qemu_pixman_to_drm_format()
      virtio-gpu: Add virtio_gpu_resource_create_blob
      virtio-gpu: Add initial definitions for blob resources
      virtio-gpu: Refactor virtio_gpu_create_mapping_iov
      virtio-gpu: Refactor virtio_gpu_set_scanout
      virtio-gpu: Add virtio_gpu_find_check_resource
      stubs: Add stubs for udmabuf helpers
      virtio-gpu: Add udmabuf helpers
      headers: Add udmabuf.h
      ui: Get the fd associated with udmabuf driver
      hw/display/qxl: Set pci rom address aligned with page size
      vhost-user-gpu: abstract vg_cleanup_mapping_iov
      vhost-user-gpu: fix OOB write in 'virgl_cmd_get_capset' (CVE-2021-3546)
      vhost-user-gpu: fix memory leak in 'virgl_resource_attach_backing' (CVE-2021-3544)
      vhost-user-gpu: fix memory leak in 'virgl_cmd_resource_unref' (CVE-2021-3544)
      vhost-user-gpu: fix memory leak while calling 'vg_resource_unref' (CVE-2021-3544)
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",f9dc72de91
0,"commit a648df38898ddbad1bd6d71a6680b3788f6528b2
Merge: 62c0ac5041 4f8a39494a
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri May 28 22:55:56 2021 +0100

    Merge remote-tracking branch 'remotes/jasowang/tags/net-pull-request' into staging
    
    # gpg: Signature made Thu 27 May 2021 04:06:17 BST
    # gpg:                using RSA key EF04965B398D6211
    # gpg: Good signature from ""Jason Wang (Jason Wang on RedHat) <jasowang@redhat.com>"" [marginal]
    # gpg: WARNING: This key is not certified with sufficiently trusted signatures!
    # gpg:          It is not certain that the signature belongs to the owner.
    # Primary key fingerprint: 215D 46F4 8246 689E C77F  3562 EF04 965B 398D 6211
    
    * remotes/jasowang/tags/net-pull-request:
      tap-bsd: Remove special casing for older OpenBSD releases
      virtio-net: failover: add missing remove_migration_state_change_notifier()
      hw/net/imx_fec: return 0xffff when accessing non-existing PHY
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",a648df3889
0,"commit 62c0ac5041e9130b041adfa13a41583d3c3ddd24
Merge: 7258034ab4 119065574d
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Fri May 28 16:25:20 2021 +0100

    Merge remote-tracking branch 'remotes/rth-gitlab/tags/pull-tcg-20210526' into staging
    
    Adjust types for some memory access functions.
    Reduce inclusion of tcg headers.
    Fix watchpoints vs replay.
    Fix tcg/aarch64 roli expansion.
    Introduce SysemuCPUOps structure.
    
    # gpg: Signature made Thu 27 May 2021 00:43:54 BST
    # gpg:                using RSA key 7A481E78868B4DB6A85A05C064DF38E8AF7E215F
    # gpg:                issuer ""richard.henderson@linaro.org""
    # gpg: Good signature from ""Richard Henderson <richard.henderson@linaro.org>"" [full]
    # Primary key fingerprint: 7A48 1E78 868B 4DB6 A85A  05C0 64DF 38E8 AF7E 215F
    
    * remotes/rth-gitlab/tags/pull-tcg-20210526: (31 commits)
      hw/core: Constify TCGCPUOps
      target/mips: Fold jazz behaviour into mips_cpu_do_transaction_failed
      cpu: Move CPUClass::get_paging_enabled to SysemuCPUOps
      cpu: Move CPUClass::get_memory_mapping to SysemuCPUOps
      cpu: Move CPUClass::get_phys_page_debug to SysemuCPUOps
      cpu: Move CPUClass::asidx_from_attrs to SysemuCPUOps
      cpu: Move CPUClass::write_elf* to SysemuCPUOps
      cpu: Move CPUClass::get_crash_info to SysemuCPUOps
      cpu: Move CPUClass::virtio_is_big_endian to SysemuCPUOps
      cpu: Move CPUClass::vmsd to SysemuCPUOps
      cpu: Introduce SysemuCPUOps structure
      cpu: Move AVR target vmsd field from CPUClass to DeviceClass
      cpu: Rename CPUClass vmsd -> legacy_vmsd
      cpu: Assert DeviceClass::vmsd is NULL on user emulation
      cpu: Directly use get_memory_mapping() fallback handlers in place
      cpu: Directly use get_paging_enabled() fallback handlers in place
      cpu: Directly use cpu_write_elf*() fallback handlers in place
      cpu: Introduce cpu_virtio_is_big_endian()
      cpu: Un-inline cpu_get_phys_page_debug and cpu_asidx_from_attrs
      cpu: Split as cpu-common / cpu-sysemu
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",62c0ac5041
0,"commit fc967aad408eb4777b099d17ada1f39be5f6fd2e
Author: Ruimei Yan <ruimei.yan@windriver.com>
Date:   Fri May 21 10:42:24 2021 +0800

    hw/usb: hcd-xhci-pci: Fix spec violation of IP flag for MSI/MSI-X
    
    Per xHCI spec v1.2 chapter 4.17.5 page 296:
    
      If MSI or MSI-X interrupts are enabled, Interrupt Pending (IP)
      shall be cleared automatically when the PCI dword write generated
      by the interrupt assertion is complete.
    
    Currently QEMU does not clear the IP flag in the MSI / MSI-X mode.
    This causes subsequent spurious interrupt to be delivered to guests.
    To solve this, we change the xhci intr_raise() hook routine to have
    a bool return value that is passed to its caller (the xhci core),
    with true indicating that IP should be self-cleared.
    
    Fixes: 62c6ae04cf43 (""xhci: Initial xHCI implementation"")
    Fixes: 4c47f800631a (""xhci: add msix support"")
    Signed-off-by: Ruimei Yan <ruimei.yan@windriver.com>
    [bmeng: move IP clear codes from xhci pci to xhci core]
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Message-Id: <20210521024224.2277634-2-bmeng.cn@gmail.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",fc967aad40
0,"commit 3c6151cd11ae7e4a7dae10f8c17ab1fe2f0a73bf
Author: Ruimei Yan <ruimei.yan@windriver.com>
Date:   Fri May 21 10:42:23 2021 +0800

    hw/usb: hcd-xhci-pci: Raise MSI/MSI-X interrupts only when told to
    
    At present MSI / MSI-X interrupts are triggered regardless of the
    irq level. We should have checked the level to determine whether
    the interrupt needs to be delivered.
    
    The level check logic was present in early versions of the xhci
    model, but got dropped later by a rework of interrupt handling
    under commit 4c4abe7cc903 (""xhci: rework interrupt handling"").
    
    Fixes: 4c4abe7cc903 (""xhci: rework interrupt handling"")
    Signed-off-by: Ruimei Yan <ruimei.yan@windriver.com>
    Signed-off-by: Bin Meng <bin.meng@windriver.com>
    Message-Id: <20210521024224.2277634-1-bmeng.cn@gmail.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",3c6151cd11
0,"commit f9c481247f6a2c87439e0ebfa42cd56325db2ac0
Author: Katsuhiro Ueno <uenobk@gmail.com>
Date:   Tue Apr 27 11:02:46 2021 +0900

    hw/input/hid: Add support for keys of jp106 keyboard.
    
    Add support for the following keys: KATAKANAHIRAGANA, HENKAN, MUHENKAN,
    RO, and YEN.  Before this commit, these keys did not work as expected
    when a jp106 keyboard was connected to the guest as a usb-kbd device.
    
    Signed-off-by: Katsuhiro Ueno <uenobk@gmail.com>
    Message-Id: <CA+pCdY3iG+pKKQqEVknnWF-W0wK36S4U1jxPvxmGAPp6FFvz1Q@mail.gmail.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",f9c481247f
0,"commit 7258034ab40e6927acbd005feb295eb3acf972bb
Merge: c8616fc767 5e50c6c72b
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 27 19:17:42 2021 +0100

    Merge remote-tracking branch 'remotes/vivier/tags/m68k-for-6.1-pull-request' into staging
    
    m68k pull request 20210526
    
    implement m68k ""any instruction"" trace mode
    
    # gpg: Signature made Wed 26 May 2021 20:56:58 BST
    # gpg:                using RSA key CD2F75DDC8E3A4DC2E4F5173F30C38BD3F2FBE3C
    # gpg:                issuer ""laurent@vivier.eu""
    # gpg: Good signature from ""Laurent Vivier <lvivier@redhat.com>"" [full]
    # gpg:                 aka ""Laurent Vivier <laurent@vivier.eu>"" [full]
    # gpg:                 aka ""Laurent Vivier (Red Hat) <lvivier@redhat.com>"" [full]
    # Primary key fingerprint: CD2F 75DD C8E3 A4DC 2E4F  5173 F30C 38BD 3F2F BE3C
    
    * remotes/vivier/tags/m68k-for-6.1-pull-request:
      target/m68k: implement m68k ""any instruction"" trace mode
      target/m68k: introduce gen_singlestep_exception() function
      target/m68k: call gen_raise_exception() directly if single-stepping in gen_jmp_tb()
      target/m68k: introduce is_singlestepping() function
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",7258034ab4
0,"commit c8616fc7670b884de5f74d2767aade224c1c5c3a
Merge: c5847f5e4e 2d9e45b9cb
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 27 16:32:57 2021 +0100

    Merge remote-tracking branch 'remotes/philmd/tags/gitlab-ci-20210527' into staging
    
    GitLab CI patches queue
    
    - Explode .gitlab-ci.yml in reusable templates
    - Add job to cross build/test TCI on i386 host
    - Remove CentOS 7 linux-user build job
    - Temporarily set Avocado-based jobs in manual mode
    - Increase time to hold Avocado reports to 1 week
    
    # gpg: Signature made Thu 27 May 2021 15:40:58 BST
    # gpg:                using RSA key FAABE75E12917221DCFD6BB2E3E32C2CDEADC0DE
    # gpg: Good signature from ""Philippe Mathieu-Daudé (F4BUG) <f4bug@amsat.org>"" [full]
    # Primary key fingerprint: FAAB E75E 1291 7221 DCFD  6BB2 E3E3 2C2C DEAD C0DE
    
    * remotes/philmd/tags/gitlab-ci-20210527:
      gitlab: Convert check-dco/check-patch jobs to the 'rules' syntax
      gitlab: Use $CI_DEFAULT_BRANCH instead of hardcoded 'master'
      gitlab: Run Avocado tests manually (except mainstream CI)
      gitlab: Keep Avocado reports during 1 week
      gitlab: Extract cross-container jobs to container-cross.yml
      gitlab: Document how forks can use different set of jobs
      gitlab: Move current job set to qemu-project.yml
      gitlab: Extract all default build/test jobs to buildtest.yml
      gitlab: Drop linux user build job for CentOS 7
      gitlab: Extract core container jobs to container-core.yml
      gitlab: Extract default build/test jobs templates
      gitlab: Extract build stages to stages.yml
      gitlab: Extract DCO/style check jobs to static_checks.yml
      gitlab: Extract crossbuild job templates to crossbuild-template.yml
      gitlab: Extract container job template to container-template.yml
      gitlab: Enable cross-i386 builds of TCI
      gitlab: Rename ACCEL_CONFIGURE_OPTS to EXTRA_CONFIGURE_OPTS
      gitlab: Replace YAML anchors by extends (acceptance_test_job)
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",c8616fc767
0,"commit 2d9e45b9cb0baa7316901238f3795a74206af457
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Tue May 25 15:17:10 2021 +0200

    gitlab: Convert check-dco/check-patch jobs to the 'rules' syntax
    
    Per GitLab documentation [*]:
    
      ""rules replaces only/except and they can’t be used together
       in the same job.""
    
    Since the 'rules' syntax is more powerful and we are already using
    it, convert the check-dco/check-patch jobs so no job use the 'only/
    except' syntax.
    
    [*] https://docs.gitlab.com/ee/ci/yaml/#rules
    
    Inspired-by: Daniel P. Berrangé <berrange@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210525132418.4133235-3-f4bug@amsat.org>",2d9e45b9cb
0,"commit 1f88fad50eb7412e27e0db2c4e37cb9e982ffa80
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue May 25 17:30:57 2021 +0200

    gitlab: Use $CI_DEFAULT_BRANCH instead of hardcoded 'master'
    
    We want to skip the checkpatch and DCO signoff jobs when
    pushing to the default branch. Currently this branch is
    called 'master', but we don't need to hardcode this in
    the CI configuration, because the $CI_DEFAULT_BRANCH
    env variable exposes it.
    
    References:
    
    - https://sfconservancy.org/news/2020/jun/23/gitbranchname/
    - https://about.gitlab.com/blog/2021/03/10/new-git-default-branch-name/
    
    Suggested-by: Savitoj Singh <savsingh@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210525153826.4174157-1-philmd@redhat.com>
    Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>",1f88fad50e
0,"commit f56bf4caf7179c82a50e3f7618f335526fba37d3
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Tue May 25 07:18:39 2021 +0200

    gitlab: Run Avocado tests manually (except mainstream CI)
    
    Due to a design problem and misunderstanding between the Avocado
    framework and QEMU, Avocado is fetching many asset artifacts it
    shouldn't be fetching, exhausting the jobs CI timeout.
    
    Since Avocado artifacts are cached, this is not an issue with old
    forks, which already have populated the cache and do not need to
    download new artifacts to run the tests.
    
    However this is very confusing to new contributors who start to
    fork the project and keep having failing CI pipelines.
    
    As a temporary kludge, add the QEMU_CI_AVOCADO_TESTING variable
    to allow old forks to keep running the Avocado tests, while still
    allowing new forks to use the mainstream set of CI tests.
    
    Keep the tests enabled by default on the mainstream namespace
    which is old enough to have a populated cache, hoping we will
    keep this cache long enough until the Avocado/QEMU design issue
    is fixed.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210525082556.4011380-9-f4bug@amsat.org>",f56bf4caf7
0,"commit f230dba714e7777098ede5758d62b21922e7ec2f
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Tue May 25 06:46:56 2021 +0200

    gitlab: Keep Avocado reports during 1 week
    
    Sometimes pull requests are merged during the week-end, triggering
    a CI pipeline. Currently if such pipeline fails, the Avocado reports
    are available for 2 days. For the reviewers working on the project
    during office hours, the reports are already discarded when they
    want to look at them. Increase this time to 1 week, which should
    give reviewers enough time.
    
    Only keep the reports on failure, which is the only case we'll
    look at them.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210525082556.4011380-8-f4bug@amsat.org>",f230dba714
0,"commit 961889f00c958e5500ec13eba71fbc5ccd243fd0
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Tue May 25 09:03:17 2021 +0200

    gitlab: Extract cross-container jobs to container-cross.yml
    
    Extract the jobs preparing the cross containers into a new file
    (container-cross.yml).
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210525082556.4011380-5-f4bug@amsat.org>",961889f00c
0,"commit 8b185c815ce8c16d7dea20c5ec379f9f30f00c74
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Tue May 25 06:34:01 2021 +0200

    gitlab: Document how forks can use different set of jobs
    
    Document how forks can use different set of jobs and add
    a big warning so no new configuration is added to this
    file.
    
    Suggested-by: Daniel Berrangé <berrange@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210525082556.4011380-4-f4bug@amsat.org>",8b185c815c
0,"commit a151926c80c3c8c279d664ca8182c46763ca0e42
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Sat Apr 10 12:58:55 2021 +0200

    gitlab: Move current job set to qemu-project.yml
    
    To allow forks to easily decide which jobs they want to run,
    but without disrupting the current default, move the current
    set of jobs to a new file corresponding to the jobs run by
    the mainstream project CI:
    https://gitlab.com/qemu-project/qemu/-/pipelines
    
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210511072952.2813358-11-f4bug@amsat.org>",a151926c80
0,"commit f2f5c3e62907088df2c0540f15c00ffc5a06211b
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Tue May 11 09:10:23 2021 +0200

    gitlab: Extract all default build/test jobs to buildtest.yml
    
    Extract the build/test jobs run by default on the mainstream
    CI into a new file (buildtest.yml).
    
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20210511072952.2813358-9-f4bug@amsat.org>",f2f5c3e629
0,"commit dcaf5e8f2fab7426194f3d656cf272accd28518b
Author: Daniel P. Berrangé <berrange@redhat.com>
Date:   Fri May 14 13:04:04 2021 +0100

    gitlab: Drop linux user build job for CentOS 7
    
    It has been over two years since RHEL-8 was released, and thus per the
    platform build policy, we no longer need to support RHEL-7 as a build
    target.
    
    The build-user-centos7 job was to detect a failure specific to CentOS
    7 and there are already other linux user jobs for other platforms.
    Thus we can drop this job rather than move it to CentOS 8.
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210514120415.1368922-2-berrange@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>",dcaf5e8f2f
0,"commit 6b505a4e4f0dbda681c9dfbaca2fa824c341981e
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed May 19 20:55:03 2021 +0200

    gitlab: Extract core container jobs to container-core.yml
    
    It is not possible to use the previously extracted templates
    without this set of core containers. Extract them into a new
    file (container-core.yml) to be able to build them without
    having to build all the other containers by default.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210519185504.2198573-10-f4bug@amsat.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",6b505a4e4f
0,"commit 6cd5251b407ab1ec7f5b8dbdc5d030ca48e4ed5c
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed May 19 20:55:01 2021 +0200

    gitlab: Extract default build/test jobs templates
    
    To be able to reuse the mainstream build/test jobs templates,
    extract them into a new file (buildtest-template.yml).
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210519185504.2198573-8-f4bug@amsat.org>
    [thuth: Keep the ""acceptance_test_job_template"" name for now]
    Signed-off-by: Thomas Huth <thuth@redhat.com>",6cd5251b40
0,"commit 07df3dfafa94460082f704dab674a7911c844ba6
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed May 19 20:55:00 2021 +0200

    gitlab: Extract build stages to stages.yml
    
    Extract the build stages used by our job templates to a new file
    (stages.yml) to be able to include it with the other templates,
    without having to run all the jobs included in the default
    .gitlab-ci.yml, which are mainly useful for mainstream CI.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210519185504.2198573-7-f4bug@amsat.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",07df3dfafa
0,"commit f659e6584a2022473af14ac4d89f656515c25ea4
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed May 19 20:54:59 2021 +0200

    gitlab: Extract DCO/style check jobs to static_checks.yml
    
    Extract the DCO / checkpatch jobs to a new file (static_checks.yml)
    to be able to run them without having to run all the jobs included
    in the default .gitlab-ci.yml, which are mainly useful for the
    mainstream CI.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210519185504.2198573-6-f4bug@amsat.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",f659e6584a
0,"commit ecac85fe49793fc4102b68f03ef18d74c4c77dee
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed May 19 20:54:58 2021 +0200

    gitlab: Extract crossbuild job templates to crossbuild-template.yml
    
    Extract the crossbuild job templates to a new file
    (crossbuild-template.yml) to be able to reuse them
    without having to run all the jobs included, which
    are mainly useful for mainstream CI.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210519185504.2198573-5-f4bug@amsat.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",ecac85fe49
0,"commit fb3c0334dedc09994359b213df303440a8ee6edd
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Wed May 19 20:54:57 2021 +0200

    gitlab: Extract container job template to container-template.yml
    
    Extract the container job template to a new file
    (container-template.yml) to be able to reuse it
    without having to run all the jobs included, which
    are mainly useful for mainstream CI.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210519185504.2198573-4-f4bug@amsat.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",fb3c0334de
0,"commit 840cafced12f962e7447de4333a55b67b44030a1
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sun May 2 16:57:27 2021 -0700

    gitlab: Enable cross-i386 builds of TCI
    
    We're currently only testing TCI with a 64-bit host -- also test
    with a 32-bit host.  Enable a selection of softmmu and user-only
    targets, 32-bit LE, 64-bit LE, 32-bit BE, as there are ifdefs for each.
    
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Acked-by: Thomas Huth <thuth@redhat.com>
    Message-Id: <20210502235727.1979457-27-richard.henderson@linaro.org>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>",840cafced1
0,"commit e4af2160e17ab48f49b6c18cf39de8562b390768
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sun May 2 16:57:26 2021 -0700

    gitlab: Rename ACCEL_CONFIGURE_OPTS to EXTRA_CONFIGURE_OPTS
    
    Suggested-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210502235727.1979457-26-richard.henderson@linaro.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>",e4af2160e1
0,"commit a4b201d1ace0d25219491ac3e14930e9539ae762
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Wed May 19 20:54:55 2021 +0200

    gitlab: Replace YAML anchors by extends (acceptance_test_job)
    
    'extends' is an alternative to using YAML anchors
    and is a little more flexible and readable. See:
    https://docs.gitlab.com/ee/ci/yaml/#extends
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Wainer dos Santos Moschetta <wainersm@redhat.com>
    Reviewed-by: Willian Rampazzo <willianr@redhat.com>
    Message-Id: <20210519185504.2198573-2-f4bug@amsat.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>",a4b201d1ac
0,"commit c5847f5e4e5e0aa6a3dd40c5d2ec9a70bdc990a5
Merge: 8385235ba9 e49e49dd73
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Thu May 27 14:57:00 2021 +0100

    Merge remote-tracking branch 'remotes/dgilbert/tags/pull-migration-20210526a' into staging
    
    Virtiofs, migration and hmp pull 2021-05-26
    
    Fixes for a loadvm regression from Kevin,
    some virtiofsd cleanups from Vivek and Mahmoud, and
    some RDMA migration fixups from Li.
    
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    
    # gpg: Signature made Wed 26 May 2021 18:43:30 BST
    # gpg:                using RSA key 45F5C71B4A0CB7FB977A9FA90516331EBC5BFDE7
    # gpg: Good signature from ""Dr. David Alan Gilbert (RH2) <dgilbert@redhat.com>"" [full]
    # Primary key fingerprint: 45F5 C71B 4A0C B7FB 977A  9FA9 0516 331E BC5B FDE7
    
    * remotes/dgilbert/tags/pull-migration-20210526a:
      migration/rdma: source: poll cm_event from return path
      migration/rdma: destination: create the return patch after the first accept
      migration/rdma: Fix rdma_addrinfo res leaks
      migration/rdma: cleanup rdma in rdma_start_incoming_migration error path
      migration/rdma: Fix cm_event used before being initialized
      tools/virtiofsd/fuse_opt.c: Replaced a malloc with GLib's g_try_malloc
      tools/virtiofsd/buffer.c: replaced a calloc call with GLib's g_try_new0
      virtiofsd: Set req->reply_sent right after sending reply
      virtiofsd: Check EOF before short read
      virtiofsd: Simplify skip byte logic
      virtiofsd: get rid of in_sg_left variable
      virtiofsd: Use iov_discard_front() to skip bytes
      virtiofsd: Get rid of unreachable code in read
      virtiofsd: Check for EINTR in preadv() and retry
      hmp: Fix loadvm to resume the VM on success instead of failure
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",c5847f5e4e
0,"commit bdd53f739273e97b5e5617b699d1763c42a5ea7e
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:29 2021 -0700

    virtio-gpu: Update cursor data using blob
    
    If a blob is available for the cursor, copy the data from the blob.
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-15-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",bdd53f7392
0,"commit 32db3c63ae113da6ac06d65d1ffb764e0c357a6c
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:28 2021 -0700

    virtio-gpu: Add virtio_gpu_set_scanout_blob
    
    This API allows Qemu to set the blob allocated by the Guest as
    the scanout buffer. If Opengl support is available, then the
    scanout buffer would be submitted as a dmabuf to the UI; if not,
    a pixman image is created from the scanout buffer and is
    submitted to the UI via the display surface.
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-14-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",32db3c63ae
0,"commit 81cd9f71087b31d0fb231d3736a31262d232375e
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:27 2021 -0700

    virtio-gpu: Factor out update scanout
    
    Creating a small helper function for updating the scanout
    will be useful in the next patch where this needs to be
    done early in do_set_scanout before returning.
    
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-13-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",81cd9f7108
0,"commit 5752519e93e2783c7fdca15b3480eb0f8687fb94
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:26 2021 -0700

    virtio-gpu: Add helpers to create and destroy dmabuf objects
    
    These helpers can be useful for creating dmabuf objects from blobs
    and submitting them to the UI.
    
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-12-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",5752519e93
0,"commit 8069b73bee8915acdeb69b4456b216f637032e7e
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:25 2021 -0700

    ui/pixman: Add qemu_pixman_to_drm_format()
    
    This new function to get the drm_format associated with a pixman
    format will be useful while creating a dmabuf.
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-11-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",8069b73bee
0,"commit e0933d91b1cdde2828955b02042e100dffd27399
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:24 2021 -0700

    virtio-gpu: Add virtio_gpu_resource_create_blob
    
    This API allows Qemu to register the blob allocated by the Guest
    as a new resource and map its backing storage.
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-10-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",e0933d91b1
0,"commit cce386e19ebb44cdb3517b6969af558c6edd2090
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:23 2021 -0700

    virtio-gpu: Add initial definitions for blob resources
    
    Add the property bit, configuration flag and other relevant
    macros and definitions associated with this feature.
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-9-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",cce386e19e
0,"commit 70d376623121f8ce77333fc96cd0d4c0719a5a4b
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:22 2021 -0700

    virtio-gpu: Refactor virtio_gpu_create_mapping_iov
    
    Instead of passing the attach_backing object to extract nr_entries
    and offset, explicitly pass these as arguments to this function.
    This will be helpful when adding create_blob API.
    
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-8-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",70d3766231
0,"commit e64d4b6a9bc3ba216a988276bcdc27d06fd48e59
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:21 2021 -0700

    virtio-gpu: Refactor virtio_gpu_set_scanout
    
    Store the meta-data associated with a FB in a new object
    (struct virtio_gpu_framebuffer) and pass the object to set_scanout.
    Also move code in set_scanout into a do_set_scanout function.
    This will be helpful when adding set_scanout_blob API.
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-7-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",e64d4b6a9b
0,"commit 25c001a40346342550ba152817ab306b6df0bd77
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:20 2021 -0700

    virtio-gpu: Add virtio_gpu_find_check_resource
    
    Move finding the resource and validating its backing storage into one
    function.
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-6-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",25c001a403
0,"commit 9192a40655140b743dfe0b1f921ab3b8b51579bf
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:19 2021 -0700

    stubs: Add stubs for udmabuf helpers
    
    This is needed to ensure that virtio-gpu device works for
    non-linux builds.
    
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-5-vivek.kasireddy@intel.com>
    
    [ kraxel: add virtio-gpu-udmabuf.c stubs only when building
              system emulation ]
    
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",9192a40655
0,"commit 9b60cdf98723b52d32fdd131f709923e05c0000f
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:18 2021 -0700

    virtio-gpu: Add udmabuf helpers
    
    Add helper functions to create a dmabuf for a resource and mmap it.
    Also, introduce the fields blob and blob_size so that these helpers
    can start to use them but the full picture will emerge only after
    adding create_blob API in patch 8 of this series.
    
    To be able to create a dmabuf using the udmabuf driver, Qemu needs
    to be lauched with the memfd memory backend like this:
    
    qemu-system-x86_64 -m 8192m -object memory-backend-memfd,id=mem1,size=8192M
    -machine memory-backend=mem1
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-4-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",9b60cdf987
0,"commit 4d010861611641c225a889d777e2670e3b8e4b3c
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:17 2021 -0700

    headers: Add udmabuf.h
    
    This adds udmabuf header to standard headers so that the
    relevant udmabuf objects can be accessed in subsequent
    patches.
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-3-vivek.kasireddy@intel.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",4d01086161
0,"commit 87f12216d9268ed90e6114a22cbc3f53b0fd8457
Author: Vivek Kasireddy <vivek.kasireddy@intel.com>
Date:   Wed May 26 16:14:16 2021 -0700

    ui: Get the fd associated with udmabuf driver
    
    Try to open the udmabuf dev node for the first time or return the
    fd if the device was previously opened.
    
    Based-on-patch-by: Gerd Hoffmann <kraxel@redhat.com>
    Cc: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Vivek Kasireddy <vivek.kasireddy@intel.com>
    Message-Id: <20210526231429.1045476-2-vivek.kasireddy@intel.com>
    
    [ kraxel: fixup fcntl.h include ]
    
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",87f12216d9
0,"commit ce7015d9e8669e2a45aba7a95fe6ef8a8f55bfe0
Author: maobibo <maobibo@loongson.cn>
Date:   Tue May 18 20:20:48 2021 +0800

    hw/display/qxl: Set pci rom address aligned with page size
    
    On some MIPS system, page size is 16K, and qxl vga device can
    be used for VM in kvm mode. Qxl pci rom size is set 8K fixed,
    smaller than 16K page size on host system, it fails to be
    added into memslots in kvm mode where memory_size and GPA
    are required to align with page size.
    
    This patch fixes this issue.
    
    Signed-off-by: Bibo Mao <maobibo@loongson.cn>
    Message-Id: <1621340448-31617-1-git-send-email-maobibo@loongson.cn>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",ce7015d9e8
0,"commit 3ea32d1355d446057c17458238db2749c52ee8f0
Author: Li Qiang <liq3ea@163.com>
Date:   Sat May 15 20:04:03 2021 -0700

    vhost-user-gpu: abstract vg_cleanup_mapping_iov
    
    Currently in vhost-user-gpu, we free resource directly in
    the cleanup case of resource. If we change the cleanup logic
    we need to change several places, also abstruct a
    'vg_create_mapping_iov' can be symmetry with the
    'vg_create_mapping_iov'. This is like what virtio-gpu does,
    no function changed.
    
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20210516030403.107723-9-liq3ea@163.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",3ea32d1355
0,"commit 9f22893adcb02580aee5968f32baa2cd109b3ec2
Author: Li Qiang <liq3ea@163.com>
Date:   Sat May 15 20:04:02 2021 -0700

    vhost-user-gpu: fix OOB write in 'virgl_cmd_get_capset' (CVE-2021-3546)
    
    If 'virgl_cmd_get_capset' set 'max_size' to 0,
    the 'virgl_renderer_fill_caps' will write the data after the 'resp'.
    This patch avoid this by checking the returned 'max_size'.
    
    virtio-gpu fix: abd7f08b23 (""display: virtio-gpu-3d: check
    virgl capabilities max_size"")
    
    Fixes: CVE-2021-3546
    Reported-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Prasad J Pandit <pjp@fedoraproject.org>
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20210516030403.107723-8-liq3ea@163.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",9f22893adc
0,"commit 63736af5a6571d9def93769431e0d7e38c6677bf
Author: Li Qiang <liq3ea@163.com>
Date:   Sat May 15 20:04:01 2021 -0700

    vhost-user-gpu: fix memory leak in 'virgl_resource_attach_backing' (CVE-2021-3544)
    
    If 'virgl_renderer_resource_attach_iov' failed, the 'res_iovs' will
    be leaked.
    
    Fixes: CVE-2021-3544
    Reported-by: Li Qiang <liq3ea@163.com>
    virtio-gpu fix: 33243031da (""virtio-gpu-3d: fix memory leak
    in resource attach backing"")
    
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20210516030403.107723-7-liq3ea@163.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",63736af5a6
0,"commit f6091d86ba9ea05f4e111b9b42ee0005c37a6779
Author: Li Qiang <liq3ea@163.com>
Date:   Sat May 15 20:04:00 2021 -0700

    vhost-user-gpu: fix memory leak in 'virgl_cmd_resource_unref' (CVE-2021-3544)
    
    The 'res->iov' will be leaked if the guest trigger following sequences:
    
            virgl_cmd_create_resource_2d
            virgl_resource_attach_backing
            virgl_cmd_resource_unref
    
    This patch fixes this.
    
    Fixes: CVE-2021-3544
    Reported-by: Li Qiang <liq3ea@163.com>
    virtio-gpu fix: 5e8e3c4c75 (""virtio-gpu: fix resource leak
    in virgl_cmd_resource_unref""
    
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20210516030403.107723-6-liq3ea@163.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",f6091d86ba
0,"commit b7afebcf9e6ecf3cf9b5a9b9b731ed04bca6aa3e
Author: Li Qiang <liq3ea@163.com>
Date:   Sat May 15 20:03:59 2021 -0700

    vhost-user-gpu: fix memory leak while calling 'vg_resource_unref' (CVE-2021-3544)
    
    If the guest trigger following sequences, the attach_backing will be leaked:
    
            vg_resource_create_2d
            vg_resource_attach_backing
            vg_resource_unref
    
    This patch fix this by freeing 'res->iov' in vg_resource_destroy.
    
    Fixes: CVE-2021-3544
    Reported-by: Li Qiang <liq3ea@163.com>
    virtio-gpu fix: 5e8e3c4c75 (""virtio-gpu: fix resource leak
    in virgl_cmd_resource_unref"")
    
    Reviewed-by: Prasad J Pandit <pjp@fedoraproject.org>
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20210516030403.107723-5-liq3ea@163.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",b7afebcf9e
0,"commit b9f79858a614d95f5de875d0ca31096eaab72c3b
Author: Li Qiang <liq3ea@163.com>
Date:   Sat May 15 20:03:58 2021 -0700

    vhost-user-gpu: fix memory leak in vg_resource_attach_backing (CVE-2021-3544)
    
    Check whether the 'res' has already been attach_backing to avoid
    memory leak.
    
    Fixes: CVE-2021-3544
    Reported-by: Li Qiang <liq3ea@163.com>
    virtio-gpu fix: 204f01b309 (""virtio-gpu: fix memory leak
    in resource attach backing"")
    
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20210516030403.107723-4-liq3ea@163.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",b9f79858a6
0,"commit 86dd8fac2acc366930a5dc08d3fb1b1e816f4e1e
Author: Li Qiang <liq3ea@163.com>
Date:   Sat May 15 20:03:57 2021 -0700

    vhost-user-gpu: fix resource leak in 'vg_resource_create_2d' (CVE-2021-3544)
    
    Call 'vugbm_buffer_destroy' in error path to avoid resource leak.
    
    Fixes: CVE-2021-3544
    Reported-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Prasad J Pandit <pjp@fedoraproject.org>
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20210516030403.107723-3-liq3ea@163.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",86dd8fac2a
0,"commit 121841b25d72d13f8cad554363138c360f1250ea
Author: Li Qiang <liq3ea@163.com>
Date:   Sat May 15 20:03:56 2021 -0700

    vhost-user-gpu: fix memory disclosure in virgl_cmd_get_capset_info (CVE-2021-3545)
    
    Otherwise some of the 'resp' will be leaked to guest.
    
    Fixes: CVE-2021-3545
    Reported-by: Li Qiang <liq3ea@163.com>
    virtio-gpu fix: 42a8dadc74 (""virtio-gpu: fix information leak
    in getting capset info dispatch"")
    
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Reviewed-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Message-Id: <20210516030403.107723-2-liq3ea@163.com>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",121841b25d
0,"commit 4f8a39494aded9f2026a26b137378ea2ee3d5338
Author: Brad Smith <brad@comstyle.com>
Date:   Fri Mar 26 19:49:12 2021 -0400

    tap-bsd: Remove special casing for older OpenBSD releases
    
    OpenBSD added support for tap(4) 10 releases ago.
    
    Remove the special casing for older releases.
    
    Signed-off-by: Brad Smith <brad@comstyle.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",4f8a39494a
0,"commit 1e157667d7657418b68fadb5cc016c6804e17501
Author: Laurent Vivier <lvivier@redhat.com>
Date:   Tue Apr 27 15:51:47 2021 +0200

    virtio-net: failover: add missing remove_migration_state_change_notifier()
    
    In the failover case configuration, virtio_net_device_realize() uses an
    add_migration_state_change_notifier() to add a state notifier, but this
    notifier is not removed by the unrealize function when the virtio-net
    card is unplugged.
    
    If the card is unplugged and a migration is started, the notifier is
    called and as it is not valid anymore QEMU crashes.
    
    This patch fixes the problem by adding the
    remove_migration_state_change_notifier() in virtio_net_device_unrealize().
    
    The problem can be reproduced with:
    
      $ qemu-system-x86_64 -enable-kvm -m 1g -M q35 \
        -device pcie-root-port,slot=4,id=root1 \
        -device pcie-root-port,slot=5,id=root2 \
        -device virtio-net-pci,id=net1,mac=52:54:00:6f:55:cc,failover=on,bus=root1 \
        -monitor stdio disk.qcow2
      (qemu) device_del net1
      (qemu) migrate ""exec:gzip -c > STATEFILE.gz""
    
      Thread 1 ""qemu-system-x86"" received signal SIGSEGV, Segmentation fault.
      0x0000000000000000 in ?? ()
      (gdb) bt
      #0  0x0000000000000000 in  ()
      #1  0x0000555555d726d7 in notifier_list_notify (...)
          at .../util/notify.c:39
      #2  0x0000555555842c1a in migrate_fd_connect (...)
          at .../migration/migration.c:3975
      #3  0x0000555555950f7d in migration_channel_connect (...)
          error@entry=0x0) at .../migration/channel.c:107
      #4  0x0000555555910922 in exec_start_outgoing_migration (...)
          at .../migration/exec.c:42
    
    Reported-by: Igor Mammedov <imammedo@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",1e157667d7
0,"commit f607dce2ed0a78bee3da6482c7abe58a80df2974
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Mon May 3 06:53:00 2021 -0700

    hw/net/imx_fec: return 0xffff when accessing non-existing PHY
    
    If a PHY does not exist, attempts to read from it should return 0xffff.
    Otherwise the Linux kernel will believe that a PHY is there and select
    the non-existing PHY. This in turn will result in network errors later
    on since the real PHY is not selected or configured.
    
    Since reading from or writing to a non-existing PHY is not an emulation
    error, replace guest error messages with traces.
    
    Fixes: 461c51ad4275 (""Add a phy-num property to the i.MX FEC emulator"")
    Cc: Jean-Christophe Dubois <jcd@tribudubois.net>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Tested-by: Bin Meng <bmeng.cn@gmail.com>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Jason Wang <jasowang@redhat.com>",f607dce2ed
0,"commit 119065574d02deffc28fe5b6a864db9b467c6ffd
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Feb 27 15:21:17 2021 -0800

    hw/core: Constify TCGCPUOps
    
    We no longer have any runtime modifications to this struct,
    so declare them all const.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-ID: <20210227232519.222663-3-richard.henderson@linaro.org>",119065574d
0,"commit 3803b6b4273afd50021c39a8e34ca706aeadb684
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Sat Feb 27 12:44:00 2021 -0800

    target/mips: Fold jazz behaviour into mips_cpu_do_transaction_failed
    
    Add a flag to MIPSCPUClass in order to avoid needing to
    replace mips_tcg_ops.do_transaction_failed.
    
    Tested-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
    Message-ID: <20210227232519.222663-2-richard.henderson@linaro.org>",3803b6b427
0,"commit 6bc0d6a04733cb39d2d2bf3380a857709113242f
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:39 2021 +0200

    cpu: Move CPUClass::get_paging_enabled to SysemuCPUOps
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-23-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",6bc0d6a047
0,"commit 2b60b62e05893de9698aa4a2c27de244870f0a50
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:38 2021 +0200

    cpu: Move CPUClass::get_memory_mapping to SysemuCPUOps
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-22-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",2b60b62e05
0,"commit 08928c6d0db7d554ef041256e52330bb257bc70f
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:37 2021 +0200

    cpu: Move CPUClass::get_phys_page_debug to SysemuCPUOps
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-21-f4bug@amsat.org>
    [rth: Drop declaration movement from target/*/cpu.h]
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",08928c6d0d
0,"commit faf39e828374d83ca82b02c0c25cdeca9ce9581e
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:36 2021 +0200

    cpu: Move CPUClass::asidx_from_attrs to SysemuCPUOps
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-20-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",faf39e8283
0,"commit 715e3c1afb0022fb2e0f60a198ed2c740e3c48f4
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:35 2021 +0200

    cpu: Move CPUClass::write_elf* to SysemuCPUOps
    
    The write_elf*() handlers are used to dump vmcore images.
    This feature is only meaningful for system emulation.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-19-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",715e3c1afb
0,"commit 83ec01b675a731910b3b2183091302ad31b3482b
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:34 2021 +0200

    cpu: Move CPUClass::get_crash_info to SysemuCPUOps
    
    cpu_get_crash_info() is called on GUEST_PANICKED events,
    which only occur in system emulation.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-18-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",83ec01b675
0,"commit da383e0263f7d711eddd4f050ca95fd5ab8d2a87
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:33 2021 +0200

    cpu: Move CPUClass::virtio_is_big_endian to SysemuCPUOps
    
    VirtIO devices are only meaningful with system emulation.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-17-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",da383e0263
0,"commit feece4d07021576a6037adfd597598851cf32bf0
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:32 2021 +0200

    cpu: Move CPUClass::vmsd to SysemuCPUOps
    
    Migration is specific to system emulation.
    
    - Move the CPUClass::vmsd field to SysemuCPUOps,
    - restrict VMSTATE_CPU() macro to sysemu,
    - vmstate_dummy is now unused, remove it.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-16-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",feece4d070
0,"commit 8b80bd28a5cf8d8af7d38abcf1c7d81a1b226ec3
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:31 2021 +0200

    cpu: Introduce SysemuCPUOps structure
    
    Introduce a structure to hold handler specific to sysemu.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-15-f4bug@amsat.org>
    [rth: Squash ""restrict hw/core/sysemu-cpu-ops.h"" patch]
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",8b80bd28a5
0,"commit c2cf139d9c2f8f8b86686fe0e94a9daba27195a6
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:30 2021 +0200

    cpu: Move AVR target vmsd field from CPUClass to DeviceClass
    
    See rationale in previous commit. Targets should use the vmsd field
    of DeviceClass, not CPUClass. As migration is not important on the
    AVR target, break the migration compatibility and set the DeviceClass
    vmsd field. To feel safer, increment the vmstate version.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-Id: <20210517105140.1062037-14-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c2cf139d9c
0,"commit 744c72a837a0428f2d5373793e42aba963bf47c6
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:29 2021 +0200

    cpu: Rename CPUClass vmsd -> legacy_vmsd
    
    Quoting Peter Maydell [*]:
    
      There are two ways to handle migration for
      a CPU object:
    
      (1) like any other device, so it has a dc->vmsd that covers
      migration for the whole object. As usual for objects that are a
      subclass of a parent that has state, the first entry in the
      VMStateDescription field list is VMSTATE_CPU(), which migrates
      the cpu_common fields, followed by whatever the CPU's own migration
      fields are.
    
      (2) a backwards-compatible mechanism for CPUs that were
      originally migrated using manual ""write fields to the migration
      stream structures"". The on-the-wire migration format
      for those is based on the 'env' pointer (which isn't a QOM object),
      and the cpu_common part of the migration data is elsewhere.
    
      cpu_exec_realizefn() handles both possibilities:
    
      * for type 1, dc->vmsd is set and cc->vmsd is not,
        so cpu_exec_realizefn() does nothing, and the standard
        ""register dc->vmsd for a device"" code does everything needed
    
      * for type 2, dc->vmsd is NULL and so we register the
        vmstate_cpu_common directly to handle the cpu-common fields,
        and the cc->vmsd to handle the per-CPU stuff
    
      You can't change a CPU from one type to the other without breaking
      migration compatibility, which is why some guest architectures
      are stuck on the cc->vmsd form. New targets should use dc->vmsd.
    
    To avoid new targets to start using type (2), rename cc->vmsd as
    cc->legacy_vmsd. The correct field to implement is dc->vmsd (the
    DeviceClass one).
    
    See also commit b170fce3dd0 (""cpu: Register VMStateDescription
    through CPUState"") for historic background.
    
    [*] https://www.mail-archive.com/qemu-devel@nongnu.org/msg800849.html
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Cc: Peter Maydell <peter.maydell@linaro.org>
    Message-Id: <20210517105140.1062037-13-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",744c72a837
0,"commit 4336073b9b13943e050edfe9aebb99974c3b6ee1
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:28 2021 +0200

    cpu: Assert DeviceClass::vmsd is NULL on user emulation
    
    Migration is specific to system emulation.
    
    Restrict current DeviceClass::vmsd to sysemu using #ifdef'ry,
    and assert in cpu_exec_realizefn() that dc->vmsd not set under
    user emulation.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-12-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",4336073b9b
0,"commit 65c57115dfeef8d344052a0e2b9d156b652be478
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:27 2021 +0200

    cpu: Directly use get_memory_mapping() fallback handlers in place
    
    No code uses CPUClass::get_memory_mapping() outside of hw/core/cpu.c:
    
      $ git grep -F -- '->get_memory_mapping'
      hw/core/cpu.c:87:    cc->get_memory_mapping(cpu, list, errp);
      hw/core/cpu.c:439:    k->get_memory_mapping = cpu_common_get_memory_mapping;
      target/i386/cpu.c:7422:    cc->get_memory_mapping = x86_cpu_get_memory_mapping;
    
    Check the handler presence in place and remove the common fallback code.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-11-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",65c57115df
0,"commit 77ba5d50bad66d56dde93e6f1c0b7a76b58ca290
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:26 2021 +0200

    cpu: Directly use get_paging_enabled() fallback handlers in place
    
    No code uses CPUClass::get_paging_enabled() outside of hw/core/cpu.c:
    
      $ git grep -F -- '->get_paging_enabled'
      hw/core/cpu.c:74:    return cc->get_paging_enabled(cpu);
      hw/core/cpu.c:438:    k->get_paging_enabled = cpu_common_get_paging_enabled;
      target/i386/cpu.c:7418:    cc->get_paging_enabled = x86_cpu_get_paging_enabled;
    
    Check the handler presence in place and remove the common fallback code.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-10-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",77ba5d50ba
0,"commit 5ef2d5a48c98bcaca86b33755e175104802b44c3
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:25 2021 +0200

    cpu: Directly use cpu_write_elf*() fallback handlers in place
    
    No code directly accesses CPUClass::write_elf*() handlers out
    of hw/core/cpu.c (the rest are assignation in target/ code):
    
      $ git grep -F -- '->write_elf'
      hw/core/cpu.c:157:    return (*cc->write_elf32_qemunote)(f, cpu, opaque);
      hw/core/cpu.c:171:    return (*cc->write_elf32_note)(f, cpu, cpuid, opaque);
      hw/core/cpu.c:186:    return (*cc->write_elf64_qemunote)(f, cpu, opaque);
      hw/core/cpu.c:200:    return (*cc->write_elf64_note)(f, cpu, cpuid, opaque);
      hw/core/cpu.c:440:    k->write_elf32_qemunote = cpu_common_write_elf32_qemunote;
      hw/core/cpu.c:441:    k->write_elf32_note = cpu_common_write_elf32_note;
      hw/core/cpu.c:442:    k->write_elf64_qemunote = cpu_common_write_elf64_qemunote;
      hw/core/cpu.c:443:    k->write_elf64_note = cpu_common_write_elf64_note;
      target/arm/cpu.c:2304:    cc->write_elf64_note = arm_cpu_write_elf64_note;
      target/arm/cpu.c:2305:    cc->write_elf32_note = arm_cpu_write_elf32_note;
      target/i386/cpu.c:7425:    cc->write_elf64_note = x86_cpu_write_elf64_note;
      target/i386/cpu.c:7426:    cc->write_elf64_qemunote = x86_cpu_write_elf64_qemunote;
      target/i386/cpu.c:7427:    cc->write_elf32_note = x86_cpu_write_elf32_note;
      target/i386/cpu.c:7428:    cc->write_elf32_qemunote = x86_cpu_write_elf32_qemunote;
      target/ppc/translate_init.c.inc:10891:    cc->write_elf64_note = ppc64_cpu_write_elf64_note;
      target/ppc/translate_init.c.inc:10892:    cc->write_elf32_note = ppc32_cpu_write_elf32_note;
      target/s390x/cpu.c:522:    cc->write_elf64_note = s390_cpu_write_elf64_note;
    
    Check the handler presence in place and remove the common fallback code.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-9-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",5ef2d5a48c
0,"commit cdba7e2f497d3922a6934b7504925483b32c0a74
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:24 2021 +0200

    cpu: Introduce cpu_virtio_is_big_endian()
    
    Introduce the cpu_virtio_is_big_endian() generic helper to avoid
    calling CPUClass internal virtio_is_big_endian() one.
    
    Similarly to commit bf7663c4bd8 (""cpu: introduce
    CPUClass::virtio_is_big_endian()""), we keep 'virtio' in the method
    name to hint this handler shouldn't be called anywhere but from the
    virtio code.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-8-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",cdba7e2f49
0,"commit a41d3aae52c6b1657f665fcd26d122b0646cd330
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:23 2021 +0200

    cpu: Un-inline cpu_get_phys_page_debug and cpu_asidx_from_attrs
    
    To be able to later extract the cpu_get_phys_page_debug() and
    cpu_asidx_from_attrs() handlers from CPUClass, un-inline them
    from ""hw/core/cpu.h"".
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-7-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",a41d3aae52
0,"commit df4fd7d5c8a334fc4305b35e92ce44479a7be656
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:22 2021 +0200

    cpu: Split as cpu-common / cpu-sysemu
    
    The current cpu.c contains sysemu-specific methods.
    To avoid building them in user-mode builds, split the
    current cpu.c as cpu-common.c / cpu-sysemu.c.
    
    Start by moving cpu_get_crash_info().
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-6-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",df4fd7d5c8
0,"commit 046943acf4f1d2aeec6f42f1cd4f37096d0b2c98
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 17 12:51:21 2021 +0200

    cpu: Remove duplicated 'sysemu/hw_accel.h' header
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210517105140.1062037-5-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",046943acf4
0,"commit 26b1248f66c20f9d7fa384acecfdac03a0c8393d
Author: Yasuo Kuwahara <kwhr00@gmail.com>
Date:   Tue May 25 18:46:19 2021 +0900

    tcg/aarch64: Fix tcg_out_rotl
    
    The last argument of tcg_out_extr() must be in the range 0-31 if ext==0.
    Before the fix, when m==0 it becomes 32 and it crashes with an Illegal
    instruction on Apple Silicon.  After the fix, it will be 0.  If m is in
    the range 1-31, it is the same as before.
    
    Signed-off-by: Yasuo Kuwahara <kwhr00@gmail.com>
    Message-Id: <CAHfJ0vSXnmnTLmT0kR=a8ACRdw_UsLYOhStzUzgVEHoH8U-7sA@mail.gmail.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",26b1248f66
0,"commit 57dcb643d79731b08a863444d6591d22552bc2e5
Author: Pavel Dovgalyuk <pavel.dovgalyuk@ispras.ru>
Date:   Tue May 11 12:11:43 2021 +0300

    replay: fix watchpoint processing for reverse debugging
    
    This patch enables reverse debugging with watchpoints.
    Reverse continue scans the execution to find the breakpoints
    and watchpoints that should fire. It uses helper function
    replay_breakpoint() for that. But this function needs to access
    icount, which can't be correct in the middle of TB.
    Therefore, in case of watchpoint, we have to retranslate the block
    to allow this access.
    
    Signed-off-by: Pavel Dovgalyuk <Pavel.Dovgalyuk@ispras.ru>
    Message-Id: <162072430303.827403.7379783546934958566.stgit@pasha-ThinkPad-X280>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",57dcb643d7
0,"commit e5ceadff47ddec1513a56f96d9df246f62c90875
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 24 19:04:53 2021 +0200

    accel/tcg: Keep TranslationBlock headers local to TCG
    
    Only the TCG accelerator uses the TranslationBlock API.
    Move the tb-context.h / tb-hash.h / tb-lookup.h from the
    global namespace to the TCG one (in accel/tcg).
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-Id: <20210524170453.3791436-3-f4bug@amsat.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",e5ceadff47
0,"commit 824f4bac9ffa2757293290c7edd065dc84a6521e
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Mon May 24 19:04:52 2021 +0200

    accel/tcg: Reduce 'exec/tb-context.h' inclusion
    
    Only 2 headers require ""exec/tb-context.h"". Instead of having
    all files including ""exec/exec-all.h"" also including it, directly
    include it where it is required:
    - accel/tcg/cpu-exec.c
    - accel/tcg/translate-all.c
    
    For plugins/plugin.h, we were implicitly relying on
      exec/exec-all.h -> exec/tb-context.h -> qemu/qht.h
    which is now included directly.
    
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Message-Id: <20210524170453.3791436-2-f4bug@amsat.org>
    [rth: Fix plugins/plugin.h compilation]
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",824f4bac9f
0,"commit 8385235ba99c53d1187658f2fc289b953a8090b1
Merge: 2ab2dad01f 7cf333a372
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Wed May 26 21:05:35 2021 +0100

    Merge remote-tracking branch 'remotes/bonzini-gitlab/tags/for-upstream' into staging
    
    * submodule cleanups (Philippe, myself)
    * tiny step towards a usable preconfig mode (myself)
    * Kconfig and LOCK_GUARD cleanups (philippe)
    * new x86 CPUID feature (Yang Zhong)
    * ""-object qtest"" support (myself)
    * Dirty ring support for KVM (Peter)
    * Fixes for 6.0 command line parsing breakage (myself)
    * Fix for macOS 11.3 SDK (Katsuhiro)
    
    # gpg: Signature made Wed 26 May 2021 13:50:12 BST
    # gpg:                using RSA key F13338574B662389866C7682BFFBD25F78C7AE83
    # gpg:                issuer ""pbonzini@redhat.com""
    # gpg: Good signature from ""Paolo Bonzini <bonzini@gnu.org>"" [full]
    # gpg:                 aka ""Paolo Bonzini <pbonzini@redhat.com>"" [full]
    # Primary key fingerprint: 46F5 9FBD 57D6 12E7 BFD4  E2F7 7E15 100C CD36 69B1
    #      Subkey fingerprint: F133 3857 4B66 2389 866C  7682 BFFB D25F 78C7 AE83
    
    * remotes/bonzini-gitlab/tags/for-upstream: (28 commits)
      gitlab-ci: use --meson=git for CFI jobs
      hw/scsi: Fix sector translation bug in scsi_unmap_complete_noio
      configure: Avoid error messages about missing *-config-*.h files
      doc: Add notes about -mon option mode=control argument.
      qemu-config: load modules when instantiating option groups
      vl: allow not specifying size in -m when using -M memory-backend
      replication: move include out of root directory
      remove qemu-options* from root directory
      meson: Set implicit_include_directories to false
      tests/qtest/fuzz: Fix build failure
      KVM: Dirty ring support
      KVM: Disable manual dirty log when dirty ring enabled
      KVM: Add dirty-ring-size property
      KVM: Cache kvm slot dirty bitmap size
      KVM: Simplify dirty log sync in kvm_set_phys_mem
      KVM: Provide helper to sync dirty bitmap from slot to ramblock
      KVM: Provide helper to get kvm dirty log
      KVM: Create the KVMSlot dirty bitmap on flag changes
      KVM: Use a big lock to replace per-kml slots_lock
      memory: Introduce log_sync_global() to memory listener
      ...
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",8385235ba9
0,"commit 5e50c6c72bf8575f124ec9397411f4a2ff0d0206
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Wed May 19 15:29:17 2021 +0100

    target/m68k: implement m68k ""any instruction"" trace mode
    
    The m68k trace mode is controlled by the top 2 bits in the SR register. Implement
    the m68k ""any instruction"" trace mode where bit T1=1 and bit T0=0 in which the CPU
    generates an EXCP_TRACE exception (vector 9 or offset 0x24) after executing each
    instruction.
    
    This functionality is used by the NetBSD kernel debugger to allow single-stepping
    on m68k architectures.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210519142917.16693-5-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",5e50c6c72b
0,"commit 456a0e3b3c723d1d599d73920e98474ca9073386
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Wed May 19 15:29:16 2021 +0100

    target/m68k: introduce gen_singlestep_exception() function
    
    Introduce a new gen_singlestep_exception() function to be called when generating
    the EXCP_DEBUG exception in single-step mode rather than calling
    gen_raise_exception(EXCP_DEBUG) directly. This allows for the single-step
    exception behaviour for all callers to be managed in a single place.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210519142917.16693-4-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",456a0e3b3c
0,"commit 4f2b21efb398e93293e0fcd97b203563ff53e228
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Wed May 19 15:29:15 2021 +0100

    target/m68k: call gen_raise_exception() directly if single-stepping in gen_jmp_tb()
    
    In order to consolidate the single-step exception handling into a single
    helper, change gen_jmp_tb() so that it calls gen_raise_exception() directly
    instead of gen_exception(). This ensures that all single-step exceptions are
    now handled directly by gen_raise_exception().
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210519142917.16693-3-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",4f2b21efb3
0,"commit f334bb2562dafbdc4ce673e5811bc9880758b147
Author: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
Date:   Wed May 19 15:29:14 2021 +0100

    target/m68k: introduce is_singlestepping() function
    
    The m68k translator currently checks the DisasContextBase singlestep_enabled
    boolean directly to determine whether to single-step execution. Soon
    single-stepping may also be triggered by setting the appropriate bits in the
    SR register so centralise the check into a single is_singlestepping()
    function.
    
    Signed-off-by: Mark Cave-Ayland <mark.cave-ayland@ilande.co.uk>
    Reviewed-by: Richard Henderson <richard.henderson@linaro.org>
    Message-Id: <20210519142917.16693-2-mark.cave-ayland@ilande.co.uk>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>",f334bb2562
0,"commit e49e49dd73b8b17f5f341b3e11c8b6878c43d3e1
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Tue May 25 16:05:52 2021 +0800

    migration/rdma: source: poll cm_event from return path
    
    source side always blocks if postcopy is only enabled at source side.
    users are not able to cancel this migration in this case.
    
    Let source side have chance to cancel this migration
    
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Message-Id: <20210525080552.28259-4-lizhijian@cn.fujitsu.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
      Typo fix",e49e49dd73
0,"commit 44bcfd45e9806c78d9d526d69b0590227d215a78
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Tue May 25 16:05:51 2021 +0800

    migration/rdma: destination: create the return patch after the first accept
    
    destination side:
    $ build/qemu-system-x86_64 -enable-kvm -netdev tap,id=hn0,script=/etc/qemu-ifup,downscript=/etc/qemu-ifdown -device e1000,netdev=hn0,mac=50:52:54:00:11:22 -boot c -drive if=none,file=./Fedora-rdma-server-migration.qcow2,id=drive-virtio-disk0 -device virtio-blk-pci,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0 -m 2048 -smp 2 -device piix3-usb-uhci -device usb-tablet -monitor stdio -vga qxl -spice streaming-video=filter,port=5902,disable-ticketing -incoming rdma:192.168.1.10:8888
    (qemu) migrate_set_capability postcopy-ram on
    (qemu)
    dest_init RDMA Device opened: kernel name rocep1s0f0 uverbs device name uverbs0, infiniband_verbs class device path /sys/class/infiniband_verbs/uverbs0, infiniband class device path /sys/class/infiniband/rocep1s0f0, transport: (2) Ethernet
    Segmentation fault (core dumped)
    
     (gdb) bt
     #0  qemu_rdma_accept (rdma=0x0) at ../migration/rdma.c:3272
     #1  rdma_accept_incoming_migration (opaque=0x0) at     ../migration/rdma.c:3986
     #2  0x0000563c9e51f02a in aio_dispatch_handler
         (ctx=ctx@entry=0x563ca0606010, node=0x563ca12b2150) at ../util/aio-posix.c:329
     #3  0x0000563c9e51f752 in aio_dispatch_handlers (ctx=0x563ca0606010) at      ../util/aio-posix.c:372
     #4  aio_dispatch (ctx=0x563ca0606010) at ../util/aio-posix.c:382
     #5  0x0000563c9e4f4d9e in aio_ctx_dispatch (source=<optimized out>,      callback=<optimized out>, user_data=<optimized out>)    at ../util/async.c:306
     #6  0x00007fe96ef3fa9f in g_main_context_dispatch () at      /lib64/libglib-2.0.so.0
     #7  0x0000563c9e4ffeb8 in glib_pollfds_poll () at     ../util/main-loop.c:231
     #8  os_host_main_loop_wait (timeout=12188789) at     ../util/main-loop.c:254
     #9  main_loop_wait (nonblocking=nonblocking@entry=0) at     ../util/main-loop.c:530
     #10 0x0000563c9e3c7211 in qemu_main_loop () at     ../softmmu/runstate.c:725
     #11 0x0000563c9dfd46fe in main (argc=<optimized out>, argv=<optimized     out>, envp=<optimized out>) at ../softmmu/main.c:50
    
    The rdma return path will not be created when qemu incoming is starting
    since migrate_copy() is false at that moment, then a  NULL return path
    rdma was referenced if the user enabled postcopy later.
    
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Message-Id: <20210525080552.28259-3-lizhijian@cn.fujitsu.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",44bcfd45e9
0,"commit f53b450ada3bf7fa1c88fbf4f13b864af7795bd3
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Tue May 25 16:05:50 2021 +0800

    migration/rdma: Fix rdma_addrinfo res leaks
    
    rdma_freeaddrinfo() is the reverse operation of rdma_getaddrinfo()
    
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Message-Id: <20210525080552.28259-2-lizhijian@cn.fujitsu.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",f53b450ada
0,"commit 4e812d2338acb354b969b59f792f413f567c0ace
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Thu May 20 16:11:45 2021 +0800

    migration/rdma: cleanup rdma in rdma_start_incoming_migration error path
    
    the error path after calling qemu_rdma_dest_init() should do rdma cleanup
    
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    Message-Id: <20210520081148.17001-1-lizhijian@cn.fujitsu.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",4e812d2338
0,"commit efb208dc9c3f1e881aecff21fb1c7a7b6b869480
Author: Li Zhijian <lizhijian@cn.fujitsu.com>
Date:   Wed May 19 14:47:40 2021 +0800

    migration/rdma: Fix cm_event used before being initialized
    
    A segmentation fault was triggered when i try to abort a postcopy + rdma
    migration.
    
    since rdma_ack_cm_event releases a uninitialized cm_event in these case.
    
    like below:
    2496     ret = rdma_get_cm_event(rdma->channel, &cm_event);
    2497     if (ret) {
    2498         perror(""rdma_get_cm_event after rdma_connect"");
    2499         ERROR(errp, ""connecting to destination!"");
    2500         rdma_ack_cm_event(cm_event); <<<< cause segmentation fault
    2501         goto err_rdma_source_connect;
    2502     }
    
    Refer to the rdma_get_cm_event() code, cm_event will be
    updated/changed only if rdma_get_cm_event() returns 0. So it's okey to
    remove the ack in error patch.
    
    Signed-off-by: Li Zhijian <lizhijian@cn.fujitsu.com>
    
    Message-Id: <20210519064740.10828-1-lizhijian@cn.fujitsu.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",efb208dc9c
0,"commit bf99f30bc3420f2f4b82f7f827fb93197d33c017
Author: Mahmoud Mandour <ma.mandourr@gmail.com>
Date:   Sun Mar 14 05:23:23 2021 +0200

    tools/virtiofsd/fuse_opt.c: Replaced a malloc with GLib's g_try_malloc
    
    Replaced a malloc() call and its respective free() with
    GLib's g_try_malloc() and g_free() calls.
    
    Signed-off-by: Mahmoud Mandour <ma.mandourr@gmail.com>
    Message-Id: <20210314032324.45142-8-ma.mandourr@gmail.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",bf99f30bc3
0,"commit d14d4f4f1815dcf63fa6b90e9a34854977e42f84
Author: Mahmoud Mandour <ma.mandourr@gmail.com>
Date:   Sun Mar 14 05:23:22 2021 +0200

    tools/virtiofsd/buffer.c: replaced a calloc call with GLib's g_try_new0
    
    Replaced a call to calloc() and its respective free() call
    with GLib's g_try_new0() and g_free() calls.
    
    Signed-off-by: Mahmoud Mandour <ma.mandourr@gmail.com>
    Message-Id: <20210314032324.45142-7-ma.mandourr@gmail.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",d14d4f4f18
0,"commit b5fd59cf907df7fa2272426010c4d264682347f2
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Tue May 18 17:35:38 2021 -0400

    virtiofsd: Set req->reply_sent right after sending reply
    
    There is no reason to set it in label ""err"". We should be able to set
    it right after sending reply. It is easier to read.
    
    Also got rid of label ""err"" because now only thing it was doing was
    return a code. We can return from the error location itself and no
    need to first jump to label ""err"".
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Message-Id: <20210518213538.693422-8-vgoyal@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",b5fd59cf90
0,"commit 1a5fff8e63a5ab55ccdec4f134b2f96453bf789f
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Tue May 18 17:35:37 2021 -0400

    virtiofsd: Check EOF before short read
    
    In virtio_send_data_iov() we are checking first for short read and then
    EOF condition. Change the order. Basically check for error and EOF first
    and last remaining piece is short ready which will lead to retry
    automatically at the end of while loop.
    
    Just that it is little simpler to read to the code. There is no need
    to call ""continue"" and also one less call of ""len-=ret"".
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Message-Id: <20210518213538.693422-7-vgoyal@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",1a5fff8e63
0,"commit bf7a3ee04430dfe426eacf6ee587e2a069ba67ce
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Tue May 18 17:35:36 2021 -0400

    virtiofsd: Simplify skip byte logic
    
    We need to skip bytes in two cases.
    
    a. Before we start reading into in_sg, we need to skip iov_len bytes
       in the beginning which typically will have fuse_out_header.
    
    b. If preadv() does a short read, then we need to retry preadv() with
       remainig bytes and skip the bytes preadv() read in short read.
    
    For case a, there is no reason that skipping logic be inside the while
    loop. Move it outside. And only retain logic ""b"" inside while loop.
    
    Also get rid of variable ""skip_size"". Looks like we can do without it.
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Message-Id: <20210518213538.693422-6-vgoyal@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",bf7a3ee044
0,"commit 0106f6f234d6361bb99cabfa48a953c929a3ca90
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Tue May 18 17:35:35 2021 -0400

    virtiofsd: get rid of in_sg_left variable
    
    in_sg_left seems to be being used primarly for debugging purpose. It is
    keeping track of how many bytes are left in the scatter list we are
    reading into.
    
    We already have another variable ""len"" which keeps track how many bytes
    are left to be read. And in_sg_left is greater than or equal to len. We
    have already ensured that in the beginning of function.
    
        if (in_len < tosend_len) {
            fuse_log(FUSE_LOG_ERR, ""%s: elem %d too small for data len %zd\n"",
                     __func__, elem->index, tosend_len);
            ret = E2BIG;
            goto err;
        }
    
    So in_sg_left seems like a redundant variable. It probably was useful for
    debugging when code was being developed. Get rid of it. It helps simplify
    this function.
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Message-Id: <20210518213538.693422-5-vgoyal@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",0106f6f234
0,"commit 97dbfc5ae631724a2ae7f54de28c2f8e383b5980
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Tue May 18 17:35:34 2021 -0400

    virtiofsd: Use iov_discard_front() to skip bytes
    
    There are places where we need to skip few bytes from front of the iovec
    array. We have our own custom code for that. Looks like iov_discard_front()
    can do same thing. So use that helper instead.
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Message-Id: <20210518213538.693422-4-vgoyal@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",97dbfc5ae6
0,"commit b31ff389315f2745cecc0f42cca7f4383b1a2a0d
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Tue May 18 17:35:33 2021 -0400

    virtiofsd: Get rid of unreachable code in read
    
    pvreadv() can return following.
    
    - error
    - 0 in case of EOF
    - short read
    
    We seem to handle all the cases already. We are retrying read in case
    of short read. So another check for short read seems like dead code.
    Get rid of it.
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Message-Id: <20210518213538.693422-3-vgoyal@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",b31ff38931
0,"commit 04c9f7e04ae102edf384613df98268d59ff8fb9b
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Tue May 18 17:35:32 2021 -0400

    virtiofsd: Check for EINTR in preadv() and retry
    
    We don't seem to check for EINTR and retry. There are other places
    in code where we check for EINTR. So lets add a check.
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Reviewed-by: Connor Kuehl <ckuehl@redhat.com>
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Message-Id: <20210518213538.693422-2-vgoyal@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",04c9f7e04a
0,"commit c53cd04e70641fdf9410aac40c617d074047b3e1
Author: Kevin Wolf <kwolf@redhat.com>
Date:   Tue May 11 18:31:51 2021 +0200

    hmp: Fix loadvm to resume the VM on success instead of failure
    
    Commit f61fe11aa6f broke hmp_loadvm() by adding an incorrect negation
    when converting from 0/-errno return values to a bool value. The result
    is that loadvm resumes the VM now if it failed and keeps it stopped if
    it failed. Fix it to restore the old behaviour and do it the other way
    around.
    
    Fixes: f61fe11aa6f7f8f0ffe4ddaa56a8108f3ab57854
    Cc: qemu-stable@nongnu.org
    Reported-by: Yanhui Ma <yama@redhat.com>
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Message-Id: <20210511163151.45167-1-kwolf@redhat.com>
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",c53cd04e70
0,"commit 4121f4b38e976641ee66ad52567f6f178a8f2048
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue May 18 20:36:36 2021 +0200

    exec/memory: Use correct type size
    
    Use uint8_t for (unsigned) byte.
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210518183655.1711377-7-philmd@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",4121f4b38e
0,"commit 4045f49cd4bba9c7e1d531cb805177deb5079147
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue May 18 20:36:35 2021 +0200

    exec/memory_ldst_cached: Use correct type size
    
    Use uint16_t for (unsigned) 16-bit word.
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210518183655.1711377-6-philmd@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",4045f49cd4
0,"commit c6fe45b3a66d05d74f919da4226d4737fc3f75c9
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue May 18 20:36:34 2021 +0200

    exec/memory_ldst_phys: Use correct type sizes
    
    Use uint8_t for (unsigned) byte, and uint16_t for (unsigned)
    16-bit word.
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210518183655.1711377-5-philmd@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",c6fe45b3a6
0,"commit f933b02b59f07c17c312185a9ceaefbf9dfbb36e
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue May 18 20:36:33 2021 +0200

    exec/memory_ldst: Use correct type sizes
    
    Use uint8_t for (unsigned) byte, and uint16_t for (unsigned)
    16-bit word.
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210518183655.1711377-4-philmd@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",f933b02b59
0,"commit e1d2dbee5704e4db5dda6cda3da1bbbb4f950f90
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue May 18 20:36:32 2021 +0200

    exec/memory_ldst_phys: Sort declarations
    
    To ease the file review, sort the declarations by the size of
    the access (8, 16, 32). Simple code movement, no logical change.
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210518183655.1711377-3-philmd@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",e1d2dbee57
0,"commit 0a73d7ac9a200cdf17562d0a893c1578f3ffa4a4
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue May 18 20:36:31 2021 +0200

    exec/memory_ldst_cached: Sort declarations
    
    To ease the file review, sort the declarations by the size of
    the access (8, 16, 32). Simple code movement, no logical change.
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210518183655.1711377-2-philmd@redhat.com>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>",0a73d7ac9a
0,"commit 2ab2dad01f6dc3667c0d53d2b1ba46b511031207
Merge: 0319ad22bd 96376ab154
Author: Peter Maydell <peter.maydell@linaro.org>
Date:   Wed May 26 15:27:20 2021 +0100

    Merge remote-tracking branch 'remotes/kraxel/tags/input-20210526-pull-request' into staging
    
    input: a bunch of ps2 fixes.
    
    # gpg: Signature made Wed 26 May 2021 15:06:12 BST
    # gpg:                using RSA key A0328CFFB93A17A79901FE7D4CB6D8EED3E87138
    # gpg: Good signature from ""Gerd Hoffmann (work) <kraxel@redhat.com>"" [full]
    # gpg:                 aka ""Gerd Hoffmann <gerd@kraxel.org>"" [full]
    # gpg:                 aka ""Gerd Hoffmann (private) <kraxel@gmail.com>"" [full]
    # Primary key fingerprint: A032 8CFF B93A 17A7 9901  FE7D 4CB6 D8EE D3E8 7138
    
    * remotes/kraxel/tags/input-20210526-pull-request:
      hw/input/ps2: Use ps2_raise_irq() instead of open coding it
      pckbd: clear outport_present in outer pre_load()
      pckbd: remove duplicated keyboard and mouse defines
      pckbd: correctly disable PS/2 communication
      pckbd: add function kbd_pending()
      pckbd: add controller response queue
      pckbd: add state variable for interrupt source
      pckbd: PS/2 keyboard throttle
      pckbd: don't update OBF flags if KBD_STAT_OBF is set
      pckbd: split out interrupt line changing code
      ps2: don't deassert irq twice if queue is empty
      ps2: don't raise an interrupt if queue is full
      ps2: fix mouse stream corruption
      hw/input: expand trace info reported for ps2 device
    
    Signed-off-by: Peter Maydell <peter.maydell@linaro.org>",2ab2dad01f
0,"commit 7cf333a37260c4aafa465453adc8e073e408967e
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Mar 25 13:06:13 2021 +0100

    gitlab-ci: use --meson=git for CFI jobs
    
    Ensure that the meson submodule is checked out by the check targets,
    as they will need it to run ""meson test"".
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",7cf333a372
0,"commit b802d14dc6f3fba988baa9804af8f4cf837c6886
Author: Kit Westneat <kit.westneat@gmail.com>
Date:   Fri May 21 14:28:29 2021 +0000

    hw/scsi: Fix sector translation bug in scsi_unmap_complete_noio
    
    check_lba_range expects sectors to be expressed in original qdev blocksize, but
    scsi_unmap_complete_noio was translating them to 512 block sizes, which was
    causing sense errors in the larger LBAs in devices using a 4k block size.
    
    Resolves: https://gitlab.com/qemu-project/qemu/-/issues/345
    Signed-off-by: Kit Westneat <kit.westneat@gmail.com>
    Message-Id: <20210521142829.326217-1-kit.westneat@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",b802d14dc6
0,"commit 54b0306e6967ae38e248b905ddaa4a3cdbc15322
Author: Thomas Huth <thuth@redhat.com>
Date:   Wed May 19 13:38:40 2021 +0200

    configure: Avoid error messages about missing *-config-*.h files
    
    When compiling with --disable-system there is a harmless yet still
    annoying error message at the end of the ""configure"" step:
    
     sed: can't read *-config-devices.h: No such file or directory
    
    When only building the tools or docs, without any emulator at all,
    there is even an additional message about missing *-config-target.h
    files.
    
    Fix it by checking whether any of these files are available before
    using them.
    
    Fixes: e0447a834d (""configure: Poison all current target-specific #defines"")
    Reported-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Thomas Huth <thuth@redhat.com>
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210519113840.298174-1-thuth@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",54b0306e69
0,"commit 16b3f3bbab7db8f87bdb5ddb226bf19c4c55abdd
Author: Ali Shirvani <alishir@routerhosting.com>
Date:   Wed May 19 11:41:45 2021 +0430

    doc: Add notes about -mon option mode=control argument.
    
    The mode=control argument configures a QMP monitor.
    
    Signed-off-by: Ali Shirvani <alishir@routerhosting.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Message-Id: <0799f0de89ad2482672b5d61d0de61e6eba782da.1621407918.git.alishir@routerhosting.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",16b3f3bbab
0,"commit 632a8873500d27022c584256afc11e57e2418b94
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue May 18 09:08:17 2021 -0400

    qemu-config: load modules when instantiating option groups
    
    Right now the SPICE module is special cased to be loaded when processing
    of the -spice command line option.  However, the spice option group
    can also be brought in via -readconfig, in which case the module is
    not loaded.
    
    Add a generic hook to load modules that provide a QemuOpts group,
    and use it for the ""spice"" and ""iscsi"" groups.
    
    Fixes: #194
    Fixes: https://bugs.launchpad.net/qemu/+bug/1910696
    Cc: qemu-stable@nongnu.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",632a887350
0,"commit d349f92f78d26db2805ca39a7745cc70affea021
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 17 10:13:01 2021 -0400

    vl: allow not specifying size in -m when using -M memory-backend
    
    Starting in QEMU 6.0's commit f5c9fcb82d (""vl: separate
    qemu_create_machine"", 2020-12-10), a function have_custom_ram_size()
    replaced the return value of set_memory_options().
    
    The purpose of the return value was to record the presence of
    ""-m size"", and if it was not there, change the default RAM
    size to the size of the memory backend passed with ""-M
    memory-backend"".
    
    With that commit, however, have_custom_ram_size() is now queried only
    after set_memory_options has stored the fixed-up RAM size in QemuOpts for
    ""future use"".  This was actually the only future use of the fixed-up RAM
    size, so remove that code and fix the bug.
    
    Cc: qemu-stable@nongnu.org
    Fixes: f5c9fcb82d (""vl: separate qemu_create_machine"", 2020-12-10)
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",d349f92f78
0,"commit b02629550d7bdea405364124a356f88791c56260
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 17 07:36:56 2021 -0400

    replication: move include out of root directory
    
    The replication.h file is included from migration/colo.c and tests/unit/test-replication.c,
    so it should be in include/.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",b02629550d
0,"commit fd5fc4b12df60d8145d7557a4139426a1b78e554
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 17 07:34:21 2021 -0400

    remove qemu-options* from root directory
    
    These headers are also included from softmmu/vl.c, so they should be
    in include/.  Remove qemu-options-wrapper.h, since elsewhere
    we include ""template"" headers directly and #define the parameters in
    the including file; move qemu-options.h to include/.
    
    Reviewed-by: Markus Armbruster <armbru@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",fd5fc4b12d
0,"commit 75eebe0b1f15464d19a39c4186bfabf328ab601a
Author: Katsuhiro Ueno <uenobk@gmail.com>
Date:   Thu Apr 29 11:43:07 2021 +0900

    meson: Set implicit_include_directories to false
    
    Without this, libvixl cannot be compiled with macOS 11.3 SDK due to
    include file name conflict (usr/include/c++/v1/version conflicts with
    VERSION).
    
    Signed-off-by: Katsuhiro Ueno <uenobk@gmail.com>
    Message-Id: <CA+pCdY09+OQfXq3YmRNuQE59ACOq7Py2q4hqOwgq4PnepCXhTA@mail.gmail.com>
    Tested-by: Alexander Graf <agraf@csgraf.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",75eebe0b1f
0,"commit aaad026480e91266be19dad6c5aa3b83579b6b6e
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Thu May 13 18:20:08 2021 +0200

    tests/qtest/fuzz: Fix build failure
    
    On Fedora 32, using clang (version 10.0.1-3.fc32) we get:
    
      tests/qtest/fuzz/fuzz.c:237:5: error: implicit declaration of function 'qemu_init' is invalid in C99 [-Werror,-Wimplicit-function-declaration]
          qemu_init(result.we_wordc, result.we_wordv, NULL);
          ^
    
    qemu_init() is declared in ""sysemu/sysemu.h"", include this
    header to fix.
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210513162008.3922223-1-philmd@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",aaad026480
0,"commit b4420f198dd8eab53cf6062c1871d0e5f5601e86
Author: Peter Xu <peterx@redhat.com>
Date:   Mon May 17 04:23:50 2021 -0400

    KVM: Dirty ring support
    
    KVM dirty ring is a new interface to pass over dirty bits from kernel to the
    userspace.  Instead of using a bitmap for each memory region, the dirty ring
    contains an array of dirtied GPAs to fetch (in the form of offset in slots).
    For each vcpu there will be one dirty ring that binds to it.
    
    kvm_dirty_ring_reap() is the major function to collect dirty rings.  It can be
    called either by a standalone reaper thread that runs in the background,
    collecting dirty pages for the whole VM.  It can also be called directly by any
    thread that has BQL taken.
    
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-11-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",b4420f198d
0,"commit a81a592698c5cf3d84486b00c84b7979dfa0a3da
Author: Peter Xu <peterx@redhat.com>
Date:   Thu May 6 12:05:48 2021 -0400

    KVM: Disable manual dirty log when dirty ring enabled
    
    KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2 is for KVM_CLEAR_DIRTY_LOG, which is only
    useful for KVM_GET_DIRTY_LOG.  Skip enabling it for kvm dirty ring.
    
    More importantly, KVM_DIRTY_LOG_INITIALLY_SET will not wr-protect all the pages
    initially, which is against how kvm dirty ring is used - there's no way for kvm
    dirty ring to re-protect a page before it's notified as being written first
    with a GFN entry in the ring!  So when KVM_DIRTY_LOG_INITIALLY_SET is enabled
    with dirty ring, we'll see silent data loss after migration.
    
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-10-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",a81a592698
0,"commit 2ea5cb0a47c9dbf78235de30a0d5846a4ab6d995
Author: Peter Xu <peterx@redhat.com>
Date:   Thu May 6 12:05:47 2021 -0400

    KVM: Add dirty-ring-size property
    
    Add a parameter for dirty gfn count for dirty rings.  If zero, dirty ring is
    disabled.  Otherwise dirty ring will be enabled with the per-vcpu gfn count as
    specified.  If dirty ring cannot be enabled due to unsupported kernel or
    illegal parameter, it'll fallback to dirty logging.
    
    By default, dirty ring is not enabled (dirty-gfn-count default to 0).
    
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-9-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",2ea5cb0a47
0,"commit 563d32ba9bb92df6170a53826a174e59ae73412f
Author: Peter Xu <peterx@redhat.com>
Date:   Thu May 6 12:05:46 2021 -0400

    KVM: Cache kvm slot dirty bitmap size
    
    Cache it too because we'll reference it more frequently in the future.
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-8-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",563d32ba9b
0,"commit 29b7e8be76a142f6715e20bc13dc61ded1b8d2a7
Author: Peter Xu <peterx@redhat.com>
Date:   Thu May 6 12:05:45 2021 -0400

    KVM: Simplify dirty log sync in kvm_set_phys_mem
    
    kvm_physical_sync_dirty_bitmap() on the whole section is inaccurate, because
    the section can be a superset of the memslot that we're working on.  The result
    is that if the section covers multiple kvm memslots, we could be doing the
    synchronization for multiple times for each kvmslot in the section.
    
    With the two helpers that we just introduced, it's very easy to do it right now
    by calling the helpers.
    
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-7-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",29b7e8be76
0,"commit 2c20b27eed517f9624b008222bb486f1df0ae079
Author: Peter Xu <peterx@redhat.com>
Date:   Thu May 6 12:05:44 2021 -0400

    KVM: Provide helper to sync dirty bitmap from slot to ramblock
    
    kvm_physical_sync_dirty_bitmap() calculates the ramblock offset in an
    awkward way from the MemoryRegionSection that passed in from the
    caller.  The truth is for each KVMSlot the ramblock offset never
    change for the lifecycle.  Cache the ramblock offset for each KVMSlot
    into the structure when the KVMSlot is created.
    
    With that, we can further simplify kvm_physical_sync_dirty_bitmap()
    with a helper to sync KVMSlot dirty bitmap to the ramblock dirty
    bitmap of a specific KVMSlot.
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-6-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",2c20b27eed
0,"commit e65e5f50db0a54a69cc62c2118d010244bf133ac
Author: Peter Xu <peterx@redhat.com>
Date:   Thu May 6 12:05:43 2021 -0400

    KVM: Provide helper to get kvm dirty log
    
    Provide a helper kvm_slot_get_dirty_log() to make the function
    kvm_physical_sync_dirty_bitmap() clearer.  We can even cache the as_id
    into KVMSlot when it is created, so that we don't even need to pass it
    down every time.
    
    Since at it, remove return value of kvm_physical_sync_dirty_bitmap()
    because it should never fail.
    
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-5-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",e65e5f50db
0,"commit ea776d15adc021a9f38179d27227a7f4d90a8698
Author: Peter Xu <peterx@redhat.com>
Date:   Thu May 6 12:05:42 2021 -0400

    KVM: Create the KVMSlot dirty bitmap on flag changes
    
    Previously we have two places that will create the per KVMSlot dirty
    bitmap:
    
      1. When a newly created KVMSlot has dirty logging enabled,
      2. When the first log_sync() happens for a memory slot.
    
    The 2nd case is lazy-init, while the 1st case is not (which is a fix
    of what the 2nd case missed).
    
    To do explicit initialization of dirty bitmaps, what we're missing is
    to create the dirty bitmap when the slot changed from not-dirty-track
    to dirty-track.  Do that in kvm_slot_update_flags().
    
    With that, we can safely remove the 2nd lazy-init.
    
    This change will be needed for kvm dirty ring because kvm dirty ring
    does not use the log_sync() interface at all.
    
    Also move all the pre-checks into kvm_slot_init_dirty_bitmap().
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-4-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",ea776d15ad
0,"commit a2f77862ffa56b5b0aa9e96fa73620ff751460d5
Author: Peter Xu <peterx@redhat.com>
Date:   Thu May 6 12:05:41 2021 -0400

    KVM: Use a big lock to replace per-kml slots_lock
    
    Per-kml slots_lock will bring some trouble if we want to take all slots_lock of
    all the KMLs, especially when we're in a context that we could have taken some
    of the KML slots_lock, then we even need to figure out what we've taken and
    what we need to take.
    
    Make this simple by merging all KML slots_lock into a single slots lock.
    
    Per-kml slots_lock isn't anything that helpful anyway - so far only x86 has two
    address spaces (so, two slots_locks).  All the rest archs will be having one
    address space always, which means there's actually one slots_lock so it will be
    the same as before.
    
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-3-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",a2f77862ff
0,"commit b87eaa9b8237f4d97950ca0f78309407212cfdc5
Author: Peter Xu <peterx@redhat.com>
Date:   Thu May 6 12:05:40 2021 -0400

    memory: Introduce log_sync_global() to memory listener
    
    Some of the memory listener may want to do log synchronization without
    being able to specify a range of memory to sync but always globally.
    Such a memory listener should provide this new method instead of the
    log_sync() method.
    
    Obviously we can also achieve similar thing when we put the global
    sync logic into a log_sync() handler. However that's not efficient
    enough because otherwise memory_global_dirty_log_sync() may do the
    global sync N times, where N is the number of flat ranges in the
    address space.
    
    Make this new method be exclusive to log_sync().
    
    Reviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Message-Id: <20210506160549.130416-2-peterx@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",b87eaa9b82
0,"commit 70cbae429ef3a7c36facd418da2c00e01ae51cb7
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 17 04:17:15 2021 -0400

    KVM: do not allow setting properties at runtime
    
    Only allow accelerator properties to be set when the
    accelerator is being created.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",70cbae429e
0,"commit 6ba7ada3559ed464c06cea7efa4c66f8f2ccbf5b
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Nov 9 10:13:30 2020 -0500

    qtest: add a QOM object for qtest
    
    The qtest server right now can only be created using the -qtest
    and -qtest-log options.  Allow an alternative way to create it
    using ""-object qtest,chardev=...,log=..."".
    
    This is part of the long term plan to make more (or all) of
    QEMU configurable through QMP and preconfig mode.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",6ba7ada355
0,"commit 9e33013bd494b43c81a2730b9f5cba2b5743343b
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Nov 3 04:39:02 2020 -0500

    object: add more commands to preconfig mode
    
    Creating and destroying QOM objects does not require a fully constructed
    machine.  Allow running object-add and object-del before machine
    initialization has concluded.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",9e33013bd4
0,"commit c1826ea6a052084f2e6a0bae9dd5932a727df039
Author: Yang Zhong <yang.zhong@intel.com>
Date:   Wed Apr 7 09:56:09 2021 +0800

    i386/cpu: Expose AVX_VNNI instruction to guest
    
    Expose AVX (VEX-encoded) versions of the Vector Neural Network
    Instructions to guest.
    
    The bit definition:
    CPUID.(EAX=7,ECX=1):EAX[bit 4] AVX_VNNI
    
    The following instructions are available when this feature is
    present in the guest.
      1. VPDPBUS: Multiply and Add Unsigned and Signed Bytes
      2. VPDPBUSDS: Multiply and Add Unsigned and Signed Bytes with Saturation
      3. VPDPWSSD: Multiply and Add Signed Word Integers
      4. VPDPWSSDS: Multiply and Add Signed Integers with Saturation
    
    As for the kvm related code, please reference Linux commit id 1085a6b585d7.
    
    The release document ref below link:
    https://software.intel.com/content/www/us/en/develop/download/\
    intel-architecture-instruction-set-extensions-programming-reference.html
    
    Signed-off-by: Yang Zhong <yang.zhong@intel.com>
    Message-Id: <20210407015609.22936-1-yang.zhong@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",c1826ea6a0
0,"commit cfa1f4bceea02c386bd7408fcc29544ac4679657
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Tue May 11 17:53:50 2021 +0200

    hw/mem/nvdimm: Use Kconfig 'imply' instead of 'depends on'
    
    Per the kconfig.rst:
    
      A device should be listed [...] ``imply`` if (depending on
      the QEMU command line) the board may or  may not be started
      without it.
    
    This is the case with the NVDIMM device, so use the 'imply'
    weak reverse dependency to select the symbol.
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210511155354.3069141-2-philmd@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",cfa1f4bcee
0,"commit 2d652f24cc0064bc314dc9775dbd5ba4d8282f10
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed May 12 09:21:56 2021 +0200

    configure: simplify assignment to GIT_SUBMODULES
    
    Do not guard each assignment with a check for --with-git-submodules=ignore.
    To avoid a confusing ""GIT"" line from the Makefile, guard the git-submodule-update
    recipe so that it is empty when --with-git-submodules=ignore.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",2d652f24cc
0,"commit b80fd28156610f8a1dcc70441da28b96566643bc
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed May 12 09:18:55 2021 +0200

    configure: check for submodules if --with-git-submodules=ignore
    
    Right now --with-git-submodules=ignore has a subtle difference from
    just running without a .git directory, in that it does not check
    that submodule sources actually exist.  Move the check for
    ui/keycodemapdb/README so that it happens even if the user
    specified --with-git-submodules=ignore, with a customized
    error message that is more suitable for this situation.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",b80fd28156
0,"commit 56267b622a3c376a183f3a8ddbbcb2e81f667934
Author: Philippe Mathieu-Daudé <philmd@redhat.com>
Date:   Wed May 12 06:58:21 2021 +0200

    configure: Only clone softfloat-3 repositories if TCG is enabled
    
    Signed-off-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Message-Id: <20210512045821.3257963-1-philmd@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>",56267b622a
0,"commit 96376ab154cfb7a8f0b985e26db5b0074b86c2ee
Author: Philippe Mathieu-Daudé <f4bug@amsat.org>
Date:   Thu May 13 19:12:44 2021 +0200

    hw/input/ps2: Use ps2_raise_irq() instead of open coding it
    
    Inspired-by: Volker Rümelin <vr_qemu@t-online.de>
    Signed-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Reviewed-by: Volker Rümelin <vr_qemu@t-online.de>
    Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
    Message-Id: <20210513171244.3940519-1-f4bug@amsat.org>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",96376ab154
0,"commit 9d74e6c3e763ef4095c8a5f853e175b4a9c710a2
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Tue May 25 20:14:41 2021 +0200

    pckbd: clear outport_present in outer pre_load()
    
    The variable outport_present is a flag to show if the outport
    subsection was loaded. Clear the outport_present flag in the
    outer pre_load() function. This method is recommended in the QEMU
    manual for developers in the chapter ""Migration, Subsections"".
    
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Message-Id: <20210525181441.27768-12-vr_qemu@t-online.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",9d74e6c3e7
0,"commit 314f9064b67f117f6a82b1a1f1c70cd75a88e943
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Tue May 25 20:14:40 2021 +0200

    pckbd: remove duplicated keyboard and mouse defines
    
    In 2005 the author of commit daa579632d ""PS2 mouse and keyboard
    separation (Paul Brook)"" and 0e43e99c04 ""PS2 mouse and keyboard
    separation (Paul Brook)"" separated the PS/2 controller code and
    the PS/2 keyboard and mouse code. It seems he forgot to remove
    a few defines. Remove them now.
    
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Message-Id: <20210525181441.27768-11-vr_qemu@t-online.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",314f9064b6
0,"commit f6f57a82989725fa6f23a4e55cebbc85a54b77c7
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Tue May 25 20:14:39 2021 +0200

    pckbd: correctly disable PS/2 communication
    
    Currently the PS/2 controller command KBD_CCMD_MOUSE_DISABLE
    doesn't disable the PS/2 mouse communication at all, and the
    PS/2 controller commands KBD_CCMD_KBD_DISABLE and
    KBD_CCMD_KBD_ENABLE only disable and enable the keyboard
    interrupt, which is very different from what a real PS/2
    controller does. A guest may notice the difference.
    
    Mask out pending data on disabled queues to correctly disable
    the PS/2 controller communication.
    
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Message-Id: <20210525181441.27768-10-vr_qemu@t-online.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",f6f57a8298
0,"commit e4697fabb58133c3cfa5d3afe727db80beda5af7
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Tue May 25 20:14:38 2021 +0200

    pckbd: add function kbd_pending()
    
    Replace reads of the variable s->pending with a call to a new
    function kbd_pending() to ease the review of the next patch.
    There is no functional change.
    
    Reviewed-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Message-Id: <20210525181441.27768-9-vr_qemu@t-online.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",e4697fabb5
0,"commit aa67a42f8d28cb7db743a070afa8f143235a4e7f
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Tue May 25 20:14:37 2021 +0200

    pckbd: add controller response queue
    
    Add a separate queue for PS/2 controller responses. The
    responses no longer get queued in the keyboard or mouse queues.
    The advantage of this can be seen after the next two patches,
    where the guest can disable the PS/2 communication with keyboard
    and mouse and still talk to the PS/2 controller.
    
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Message-Id: <20210525181441.27768-8-vr_qemu@t-online.de>
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>",aa67a42f8d
