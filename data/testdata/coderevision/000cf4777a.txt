diff --git a/tcg/arm/tcg-target-con-set.h b/tcg/arm/tcg-target-con-set.h
index 27aced5391..ab63e089c2 100644
--- a/tcg/arm/tcg-target-con-set.h
+++ b/tcg/arm/tcg-target-con-set.h
@@ -13,14 +13,11 @@ C_O0_I1(r)
 C_O0_I2(r, r)
 C_O0_I2(r, rIN)
 C_O0_I2(s, s)
-C_O0_I2(w, r)
 C_O0_I3(s, s, s)
 C_O0_I4(r, r, rI, rI)
 C_O0_I4(s, s, s, s)
 C_O1_I1(r, l)
 C_O1_I1(r, r)
-C_O1_I1(w, r)
-C_O1_I1(w, wr)
 C_O1_I2(r, 0, rZ)
 C_O1_I2(r, l, l)
 C_O1_I2(r, r, r)
@@ -29,7 +26,6 @@ C_O1_I2(r, r, rIK)
 C_O1_I2(r, r, rIN)
 C_O1_I2(r, r, ri)
 C_O1_I2(r, rZ, rZ)
-C_O1_I2(w, w, w)
 C_O1_I4(r, r, r, rI, rI)
 C_O1_I4(r, r, rIN, rIK, 0)
 C_O2_I1(r, r, l)
diff --git a/tcg/arm/tcg-target-con-str.h b/tcg/arm/tcg-target-con-str.h
index 255a1ae0e2..a0ab7747db 100644
--- a/tcg/arm/tcg-target-con-str.h
+++ b/tcg/arm/tcg-target-con-str.h
@@ -11,7 +11,6 @@
 REGS('r', ALL_GENERAL_REGS)
 REGS('l', ALL_QLOAD_REGS)
 REGS('s', ALL_QSTORE_REGS)
-REGS('w', ALL_VECTOR_REGS)
 
 /*
  * Define constraint letters for constants:
diff --git a/tcg/arm/tcg-target.c.inc b/tcg/arm/tcg-target.c.inc
index 4770d0c537..eb4f42e53d 100644
--- a/tcg/arm/tcg-target.c.inc
+++ b/tcg/arm/tcg-target.c.inc
@@ -40,10 +40,22 @@ bool use_idiv_instructions;
 
 #ifdef CONFIG_DEBUG_TCG
 static const char * const tcg_target_reg_names[TCG_TARGET_NB_REGS] = {
-    "%r0",  "%r1",  "%r2",  "%r3",  "%r4",  "%r5",  "%r6",  "%r7",
-    "%r8",  "%r9",  "%r10", "%r11", "%r12", "%sp",  "%r14", "%pc",
-    "%q0",  "%q1",  "%q2",  "%q3",  "%q4",  "%q5",  "%q6",  "%q7",
-    "%q8",  "%q9",  "%q10", "%q11", "%q12", "%q13", "%q14", "%q15",
+    "%r0",
+    "%r1",
+    "%r2",
+    "%r3",
+    "%r4",
+    "%r5",
+    "%r6",
+    "%r7",
+    "%r8",
+    "%r9",
+    "%r10",
+    "%r11",
+    "%r12",
+    "%r13",
+    "%r14",
+    "%pc",
 };
 #endif
 
@@ -63,20 +75,6 @@ static const int tcg_target_reg_alloc_order[] = {
     TCG_REG_R3,
     TCG_REG_R12,
     TCG_REG_R14,
-
-    TCG_REG_Q0,
-    TCG_REG_Q1,
-    TCG_REG_Q2,
-    TCG_REG_Q3,
-    /* Q4 - Q7 are call-saved, and skipped. */
-    TCG_REG_Q8,
-    TCG_REG_Q9,
-    TCG_REG_Q10,
-    TCG_REG_Q11,
-    TCG_REG_Q12,
-    TCG_REG_Q13,
-    TCG_REG_Q14,
-    TCG_REG_Q15,
 };
 
 static const int tcg_target_call_iarg_regs[4] = {
@@ -87,7 +85,6 @@ static const int tcg_target_call_oarg_regs[2] = {
 };
 
 #define TCG_REG_TMP  TCG_REG_R12
-#define TCG_VEC_TMP  TCG_REG_Q15
 
 enum arm_cond_code_e {
     COND_EQ = 0x0,
@@ -241,7 +238,6 @@ static bool patch_reloc(tcg_insn_unit *code_ptr, int type,
 #define TCG_CT_CONST_ZERO 0x800
 
 #define ALL_GENERAL_REGS  0xffffu
-#define ALL_VECTOR_REGS   0xffff0000u
 
 /*
  * r0-r2 will be overwritten when reading the tlb entry (softmmu only)
@@ -2121,22 +2117,6 @@ static TCGConstraintSetIndex tcg_target_op_def(TCGOpcode op)
     case INDEX_op_qemu_st_i64:
         return TARGET_LONG_BITS == 32 ? C_O0_I3(s, s, s) : C_O0_I4(s, s, s, s);
 
-    case INDEX_op_st_vec:
-        return C_O0_I2(w, r);
-    case INDEX_op_ld_vec:
-    case INDEX_op_dupm_vec:
-        return C_O1_I1(w, r);
-    case INDEX_op_dup_vec:
-        return C_O1_I1(w, wr);
-    case INDEX_op_dup2_vec:
-    case INDEX_op_add_vec:
-    case INDEX_op_sub_vec:
-    case INDEX_op_xor_vec:
-    case INDEX_op_or_vec:
-    case INDEX_op_and_vec:
-    case INDEX_op_cmp_vec:
-        return C_O1_I2(w, w, w);
-
     default:
         g_assert_not_reached();
     }
@@ -2146,18 +2126,12 @@ static void tcg_target_init(TCGContext *s)
 {
     /* Only probe for the platform and capabilities if we havn't already
        determined maximum values at compile time.  */
-#if !defined(use_idiv_instructions) || !defined(use_neon_instructions)
+#ifndef use_idiv_instructions
     {
         unsigned long hwcap = qemu_getauxval(AT_HWCAP);
-#ifndef use_idiv_instructions
         use_idiv_instructions = (hwcap & HWCAP_ARM_IDIVA) != 0;
-#endif
-#ifndef use_neon_instructions
-        use_neon_instructions = (hwcap & HWCAP_ARM_NEON) != 0;
-#endif
     }
 #endif
-
     if (__ARM_ARCH < 7) {
         const char *pl = (const char *)qemu_getauxval(AT_PLATFORM);
         if (pl != NULL && pl[0] == 'v' && pl[1] >= '4' && pl[1] <= '9') {
@@ -2165,7 +2139,7 @@ static void tcg_target_init(TCGContext *s)
         }
     }
 
-    tcg_target_available_regs[TCG_TYPE_I32] = ALL_GENERAL_REGS;
+    tcg_target_available_regs[TCG_TYPE_I32] = 0xffff;
 
     tcg_target_call_clobber_regs = 0;
     tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_R0);
@@ -2175,29 +2149,10 @@ static void tcg_target_init(TCGContext *s)
     tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_R12);
     tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_R14);
 
-    if (use_neon_instructions) {
-        tcg_target_available_regs[TCG_TYPE_V64]  = ALL_VECTOR_REGS;
-        tcg_target_available_regs[TCG_TYPE_V128] = ALL_VECTOR_REGS;
-
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q0);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q1);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q2);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q3);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q8);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q9);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q10);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q11);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q12);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q13);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q14);
-        tcg_regset_set_reg(tcg_target_call_clobber_regs, TCG_REG_Q15);
-    }
-
     s->reserved_regs = 0;
     tcg_regset_set_reg(s->reserved_regs, TCG_REG_CALL_STACK);
     tcg_regset_set_reg(s->reserved_regs, TCG_REG_TMP);
     tcg_regset_set_reg(s->reserved_regs, TCG_REG_PC);
-    tcg_regset_set_reg(s->reserved_regs, TCG_VEC_TMP);
 }
 
 static inline void tcg_out_ld(TCGContext *s, TCGType type, TCGReg arg,
@@ -2231,42 +2186,6 @@ static inline void tcg_out_movi(TCGContext *s, TCGType type,
     tcg_out_movi32(s, COND_AL, ret, arg);
 }
 
-static bool tcg_out_dup_vec(TCGContext *s, TCGType type, unsigned vece,
-                            TCGReg rd, TCGReg rs)
-{
-    g_assert_not_reached();
-}
-
-static bool tcg_out_dupm_vec(TCGContext *s, TCGType type, unsigned vece,
-                             TCGReg rd, TCGReg base, intptr_t offset)
-{
-    g_assert_not_reached();
-}
-
-static void tcg_out_dupi_vec(TCGContext *s, TCGType type, unsigned vece,
-                             TCGReg rd, int64_t v64)
-{
-    g_assert_not_reached();
-}
-
-static void tcg_out_vec_op(TCGContext *s, TCGOpcode opc,
-                           unsigned vecl, unsigned vece,
-                           const TCGArg *args, const int *const_args)
-{
-    g_assert_not_reached();
-}
-
-int tcg_can_emit_vec_op(TCGOpcode opc, TCGType type, unsigned vece)
-{
-    return 0;
-}
-
-void tcg_expand_vec_op(TCGOpcode opc, TCGType type, unsigned vece,
-                       TCGArg a0, ...)
-{
-    g_assert_not_reached();
-}
-
 static void tcg_out_nop_fill(tcg_insn_unit *p, int count)
 {
     int i;
diff --git a/tcg/arm/tcg-target.h b/tcg/arm/tcg-target.h
index a9dc09bd08..8d1fee6327 100644
--- a/tcg/arm/tcg-target.h
+++ b/tcg/arm/tcg-target.h
@@ -78,38 +78,19 @@ typedef enum {
     TCG_REG_R13,
     TCG_REG_R14,
     TCG_REG_PC,
-
-    TCG_REG_Q0,
-    TCG_REG_Q1,
-    TCG_REG_Q2,
-    TCG_REG_Q3,
-    TCG_REG_Q4,
-    TCG_REG_Q5,
-    TCG_REG_Q6,
-    TCG_REG_Q7,
-    TCG_REG_Q8,
-    TCG_REG_Q9,
-    TCG_REG_Q10,
-    TCG_REG_Q11,
-    TCG_REG_Q12,
-    TCG_REG_Q13,
-    TCG_REG_Q14,
-    TCG_REG_Q15,
-
-    TCG_AREG0 = TCG_REG_R6,
-    TCG_REG_CALL_STACK = TCG_REG_R13,
 } TCGReg;
 
-#define TCG_TARGET_NB_REGS 32
+#define TCG_TARGET_NB_REGS 16
 
 #ifdef __ARM_ARCH_EXT_IDIV__
 #define use_idiv_instructions  1
 #else
 extern bool use_idiv_instructions;
 #endif
-#define use_neon_instructions  0
+
 
 /* used for function call generation */
+#define TCG_REG_CALL_STACK		TCG_REG_R13
 #define TCG_TARGET_STACK_ALIGN		8
 #define TCG_TARGET_CALL_ALIGN_ARGS	1
 #define TCG_TARGET_CALL_STACK_OFFSET	0
@@ -147,26 +128,9 @@ extern bool use_idiv_instructions;
 #define TCG_TARGET_HAS_direct_jump      0
 #define TCG_TARGET_HAS_qemu_st8_i32     0
 
-#define TCG_TARGET_HAS_v64              use_neon_instructions
-#define TCG_TARGET_HAS_v128             use_neon_instructions
-#define TCG_TARGET_HAS_v256             0
-
-#define TCG_TARGET_HAS_andc_vec         0
-#define TCG_TARGET_HAS_orc_vec          0
-#define TCG_TARGET_HAS_not_vec          0
-#define TCG_TARGET_HAS_neg_vec          0
-#define TCG_TARGET_HAS_abs_vec          0
-#define TCG_TARGET_HAS_roti_vec         0
-#define TCG_TARGET_HAS_rots_vec         0
-#define TCG_TARGET_HAS_rotv_vec         0
-#define TCG_TARGET_HAS_shi_vec          0
-#define TCG_TARGET_HAS_shs_vec          0
-#define TCG_TARGET_HAS_shv_vec          0
-#define TCG_TARGET_HAS_mul_vec          0
-#define TCG_TARGET_HAS_sat_vec          0
-#define TCG_TARGET_HAS_minmax_vec       0
-#define TCG_TARGET_HAS_bitsel_vec       0
-#define TCG_TARGET_HAS_cmpsel_vec       0
+enum {
+    TCG_AREG0 = TCG_REG_R6,
+};
 
 #define TCG_TARGET_DEFAULT_MO (0)
 #define TCG_TARGET_HAS_MEMORY_BSWAP     1
diff --git a/tcg/arm/tcg-target.opc.h b/tcg/arm/tcg-target.opc.h
deleted file mode 100644
index 7a4578e9b4..0000000000
--- a/tcg/arm/tcg-target.opc.h
+++ /dev/null
@@ -1,12 +0,0 @@
-/*
- * Copyright (c) 2019 Linaro
- *
- * This work is licensed under the terms of the GNU GPL, version 2 or
- * (at your option) any later version.
- *
- * See the COPYING file in the top-level directory for details.
- *
- * Target-specific opcodes for host vector expansion.  These will be
- * emitted by tcg_expand_vec_op.  For those familiar with GCC internals,
- * consider these to be UNSPEC with names.
- */