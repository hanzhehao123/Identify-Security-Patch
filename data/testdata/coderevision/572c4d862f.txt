diff --git a/fpu/softfloat.c b/fpu/softfloat.c
index 27306d6a93..c32b1c7113 100644
--- a/fpu/softfloat.c
+++ b/fpu/softfloat.c
@@ -5210,40 +5210,47 @@ static const float64 float32_exp2_coefficients[15] =
 
 float32 float32_exp2(float32 a, float_status *status)
 {
-    FloatParts64 xp, xnp, tp, rp;
+    bool aSign;
+    int aExp;
+    uint32_t aSig;
+    float64 r, x, xn;
     int i;
+    a = float32_squash_input_denormal(a, status);
 
-    float32_unpack_canonical(&xp, a, status);
-    if (unlikely(xp.cls != float_class_normal)) {
-        switch (xp.cls) {
-        case float_class_snan:
-        case float_class_qnan:
-            parts_return_nan(&xp, status);
-            return float32_round_pack_canonical(&xp, status);
-        case float_class_inf:
-            return xp.sign ? float32_zero : a;
-        case float_class_zero:
-            return float32_one;
-        default:
-            break;
+    aSig = extractFloat32Frac( a );
+    aExp = extractFloat32Exp( a );
+    aSign = extractFloat32Sign( a );
+
+    if ( aExp == 0xFF) {
+        if (aSig) {
+            return propagateFloat32NaN(a, float32_zero, status);
         }
-        g_assert_not_reached();
+        return (aSign) ? float32_zero : a;
+    }
+    if (aExp == 0) {
+        if (aSig == 0) return float32_one;
     }
 
     float_raise(float_flag_inexact, status);
 
-    float64_unpack_canonical(&xnp, float64_ln2, status);
-    xp = *parts_mul(&xp, &tp, status);
-    xnp = xp;
+    /* ******************************* */
+    /* using float64 for approximation */
+    /* ******************************* */
+    x = float32_to_float64(a, status);
+    x = float64_mul(x, float64_ln2, status);
 
-    float64_unpack_canonical(&rp, float64_one, status);
+    xn = x;
+    r = float64_one;
     for (i = 0 ; i < 15 ; i++) {
-        float64_unpack_canonical(&tp, float32_exp2_coefficients[i], status);
-        rp = *parts_muladd(&tp, &xp, &rp, 0, status);
-        xnp = *parts_mul(&xnp, &xp, status);
+        float64 f;
+
+        f = float64_mul(xn, float32_exp2_coefficients[i], status);
+        r = float64_add(r, f, status);
+
+        xn = float64_mul(xn, x, status);
     }
 
-    return float32_round_pack_canonical(&rp, status);
+    return float64_to_float32(r, status);
 }
 
 /*----------------------------------------------------------------------------