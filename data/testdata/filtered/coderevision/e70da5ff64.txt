diff --git a/nbd/client-connection.c b/nbd/client-connection.c
index eb5cae2eae..f3b270d38c 100644
--- a/nbd/client-connection.c
+++ b/nbd/client-connection.c
@@ -125,14 +125,14 @@ void nbd_client_connection_release(NBDClientConnection *conn)
         return;
     }
 
-    WITH_QEMU_LOCK_GUARD(&conn->mutex) {
-        assert(!conn->detached);
-        if (conn->running) {
-            conn->detached = true;
-        } else {
-            do_free = true;
-        }
+    qemu_mutex_lock(&conn->mutex);
+    assert(!conn->detached);
+    if (conn->running) {
+        conn->detached = true;
+    } else {
+        do_free = true;
     }
+    qemu_mutex_unlock(&conn->mutex);
 
     if (do_free) {
         nbd_client_connection_do_free(conn);
@@ -150,55 +150,62 @@ void nbd_client_connection_release(NBDClientConnection *conn)
 QIOChannelSocket *coroutine_fn
 nbd_co_establish_connection(NBDClientConnection *conn, Error **errp)
 {
+    QIOChannelSocket *sioc = NULL;
     QemuThread thread;
 
-    WITH_QEMU_LOCK_GUARD(&conn->mutex) {
-        /*
-         * Don't call nbd_co_establish_connection() in several coroutines in
-         * parallel. Only one call at once is supported.
-         */
-        assert(!conn->wait_co);
-
-        if (!conn->running) {
-            if (conn->sioc) {
-                /* Previous attempt finally succeeded in background */
-                return g_steal_pointer(&conn->sioc);
-            }
-
-            conn->running = true;
-            error_free(conn->err);
-            conn->err = NULL;
-            qemu_thread_create(&thread, "nbd-connect",
-                               connect_thread_func, conn, QEMU_THREAD_DETACHED);
+    qemu_mutex_lock(&conn->mutex);
+
+    /*
+     * Don't call nbd_co_establish_connection() in several coroutines in
+     * parallel. Only one call at once is supported.
+     */
+    assert(!conn->wait_co);
+
+    if (!conn->running) {
+        if (conn->sioc) {
+            /* Previous attempt finally succeeded in background */
+            sioc = g_steal_pointer(&conn->sioc);
+            qemu_mutex_unlock(&conn->mutex);
+
+            return sioc;
         }
 
-        conn->wait_co = qemu_coroutine_self();
+        conn->running = true;
+        error_free(conn->err);
+        conn->err = NULL;
+        qemu_thread_create(&thread, "nbd-connect",
+                           connect_thread_func, conn, QEMU_THREAD_DETACHED);
     }
 
+    conn->wait_co = qemu_coroutine_self();
+
+    qemu_mutex_unlock(&conn->mutex);
+
     /*
      * We are going to wait for connect-thread finish, but
      * nbd_co_establish_connection_cancel() can interrupt.
      */
     qemu_coroutine_yield();
 
-    WITH_QEMU_LOCK_GUARD(&conn->mutex) {
-        if (conn->running) {
-            /*
-             * The connection attempt was canceled and the coroutine resumed
-             * before the connection thread finished its job.  Report the
-             * attempt as failed, but leave the connection thread running,
-             * to reuse it for the next connection attempt.
-             */
-            error_setg(errp, "Connection attempt cancelled by other operation");
-            return NULL;
-        } else {
-            error_propagate(errp, conn->err);
-            conn->err = NULL;
-            return g_steal_pointer(&conn->sioc);
-        }
+    qemu_mutex_lock(&conn->mutex);
+
+    if (conn->running) {
+        /*
+         * The connection attempt was canceled and the coroutine resumed
+         * before the connection thread finished its job.  Report the
+         * attempt as failed, but leave the connection thread running,
+         * to reuse it for the next connection attempt.
+         */
+        error_setg(errp, "Connection attempt cancelled by other operation");
+    } else {
+        error_propagate(errp, conn->err);
+        conn->err = NULL;
+        sioc = g_steal_pointer(&conn->sioc);
     }
 
-    abort(); /* unreachable */
+    qemu_mutex_unlock(&conn->mutex);
+
+    return sioc;
 }
 
 /*
@@ -213,9 +220,11 @@ void nbd_co_establish_connection_cancel(NBDClientConnection *conn)
 {
     Coroutine *wait_co;
 
-    WITH_QEMU_LOCK_GUARD(&conn->mutex) {
-        wait_co = g_steal_pointer(&conn->wait_co);
-    }
+    qemu_mutex_lock(&conn->mutex);
+
+    wait_co = g_steal_pointer(&conn->wait_co);
+
+    qemu_mutex_unlock(&conn->mutex);
 
     if (wait_co) {
         aio_co_wake(wait_co);