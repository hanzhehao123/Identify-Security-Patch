diff --git a/nbd/server.c b/nbd/server.c
index b60ebc3ab6..86a44a9b41 100644
--- a/nbd/server.c
+++ b/nbd/server.c
@@ -1513,11 +1513,6 @@ static void nbd_request_put(NBDRequestData *req)
     g_free(req);
 
     client->nb_requests--;
-
-    if (client->quiescing && client->nb_requests == 0) {
-        aio_wait_kick();
-    }
-
     nbd_client_receive_next_request(client);
 
     nbd_client_put(client);
@@ -1535,68 +1530,49 @@ static void blk_aio_attached(AioContext *ctx, void *opaque)
     QTAILQ_FOREACH(client, &exp->clients, next) {
         qio_channel_attach_aio_context(client->ioc, ctx);
 
-        assert(client->nb_requests == 0);
         assert(client->recv_coroutine == NULL);
         assert(client->send_coroutine == NULL);
-    }
-}
-
-static void blk_aio_detach(void *opaque)
-{
-    NBDExport *exp = opaque;
-    NBDClient *client;
-
-    trace_nbd_blk_aio_detach(exp->name, exp->common.ctx);
 
-    QTAILQ_FOREACH(client, &exp->clients, next) {
-        qio_channel_detach_aio_context(client->ioc);
+        if (client->quiescing) {
+            client->quiescing = false;
+            nbd_client_receive_next_request(client);
+        }
     }
-
-    exp->common.ctx = NULL;
 }
 
-static void nbd_drained_begin(void *opaque)
+static void nbd_aio_detach_bh(void *opaque)
 {
     NBDExport *exp = opaque;
     NBDClient *client;
 
     QTAILQ_FOREACH(client, &exp->clients, next) {
+        qio_channel_detach_aio_context(client->ioc);
         client->quiescing = true;
-    }
-}
 
-static void nbd_drained_end(void *opaque)
-{
-    NBDExport *exp = opaque;
-    NBDClient *client;
+        if (client->recv_coroutine) {
+            if (client->read_yielding) {
+                qemu_aio_coroutine_enter(exp->common.ctx,
+                                         client->recv_coroutine);
+            } else {
+                AIO_WAIT_WHILE(exp->common.ctx, client->recv_coroutine != NULL);
+            }
+        }
 
-    QTAILQ_FOREACH(client, &exp->clients, next) {
-        client->quiescing = false;
-        nbd_client_receive_next_request(client);
+        if (client->send_coroutine) {
+            AIO_WAIT_WHILE(exp->common.ctx, client->send_coroutine != NULL);
+        }
     }
 }
 
-static bool nbd_drained_poll(void *opaque)
+static void blk_aio_detach(void *opaque)
 {
     NBDExport *exp = opaque;
-    NBDClient *client;
 
-    QTAILQ_FOREACH(client, &exp->clients, next) {
-        if (client->nb_requests != 0) {
-            /*
-             * If there's a coroutine waiting for a request on nbd_read_eof()
-             * enter it here so we don't depend on the client to wake it up.
-             */
-            if (client->recv_coroutine != NULL && client->read_yielding) {
-                qemu_aio_coroutine_enter(exp->common.ctx,
-                                         client->recv_coroutine);
-            }
+    trace_nbd_blk_aio_detach(exp->name, exp->common.ctx);
 
-            return true;
-        }
-    }
+    aio_wait_bh_oneshot(exp->common.ctx, nbd_aio_detach_bh, exp);
 
-    return false;
+    exp->common.ctx = NULL;
 }
 
 static void nbd_eject_notifier(Notifier *n, void *data)
@@ -1618,12 +1594,6 @@ void nbd_export_set_on_eject_blk(BlockExport *exp, BlockBackend *blk)
     blk_add_remove_bs_notifier(blk, &nbd_exp->eject_notifier);
 }
 
-static const BlockDevOps nbd_block_ops = {
-    .drained_begin = nbd_drained_begin,
-    .drained_end = nbd_drained_end,
-    .drained_poll = nbd_drained_poll,
-};
-
 static int nbd_export_create(BlockExport *blk_exp, BlockExportOptions *exp_args,
                              Error **errp)
 {
@@ -1745,17 +1715,8 @@ static int nbd_export_create(BlockExport *blk_exp, BlockExportOptions *exp_args,
 
     exp->allocation_depth = arg->allocation_depth;
 
-    /*
-     * We need to inhibit request queuing in the block layer to ensure we can
-     * be properly quiesced when entering a drained section, as our coroutines
-     * servicing pending requests might enter blk_pread().
-     */
-    blk_set_disable_request_queuing(blk, true);
-
     blk_add_aio_context_notifier(blk, blk_aio_attached, blk_aio_detach, exp);
 
-    blk_set_dev_ops(blk, &nbd_block_ops, exp);
-
     QTAILQ_INSERT_TAIL(&exports, exp, next);
 
     return 0;
@@ -1827,7 +1788,6 @@ static void nbd_export_delete(BlockExport *blk_exp)
         }
         blk_remove_aio_context_notifier(exp->common.blk, blk_aio_attached,
                                         blk_aio_detach, exp);
-        blk_set_disable_request_queuing(exp->common.blk, false);
     }
 
     for (i = 0; i < exp->nr_export_bitmaps; i++) {