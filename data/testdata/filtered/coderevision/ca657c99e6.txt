diff --git a/block/block-copy.c b/block/block-copy.c
index 020f9846d8..5808cfe657 100644
--- a/block/block-copy.c
+++ b/block/block-copy.c
@@ -114,6 +114,7 @@ typedef struct BlockCopyState {
 
     SharedResource *mem;
 
+    uint64_t speed;
     RateLimit rate_limit;
 } BlockCopyState;
 
@@ -646,18 +647,20 @@ block_copy_dirty_clusters(BlockCopyCallState *call_state)
             task->copy_range = false;
         }
 
-        if (!call_state->ignore_ratelimit) {
-            uint64_t ns = ratelimit_calculate_delay(&s->rate_limit, 0);
-            if (ns > 0) {
-                block_copy_task_end(task, -EAGAIN);
-                g_free(task);
-                qemu_co_sleep_ns_wakeable(&call_state->sleep,
-                                          QEMU_CLOCK_REALTIME, ns);
-                continue;
+        if (s->speed) {
+            if (!call_state->ignore_ratelimit) {
+                uint64_t ns = ratelimit_calculate_delay(&s->rate_limit, 0);
+                if (ns > 0) {
+                    block_copy_task_end(task, -EAGAIN);
+                    g_free(task);
+                    qemu_co_sleep_ns_wakeable(&call_state->sleep,
+                                              QEMU_CLOCK_REALTIME, ns);
+                    continue;
+                }
             }
-        }
 
-        ratelimit_calculate_delay(&s->rate_limit, task->bytes);
+            ratelimit_calculate_delay(&s->rate_limit, task->bytes);
+        }
 
         trace_block_copy_process(s, task->offset);
 
@@ -850,7 +853,10 @@ void block_copy_set_skip_unallocated(BlockCopyState *s, bool skip)
 
 void block_copy_set_speed(BlockCopyState *s, uint64_t speed)
 {
-    ratelimit_set_speed(&s->rate_limit, speed, BLOCK_COPY_SLICE_TIME);
+    s->speed = speed;
+    if (speed > 0) {
+        ratelimit_set_speed(&s->rate_limit, speed, BLOCK_COPY_SLICE_TIME);
+    }
 
     /*
      * Note: it's good to kick all call states from here, but it should be done