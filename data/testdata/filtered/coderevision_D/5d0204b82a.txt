diff --git a/fpu/softfloat.c b/fpu/softfloat.c
index 1cb162882b..5026f518b0 100644
--- a/fpu/softfloat.c
+++ b/fpu/softfloat.c
@@ -3559,13 +3559,6 @@ float32 int64_to_float32_scalbn(int64_t a, int scale, float_status *status)
 {
     FloatParts64 p;
 
-    /* Without scaling, there are no overflow concerns. */
-    if (likely(scale == 0) && can_use_fpu(status)) {
-        union_float32 ur;
-        ur.h = a;
-        return ur.s;
-    }
-
     parts64_sint_to_float(&p, a, scale, status);
     return float32_round_pack_canonical(&p, status);
 }
@@ -3599,13 +3592,6 @@ float64 int64_to_float64_scalbn(int64_t a, int scale, float_status *status)
 {
     FloatParts64 p;
 
-    /* Without scaling, there are no overflow concerns. */
-    if (likely(scale == 0) && can_use_fpu(status)) {
-        union_float64 ur;
-        ur.h = a;
-        return ur.s;
-    }
-
     parts_sint_to_float(&p, a, scale, status);
     return float64_round_pack_canonical(&p, status);
 }
@@ -3740,13 +3726,6 @@ float32 uint64_to_float32_scalbn(uint64_t a, int scale, float_status *status)
 {
     FloatParts64 p;
 
-    /* Without scaling, there are no overflow concerns. */
-    if (likely(scale == 0) && can_use_fpu(status)) {
-        union_float32 ur;
-        ur.h = a;
-        return ur.s;
-    }
-
     parts_uint_to_float(&p, a, scale, status);
     return float32_round_pack_canonical(&p, status);
 }
@@ -3780,13 +3759,6 @@ float64 uint64_to_float64_scalbn(uint64_t a, int scale, float_status *status)
 {
     FloatParts64 p;
 
-    /* Without scaling, there are no overflow concerns. */
-    if (likely(scale == 0) && can_use_fpu(status)) {
-        union_float64 ur;
-        ur.h = a;
-        return ur.s;
-    }
-
     parts_uint_to_float(&p, a, scale, status);
     return float64_round_pack_canonical(&p, status);
 }