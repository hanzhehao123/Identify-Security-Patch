diff --git a/tcg/tcg.c b/tcg/tcg.c
index ba690e0483..1e683b80e4 100644
--- a/tcg/tcg.c
+++ b/tcg/tcg.c
@@ -720,10 +720,9 @@ static bool tcg_region_alloc(TCGContext *s)
  * Perform a context's first region allocation.
  * This function does _not_ increment region.agg_size_full.
  */
-static void tcg_region_initial_alloc__locked(TCGContext *s)
+static inline bool tcg_region_initial_alloc__locked(TCGContext *s)
 {
-    bool err = tcg_region_alloc__locked(s);
-    g_assert(!err);
+    return tcg_region_alloc__locked(s);
 }
 
 /* Call from a safe-work context */
@@ -738,7 +737,9 @@ void tcg_region_reset_all(void)
 
     for (i = 0; i < n_ctxs; i++) {
         TCGContext *s = qatomic_read(&tcg_ctxs[i]);
-        tcg_region_initial_alloc__locked(s);
+        bool err = tcg_region_initial_alloc__locked(s);
+
+        g_assert(!err);
     }
     qemu_mutex_unlock(&region.lock);
 
@@ -875,7 +876,11 @@ void tcg_region_init(void)
 
     /* In user-mode we support only one ctx, so do the initial allocation now */
 #ifdef CONFIG_USER_ONLY
-    tcg_region_initial_alloc__locked(tcg_ctx);
+    {
+        bool err = tcg_region_initial_alloc__locked(tcg_ctx);
+
+        g_assert(!err);
+    }
 #endif
 }
 
@@ -937,6 +942,7 @@ void tcg_register_thread(void)
     MachineState *ms = MACHINE(qdev_get_machine());
     TCGContext *s = g_malloc(sizeof(*s));
     unsigned int i, n;
+    bool err;
 
     *s = tcg_init_ctx;
 
@@ -960,7 +966,8 @@ void tcg_register_thread(void)
 
     tcg_ctx = s;
     qemu_mutex_lock(&region.lock);
-    tcg_region_initial_alloc__locked(s);
+    err = tcg_region_initial_alloc__locked(tcg_ctx);
+    g_assert(!err);
     qemu_mutex_unlock(&region.lock);
 }
 #endif /* !CONFIG_USER_ONLY */