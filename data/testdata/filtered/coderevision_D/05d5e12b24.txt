diff --git a/block/block-copy.c b/block/block-copy.c
index 0a1cf3d0cb..a437978e35 100644
--- a/block/block-copy.c
+++ b/block/block-copy.c
@@ -28,14 +28,6 @@
 #define BLOCK_COPY_MAX_WORKERS 64
 #define BLOCK_COPY_SLICE_TIME 100000000ULL /* ns */
 
-typedef enum {
-    COPY_READ_WRITE_CLUSTER,
-    COPY_READ_WRITE,
-    COPY_WRITE_ZEROES,
-    COPY_RANGE_SMALL,
-    COPY_RANGE_FULL
-} BlockCopyMethod;
-
 static coroutine_fn int block_copy_task_entry(AioTask *task);
 
 typedef struct BlockCopyCallState {
@@ -72,7 +64,8 @@ typedef struct BlockCopyTask {
     BlockCopyCallState *call_state;
     int64_t offset;
     int64_t bytes;
-    BlockCopyMethod method;
+    bool zeroes;
+    bool copy_range;
     QLIST_ENTRY(BlockCopyTask) list;
     CoQueue wait_queue; /* coroutines blocked on this task */
 } BlockCopyTask;
@@ -93,8 +86,8 @@ typedef struct BlockCopyState {
     BdrvDirtyBitmap *copy_bitmap;
     int64_t in_flight_bytes;
     int64_t cluster_size;
-    BlockCopyMethod method;
-    int64_t max_transfer;
+    bool use_copy_range;
+    int64_t copy_size;
     uint64_t len;
     QLIST_HEAD(, BlockCopyTask) tasks; /* All tasks from all block-copy calls */
     QLIST_HEAD(, BlockCopyCallState) calls;
@@ -156,24 +149,6 @@ static bool coroutine_fn block_copy_wait_one(BlockCopyState *s, int64_t offset,
     return true;
 }
 
-static int64_t block_copy_chunk_size(BlockCopyState *s)
-{
-    switch (s->method) {
-    case COPY_READ_WRITE_CLUSTER:
-        return s->cluster_size;
-    case COPY_READ_WRITE:
-    case COPY_RANGE_SMALL:
-        return MIN(MAX(s->cluster_size, BLOCK_COPY_MAX_BUFFER),
-                   s->max_transfer);
-    case COPY_RANGE_FULL:
-        return MIN(MAX(s->cluster_size, BLOCK_COPY_MAX_COPY_RANGE),
-                   s->max_transfer);
-    default:
-        /* Cannot have COPY_WRITE_ZEROES here.  */
-        abort();
-    }
-}
-
 /*
  * Search for the first dirty area in offset/bytes range and create task at
  * the beginning of it.
@@ -183,9 +158,8 @@ static BlockCopyTask *block_copy_task_create(BlockCopyState *s,
                                              int64_t offset, int64_t bytes)
 {
     BlockCopyTask *task;
-    int64_t max_chunk;
+    int64_t max_chunk = MIN_NON_ZERO(s->copy_size, call_state->max_chunk);
 
-    max_chunk = MIN_NON_ZERO(block_copy_chunk_size(s), call_state->max_chunk);
     if (!bdrv_dirty_bitmap_next_dirty_area(s->copy_bitmap,
                                            offset, offset + bytes,
                                            max_chunk, &offset, &bytes))
@@ -209,7 +183,7 @@ static BlockCopyTask *block_copy_task_create(BlockCopyState *s,
         .call_state = call_state,
         .offset = offset,
         .bytes = bytes,
-        .method = s->method,
+        .copy_range = s->use_copy_range,
     };
     qemu_co_queue_init(&task->wait_queue);
     QLIST_INSERT_HEAD(&s->tasks, task, list);
@@ -293,28 +267,28 @@ BlockCopyState *block_copy_state_new(BdrvChild *source, BdrvChild *target,
         .len = bdrv_dirty_bitmap_size(copy_bitmap),
         .write_flags = write_flags,
         .mem = shres_create(BLOCK_COPY_MAX_MEM),
-        .max_transfer = QEMU_ALIGN_DOWN(
-                                    block_copy_max_transfer(source, target),
-                                    cluster_size),
     };
 
-    if (s->max_transfer < cluster_size) {
+    if (block_copy_max_transfer(source, target) < cluster_size) {
         /*
          * copy_range does not respect max_transfer. We don't want to bother
          * with requests smaller than block-copy cluster size, so fallback to
          * buffered copying (read and write respect max_transfer on their
          * behalf).
          */
-        s->method = COPY_READ_WRITE_CLUSTER;
+        s->use_copy_range = false;
+        s->copy_size = cluster_size;
     } else if (write_flags & BDRV_REQ_WRITE_COMPRESSED) {
         /* Compression supports only cluster-size writes and no copy-range. */
-        s->method = COPY_READ_WRITE_CLUSTER;
+        s->use_copy_range = false;
+        s->copy_size = cluster_size;
     } else {
         /*
-         * If copy range enabled, start with COPY_RANGE_SMALL, until first
+         * We enable copy-range, but keep small copy_size, until first
          * successful copy_range (look at block_copy_do_copy).
          */
-        s->method = use_copy_range ? COPY_RANGE_SMALL : COPY_READ_WRITE;
+        s->use_copy_range = use_copy_range;
+        s->copy_size = MAX(s->cluster_size, BLOCK_COPY_MAX_BUFFER);
     }
 
     ratelimit_init(&s->rate_limit);
@@ -369,14 +343,17 @@ static coroutine_fn int block_copy_task_run(AioTaskPool *pool,
  *
  * No sync here: nor bitmap neighter intersecting requests handling, only copy.
  *
- * @method is an in-out argument, so that copy_range can be either extended to
- * a full-size buffer or disabled if the copy_range attempt fails.  The output
- * value of @method should be used for subsequent tasks.
+ * @copy_range is an in-out argument: if *copy_range is false, copy_range is not
+ * done. If *copy_range is true, copy_range is attempted. If the copy_range
+ * attempt fails, the function falls back to the usual read+write and
+ * *copy_range is set to false. *copy_range and zeroes must not be true
+ * simultaneously.
+ *
  * Returns 0 on success.
  */
 static int coroutine_fn block_copy_do_copy(BlockCopyState *s,
                                            int64_t offset, int64_t bytes,
-                                           BlockCopyMethod *method,
+                                           bool zeroes, bool *copy_range,
                                            bool *error_is_read)
 {
     int ret;
@@ -390,9 +367,9 @@ static int coroutine_fn block_copy_do_copy(BlockCopyState *s,
     assert(offset + bytes <= s->len ||
            offset + bytes == QEMU_ALIGN_UP(s->len, s->cluster_size));
     assert(nbytes < INT_MAX);
+    assert(!(*copy_range && zeroes));
 
-    switch (*method) {
-    case COPY_WRITE_ZEROES:
+    if (zeroes) {
         ret = bdrv_co_pwrite_zeroes(s->target, offset, nbytes, s->write_flags &
                                     ~BDRV_REQ_WRITE_COMPRESSED);
         if (ret < 0) {
@@ -400,59 +377,76 @@ static int coroutine_fn block_copy_do_copy(BlockCopyState *s,
             *error_is_read = false;
         }
         return ret;
+    }
 
-    case COPY_RANGE_SMALL:
-    case COPY_RANGE_FULL:
+    if (*copy_range) {
         ret = bdrv_co_copy_range(s->source, offset, s->target, offset, nbytes,
                                  0, s->write_flags);
-        if (ret >= 0) {
-            /* Successful copy-range, increase chunk size.  */
-            *method = COPY_RANGE_FULL;
+        if (ret < 0) {
+            trace_block_copy_copy_range_fail(s, offset, ret);
+            *copy_range = false;
+            /* Fallback to read+write with allocated buffer */
+        } else {
             return 0;
         }
+    }
 
-        trace_block_copy_copy_range_fail(s, offset, ret);
-        *method = COPY_READ_WRITE;
-        /* Fall through to read+write with allocated buffer */
+    /*
+     * In case of failed copy_range request above, we may proceed with buffered
+     * request larger than BLOCK_COPY_MAX_BUFFER. Still, further requests will
+     * be properly limited, so don't care too much. Moreover the most likely
+     * case (copy_range is unsupported for the configuration, so the very first
+     * copy_range request fails) is handled by setting large copy_size only
+     * after first successful copy_range.
+     */
 
-    case COPY_READ_WRITE_CLUSTER:
-    case COPY_READ_WRITE:
-        /*
-         * In case of failed copy_range request above, we may proceed with
-         * buffered request larger than BLOCK_COPY_MAX_BUFFER.
-         * Still, further requests will be properly limited, so don't care too
-         * much. Moreover the most likely case (copy_range is unsupported for
-         * the configuration, so the very first copy_range request fails)
-         * is handled by setting large copy_size only after first successful
-         * copy_range.
-         */
+    bounce_buffer = qemu_blockalign(s->source->bs, nbytes);
 
-        bounce_buffer = qemu_blockalign(s->source->bs, nbytes);
+    ret = bdrv_co_pread(s->source, offset, nbytes, bounce_buffer, 0);
+    if (ret < 0) {
+        trace_block_copy_read_fail(s, offset, ret);
+        *error_is_read = true;
+        goto out;
+    }
 
-        ret = bdrv_co_pread(s->source, offset, nbytes, bounce_buffer, 0);
-        if (ret < 0) {
-            trace_block_copy_read_fail(s, offset, ret);
-            *error_is_read = true;
-            goto out;
-        }
+    ret = bdrv_co_pwrite(s->target, offset, nbytes, bounce_buffer,
+                         s->write_flags);
+    if (ret < 0) {
+        trace_block_copy_write_fail(s, offset, ret);
+        *error_is_read = false;
+        goto out;
+    }
 
-        ret = bdrv_co_pwrite(s->target, offset, nbytes, bounce_buffer,
-                             s->write_flags);
-        if (ret < 0) {
-            trace_block_copy_write_fail(s, offset, ret);
-            *error_is_read = false;
-            goto out;
-        }
+out:
+    qemu_vfree(bounce_buffer);
 
-    out:
-        qemu_vfree(bounce_buffer);
-        break;
+    return ret;
+}
 
-    default:
-        abort();
+static void block_copy_handle_copy_range_result(BlockCopyState *s,
+                                                bool is_success)
+{
+    if (!s->use_copy_range) {
+        /* already disabled */
+        return;
     }
 
-    return ret;
+    if (is_success) {
+        /*
+         * Successful copy-range. Now increase copy_size.  copy_range
+         * does not respect max_transfer (it's a TODO), so we factor
+         * that in here.
+         */
+        s->copy_size =
+                MIN(MAX(s->cluster_size, BLOCK_COPY_MAX_COPY_RANGE),
+                    QEMU_ALIGN_DOWN(block_copy_max_transfer(s->source,
+                                                            s->target),
+                                    s->cluster_size));
+    } else {
+        /* Copy-range failed, disable it. */
+        s->use_copy_range = false;
+        s->copy_size = MAX(s->cluster_size, BLOCK_COPY_MAX_BUFFER);
+    }
 }
 
 static coroutine_fn int block_copy_task_entry(AioTask *task)
@@ -460,12 +454,13 @@ static coroutine_fn int block_copy_task_entry(AioTask *task)
     BlockCopyTask *t = container_of(task, BlockCopyTask, task);
     BlockCopyState *s = t->s;
     bool error_is_read = false;
-    BlockCopyMethod method = t->method;
+    bool copy_range = t->copy_range;
     int ret;
 
-    ret = block_copy_do_copy(s, t->offset, t->bytes, &method, &error_is_read);
-    if (s->method == t->method) {
-        s->method = method;
+    ret = block_copy_do_copy(s, t->offset, t->bytes, t->zeroes,
+                             &copy_range, &error_is_read);
+    if (t->copy_range) {
+        block_copy_handle_copy_range_result(s, copy_range);
     }
     if (ret < 0) {
         if (!t->call_state->ret) {
@@ -648,7 +643,8 @@ block_copy_dirty_clusters(BlockCopyCallState *call_state)
             continue;
         }
         if (ret & BDRV_BLOCK_ZERO) {
-            task->method = COPY_WRITE_ZEROES;
+            task->zeroes = true;
+            task->copy_range = false;
         }
 
         if (!call_state->ignore_ratelimit) {