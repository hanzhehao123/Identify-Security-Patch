diff --git a/python/setup.cfg b/python/setup.cfg
index ba8d29fd62..c9b9445af9 100644
--- a/python/setup.cfg
+++ b/python/setup.cfg
@@ -57,14 +57,6 @@ python_version = 3.6
 warn_unused_configs = True
 namespace_packages = True
 
-[mypy-qemu.qmp.qom_fuse]
-# fusepy has no type stubs:
-allow_subclassing_any = True
-
-[mypy-fuse]
-# fusepy has no type stubs:
-ignore_missing_imports = True
-
 [pylint.messages control]
 # Disable the message, report, category or checker with the given id(s). You
 # can either give multiple identifiers separated by comma (,) or put this
diff --git a/scripts/qmp/qom-fuse b/scripts/qmp/qom-fuse
index a5a7a304a3..0d11f73152 100755
--- a/scripts/qmp/qom-fuse
+++ b/scripts/qmp/qom-fuse
@@ -38,14 +38,7 @@ from errno import ENOENT, EPERM
 import os
 import stat
 import sys
-from typing import (
-    IO,
-    Dict,
-    Iterator,
-    Mapping,
-    Optional,
-    Union,
-)
+from typing import Dict
 
 import fuse
 from fuse import FUSE, FuseOSError, Operations
@@ -90,7 +83,7 @@ class QOMFuse(QOMCommand, Operations):
         self.fuse = FUSE(self, self.mount, foreground=True)
         return 0
 
-    def get_ino(self, path: str) -> int:
+    def get_ino(self, path):
         """Get an inode number for a given QOM path."""
         if path in self.ino_map:
             return self.ino_map[path]
@@ -98,7 +91,7 @@ class QOMFuse(QOMCommand, Operations):
         self.ino_count += 1
         return self.ino_map[path]
 
-    def is_object(self, path: str) -> bool:
+    def is_object(self, path):
         """Is the given QOM path an object?"""
         try:
             self.qom_list(path)
@@ -106,7 +99,7 @@ class QOMFuse(QOMCommand, Operations):
         except QMPResponseError:
             return False
 
-    def is_property(self, path: str) -> bool:
+    def is_property(self, path):
         """Is the given QOM path a property?"""
         path, prop = path.rsplit('/', 1)
         if path == '':
@@ -119,7 +112,7 @@ class QOMFuse(QOMCommand, Operations):
         except QMPResponseError:
             return False
 
-    def is_link(self, path: str) -> bool:
+    def is_link(self, path):
         """Is the given QOM path a link?"""
         path, prop = path.rsplit('/', 1)
         if path == '':
@@ -132,7 +125,7 @@ class QOMFuse(QOMCommand, Operations):
         except QMPResponseError:
             return False
 
-    def read(self, path: str, size: int, offset: int, fh: IO[bytes]) -> bytes:
+    def read(self, path, size, offset, fh):
         if not self.is_property(path):
             raise FuseOSError(ENOENT)
 
@@ -150,7 +143,7 @@ class QOMFuse(QOMCommand, Operations):
 
         return bytes(data[offset:][:size], encoding='utf-8')
 
-    def readlink(self, path: str) -> Union[bool, str]:
+    def readlink(self, path):
         if not self.is_link(path):
             return False
         path, prop = path.rsplit('/', 1)
@@ -158,8 +151,7 @@ class QOMFuse(QOMCommand, Operations):
         return prefix + str(self.qmp.command('qom-get', path=path,
                                              property=prop))
 
-    def getattr(self, path: str,
-                fh: Optional[IO[bytes]] = None) -> Mapping[str, object]:
+    def getattr(self, path, fh=None):
         if self.is_link(path):
             value = {
                 'st_mode': 0o755 | stat.S_IFLNK,
@@ -203,7 +195,7 @@ class QOMFuse(QOMCommand, Operations):
             raise FuseOSError(ENOENT)
         return value
 
-    def readdir(self, path: str, fh: IO[bytes]) -> Iterator[str]:
+    def readdir(self, path, fh):
         yield '.'
         yield '..'
         for item in self.qom_list(path):